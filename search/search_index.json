{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Jack's Digital Garden","text":"<p>This is a personal knowledge base containing notes, guides, and resources across various technical topics.</p>"},{"location":"#recent-additions","title":"Recent Additions","text":"<ul> <li>DaVinci Resolve - Working with DaVinci Resolve video editor</li> <li>Testing - Software testing concepts and tools</li> <li>Database and GraphQL - Database systems and GraphQL APIs</li> <li>AI Coding - Using AI for coding assistance</li> </ul>"},{"location":"#main-topics","title":"Main Topics","text":""},{"location":"#programming-languages","title":"Programming Languages","text":"<ul> <li>Rust - Systems programming with Rust</li> <li>Python - Python programming and resources </li> <li>F# - Functional programming with F#</li> </ul>"},{"location":"#operating-systems","title":"Operating Systems","text":"<ul> <li>Linux - Linux configuration, distributions and tools</li> <li>Apple - macOS and iOS development</li> </ul>"},{"location":"#hardware","title":"Hardware","text":"<ul> <li>Raspberry Pi - Raspberry Pi projects and configurations</li> <li>Embedded Systems - Embedded development with STM32 and others</li> </ul>"},{"location":"#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Games - Notes on games like Factorio and Astroneer</li> <li>Other Topics - Assorted technical topics and references</li> </ul>"},{"location":"#example-mermaid-diagram","title":"Example Mermaid Diagram","text":"<pre><code>flowchart TD\n    A[Start] --&gt; B{Do you have a question?}\n    B --&gt;|Yes| C[Check the Digital Garden]\n    B --&gt;|No| D[Explore the Digital Garden]\n    C --&gt; E{Found the answer?}\n    E --&gt;|Yes| F[Great!]\n    E --&gt;|No| G[Ask for help]\n    G --&gt; A\n    D --&gt; A\n    F --&gt; H[End]</code></pre>"},{"location":"2023-03-21-Julia/","title":"Julia","text":""},{"location":"2023-03-21-Julia/#julia","title":"Julia","text":""},{"location":"2023-03-21-Julia/#quick-start","title":"Quick Start","text":"<p>The Fast Track to julia or A quick and dirty overview of julia On linux install juliaup and add a shebang to Julia script and then <code>chmod +x</code> it.</p> <pre><code>curl -fsSL https://install.julialang.org | sh\ncat &lt;&lt;'EOF' &gt;&gt; myjuliaexec\n#!/bin/bash\n#=\nexec julia --color=yes --startup-file=no -e 'include(popfirst!(ARGS))' \\\n    \"${BASH_SOURCE[0]}\" \"$@\"\n=#\n\n@show ARGS  # put any Julia code here\nEOF\nchmod +x myjuliaexec\n./myjuliaexec\n</code></pre> <p>startup</p> <pre><code>mkdir -p ~/.julia/config\ncat &lt;&lt; 'EOF' &gt;&gt; ~/.julia/config/startup.jl\nprrintln(\"Hi from ~/.julia/config/startup.jl\")\nEOF\n</code></pre> <p>REPL history: <code>~/.julia/logs/repl_history.jl</code></p>"},{"location":"2023-03-21-Julia/#_1","title":"Julia","text":"<p>Everything in julia is based on packages. Even the language server (at least in neovim) will not work without being run from a package. </p> <p>In vim, change directory to the current file (lcd changes it locally only - for the current window)</p> <pre><code>:cd %:p:h\n</code></pre> <pre><code>BenchmarkTools\nCairoMakie\nDistributions\nPkgTemplates\nPythonCall\nRevise\nTerminalPager\nUnicodePlots\n</code></pre>"},{"location":"2023-03-21-Julia/#graphs","title":"Graphs","text":"<ul> <li>quick tutorial to get you started with Makie</li> <li>UnicodePlots</li> </ul>"},{"location":"2023-03-21-Julia/#documentation","title":"Documentation","text":"<p>Split your documentation into 4 parts, as detailed in the Documentation System: </p> <ul> <li>Tutorials</li> <li>How-To Guides</li> <li>Explanations</li> <li> <p>Reference and Background</p> </li> <li> <p>Documenter.jl</p> </li> <li>Literate.jl </li> </ul> <p>LiveServer.jl and Revise.jl to help build it.</p>"},{"location":"2023-03-21-Julia/#learning","title":"Learning","text":"<ul> <li>Think Julia</li> <li>Introduction to Computational Thinking - Make mathematics your playground!</li> <li>Advanced Scientific Computing: producing better code</li> <li>The Julia Programming Language</li> <li>Quantitative Economics with Julia \u2014 Quantitative Economics with Julia</li> <li>Julia Language a Concise Tutorial/</li> <li>Julia Programming Tutorial</li> <li>Introduction to Probability for Data Science</li> <li>Introduction to Scientific Programming and Machine Learning with Julia</li> <li>Data Science using Julia</li> <li>julia for Optimization and Learning</li> <li>Up and Running with Plots.jl</li> <li>Unicode plotting library designed for use in Julia's REPL</li> </ul>"},{"location":"2023-03-21-Julia/#workflow","title":"Workflow","text":"<ul> <li>Workflow for Testing Packages</li> </ul> <p>Entering this command (or an equivalent) will potentially save a lot of hassle <code>julia -e 'import Pkg; println(Pkg.devdir())' | cd</code></p> <pre><code>import Pkg\ncd(Pkg.devdir()) # the standard development directory\nPkg.generate(\"Tmp\")\ncd(\"Tmp\")\n</code></pre> <pre><code>mkdir(\"test\")\nPkg.activate(\"test\")\nPkg.add(\"Test\")\nPkg.activate(\".\") \n</code></pre> <p>First write failing tests. There's a lot of worrisome output that can be safely ignored.</p> <pre><code>write(\"test/runtests.jl\",\n\"\"\"\nusing Tmp\nusing Test\n\n@testset \"Tmp tests\" begin\n\n    @testset \"Math tests\" begin\n        @test 2 == simple_add(1, 1)\n        @test_throws MethodError simple_add(1, \"A\")\n    end\n\nend\n\"\"\");\nPkg.test()\n</code></pre> <p>Expected output: <pre><code>...\nTest Summary: | Fail  Error  Total  Time\nTmp tests     |    1      1      2  0.9s\n  Math tests  |    1      1      2  0.9s\n...\n</code></pre></p> <p>Now write a function to pass the tests:</p> <pre><code>write(\"src/Tmp.jl\",\n\"\"\"\nmodule Tmp\n\nexport simple_add\n\nfunction simple_add(a, b)\n    a + b\nend\n\nend # module Tmp\n\"\"\");\nPkg.test()\n</code></pre> <p>Expected output: <pre><code>...\nTest Summary: | Pass  Total  Time\nTmp tests     |    2      2  0.0s\n     Testing Tmp tests passed \n</code></pre></p> <p>Now is a good time to add documentation</p> <p>Interactive testing:</p> <pre><code>julia&gt; using Tmp\njulia&gt; simple_add(1, 2)\n3 \n</code></pre> <p>Unit Testing</p> <ul> <li>Julia Workflow Tips and slides</li> <li>OhMyREPL</li> <li>Revise.jl</li> <li>JuliaTesting</li> <li>TestEnv.jl: Activate your test environment, so you can use your test dependencies in the REPL</li> <li>ReTestItems.jl: Run testitems in parallel.</li> <li>Cthulhu.jl: The slow descent into madness</li> <li>Introduction to Julia\u2019s Debugger</li> <li>LoopVectorization and Home \u00b7 LoopVectorization.jl and Loop Vectorization in Julia - GeeksforGeeks</li> <li>List of additional Debug/Analysis Tools</li> <li>Tools for fixing performance problems in Julia: ProfileView and Cthulhu</li> <li>LiveServer.jl: Simple development server with live-reload capability for Julia.</li> <li>StaticCompiler.jl: Compiles Julia code to a standalone library (experimental) AST Transforms, for example  startup.jl with transforms</li> </ul> <p>Broadcast will try to cast all the objects to a common dimension, map will directly apply the given function element wise</p>"},{"location":"2023-03-21-Julia/#julia-shell","title":"Julia shell","text":"<ul> <li>Julia REPL tips and tricks! Coding productivity hacks and quality of life</li> </ul> <pre><code>julia\n^L # clear screen\n? # help\napropos(\"thing\") # find something helpful\n# &lt;TAB&gt;&lt;TAB&gt; expand available options, to say a function\n; # open shell\ntldr cpio # extremely helpful tool to show the basic examples of a command (cpio in this case)\nmethods(+) # list methods for the function (+ in this case)\nusing TerminalPager\nmethodswith(IO) |&gt; pager \n# \\alp&lt;TAB&gt;&lt;TAB&gt; autocomplete\nclipboard(\"thing\") # send \"thing\" to the system clipboard\n@time sin(1)\nusing BenchmarkTools\n@benchmark sin(1)\n@btime sin(1)\n@code_lowered(sin(1)) # detailed information on how the code is processed at a low level\n@code_llvm(sin(1))\n@code_native(sin(1))\n@code_warntype(sin(2)) # inspect warnings, like type conversions (avoid any types)\nusing Latexify\nLatexify.set_default(; starred=true)\nm = [2//3 \"e^(-c*t)\" 1+3im; :(x/(x+k_1)) \"gamma(n)\" :(log10(x))]\nlatexify(m)\n# really cool LaTeX output\nand # last output, repl only\n</code></pre> <p>To help make things generic, then can use:</p> <pre><code>zero(eltype(thing)) # the zero type of thing (if thing is integer, then it'll be 1)\none(4.0) # 1.0\n# could be used as the first part of a function, to make sure that types are correct, say the running total in a sum function.\n</code></pre>"},{"location":"2023-03-21-Julia/#python-within-julia","title":"Python within Julia","text":"<ul> <li>Conda.jl</li> <li>Calling Python functions from the Julia language</li> <li>PyCall does not use virtualenv</li> <li>How can I import a module dynamically given the full path?</li> </ul> <p>For a whole stack of reasons, it's best to use Julia's inbuilt Miniconda environment.The following code will need to be added to the top of any script, otherwise PyCall will use Julia's conda but the rest of the script will be using whatever the system's python is.</p> <p><pre><code>import Pkg\nPkg.add(\"PyCall\")\nimport Conda\nENV[\"PYCALL_JL_RUNTIME_PYTHON\"] = Conda.ROOTENV\nENV[\"PYTHON\"] = Conda.ROOTENV\n</code></pre> add the required packages...</p> <pre><code>Conda.add(\"openpyxl\")\n# etc\n</code></pre> <p>The extra wrinkle is that Julia's Conda doesn't know or understand any of your path so you'll have to explicitly tell it what path is the base one:</p> <pre><code>import sys\n\nsys.path.append(\"/Users/jchidley/git/personal_finance_py_rust/my_project\")\n</code></pre> <p>Then you can call your modules in Julia like so:</p> <pre><code>@pyinclude(\"monte_carlo_finance.py\")\n</code></pre> <p>And Julia's Conda will report back missing imports, etc</p> <p>Running Julia .jl files</p> <p>After you have written a new julia script, it can be run with <code>julia path/to/script-name.jl</code> or </p> <pre><code>include(\"path/to/script-name.jl\")\n</code></pre>"},{"location":"2023-03-21-Julia/#profiling-julia","title":"Profiling Julia","text":"<ul> <li>BenchmarkTools</li> </ul>"},{"location":"2023-03-21-Julia/#profiling-python","title":"Profiling Python","text":"<p>Worth running this before you go too deep rewriting everything.</p> <p>The Python Profilers</p>"},{"location":"2023-03-21-Julia/#testing","title":"Testing","text":"<p>Organizing Tests in Julia Julia Test Running: Best Practices</p> <p>PROPERTY TESTING WITH COMPLEX INPUTS</p> <p>for testing compatible with packages:</p> <p>setup.jl</p> <pre><code>#using Test # normal unit test framework\nusing ReTest\n\n# required setup stuff...\n# loading libraries, initialising variables, etc\n</code></pre> <pre><code>write(\"test/runtests.jl\",\n             \"\"\"\n             include('setup.jl')\n             println(\"Testing...\")\n             \"\"\");\n</code></pre> <p>from the julia command line <pre><code>include(\"test/runtests.jl\")\nretest()\n</code></pre></p> <ul> <li>Unit Testing</li> <li>JuliaTesting \u00b7 GitHub</li> <li>GitHub - JuliaTesting/ReTestItems.jl: Run testitems in parallel.</li> <li>PropCheck.jl a more recent QuickCheck derivative</li> <li>ReTest</li> <li>JCheck is a julia derivative of Quickcheck</li> <li>Quickcheck user documentation</li> <li>FsCheck: Random Testing for .NET</li> <li>Hypothesis is a modern implementation of property based testing in Python</li> <li>Hypothesis on readthedocs</li> <li>Smallcheck documents and talks</li> <li>Smallcheck research paper</li> <li>Smallcheck documentation</li> <li>Smallcheck code</li> <li>Standalone, small, Smallcheck</li> <li>Generic smallcheck - single file \"N.B., you should (almost) always go with lazy smallcheck rather than the original smallcheck. Lazy Smallcheck is far more efficient at exhaustively exploring the value space, so it can test much larger values before the exhaustive search becomes infeasible.                     0 The way it works is that it uses partially defined values; for example, if the property holds for (x:undefined) then we know it must hold for all lists beginning with x, regardless of what the rest of the list looks like. So all those infinitely many inputs can be marked off as having been checked. Thus, the only reason not to use lazy smallcheck is if your properties are totally strict in their inputs, and thus can't benefit from this sort of thing.\"</li> <li>Smallcheck vs Quickcheck</li> <li>How to use smallcheck</li> <li>JET detects potential bugs and type instabilities</li> <li>Distributions provides probabilistic distributions and related functions</li> <li>Random Numbers</li> </ul>"},{"location":"2023-03-21-Julia/#packages","title":"Packages","text":"<pre><code>using Pkg\nPkg.status() # what Pkg environment am I using, what packages have been installed?\nPkg.activate(\".\") # activate environment in current directory, or set it up \nPkg.add(\"PythonCall\")\nPkg.add(\"TerminalPager\")\n</code></pre> <ul> <li>PkgTemplates User Guide</li> <li>Pkg, Julia's package manager</li> </ul> <pre><code>using PkgTemplates\nt = Template(; user=\"&lt;your github username&gt;\")\nt(\"&lt;your package name&gt;\")\n</code></pre>"},{"location":"2023-03-21-Julia/#metaprogramming","title":"Metaprogramming","text":"<ul> <li>Introducing Julia/Metaprogramming - Wikibooks, open books for an open world</li> <li>A practical introduction to metaprogramming in Julia </li> <li>GitHub - dpsanders/Metaprogramming_JuliaCon_2021</li> <li>jkrumbiegel.com - Julia macros for beginners</li> <li>Metaprogramming \u00b7 The Julia Language</li> <li>document REPL <code>ast_transforms</code> \u00b7 Issue #37047 \u00b7 JuliaLang/julia \u00b7 GitHub Language parsing based on GitHub - JeffBezanson/femtolisp: a lightweight, robust, scheme-like lisp implementation. <code>julia --lisp</code></li> </ul>"},{"location":"2023-03-21-Julia/#links","title":"Links","text":"<ul> <li>Official Julia Documentation - this includes a downloadable PDF</li> <li>Julia Packages</li> <li>A Julia Language Blog Aggregator</li> <li>Julia Data Science</li> <li>GitHub - JuliaLang/juliaup: Julia installer and version multiplexer</li> <li>Unitful - A Julia package for physical units.</li> <li>Latexify.jl is a package which supplies functions for producing  formatted strings from Julia objects</li> <li>Tables.jl Documentation</li> <li>DataFrames.jl Cheat Sheet</li> <li>Playing with DataFrames.jl \u2022 Part I</li> <li>ReTest is a testing framework</li> <li>Revise.jl may help you keep your Julia sessions running longer</li> <li>Organizing Tests in Julia</li> <li>Functional One-Liners in Julia</li> <li>Julia Test Running: Best Practices</li> <li>TOML - Tom's Obvious, Minimal Language</li> <li>TOML - ABNF grammar</li> </ul>"},{"location":"2023-04-08-Julia-Drawing/","title":"Julia Drawing","text":""},{"location":"2023-04-08-Julia-Drawing/#drawing-with-julia","title":"Drawing with Julia","text":""},{"location":"2023-04-08-Julia-Drawing/#introduction","title":"Introduction","text":"<p>Smsh based on either its own model or Open CASCADE, does modeling in Julia and mesh building (2D and 3D). Pretty sophisticaed.</p> <p>Other Julia interfaces for building things include OpticSim.jl , ConstructiveGeometry.jl, Descartes.jl</p>"},{"location":"2023-04-08-Julia-Drawing/#gmsh","title":"GMSH","text":"<p>Just output the geo files to the correct format with the right extensino.</p> <ul> <li>gmsh web site</li> <li>GMSH build, install</li> <li>gmesh Julia Tutorials</li> <li>gmsh documentation</li> </ul>"},{"location":"2023-04-08-Julia-Drawing/#fem","title":"FEM","text":"<ul> <li>SymFEL.jl contains several functions useful for the implementation of the finite elements method (FEM), uses SymPy, Gmsh</li> <li>FEM MeshGmshFromShape</li> </ul>"},{"location":"2023-04-08-Julia-Drawing/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Novice Guide</li> <li>GMSH Tutorial/information</li> </ul>"},{"location":"2023-04-14-Neovim-Lua/","title":"Neovim-Lua","text":""},{"location":"2023-04-14-Neovim-Lua/#neovim-lua","title":"Neovim Lua","text":"<p><code>vi</code> isn't easy to learn. It's keyboard driven and there is next to no visual help. Even modern variants, like <code>neovim</code>, don't give you on-screen clues. It is easier to pick up things are are visual - Atom, VS Code, etc, but those tools make the easy things easier and the hard things harder. In the end, if you are serious about editing effectively, you will have to be an expert in the tools for job. There are no substitutes.</p> <p>So, sure, if you are a beginner and want to get started, pick the easiest tool because everything is hard to begin with. But as soon as you are at the intermediate level, it's time to pick up the expert's tools. It's time to put in the hard work. You'll be better for it.</p> <p>Neovim is text editing equivalent of touch typing. It seems impossible at the start. But soon enough, much sooner than you think, you'll be typing at over 60 words-per-minute just looking at the screen, thinking about what you are writing. You will not be looking at the keyboard typing at 30 words-per-minute and making loads of semantic and syntactic mistakes. It's the same for <code>vi</code> (and especially true for <code>neovim</code>) you'll be editing text quickly and effectively from the keyboard. A mouse is a bonus. This is why touch-typing and <code>vi</code> go hand-in-hand.</p> <p>So dive into <code>neovim</code>. Learn the experts tool. It'll help make you an expert. Learning to be an expert requires you to solve loads of problems. Have fun with them.</p>"},{"location":"2023-04-14-Neovim-Lua/#moving-to-a-new-machine","title":"Moving to a new machine","text":"<p>You can definitely copy your configuration to a new machine but you still need to install all the prerequisites for your various plugins.</p>"},{"location":"2023-04-14-Neovim-Lua/#windows","title":"Windows","text":"<pre><code>choco install mingw # or # scoop install gcc # or # scoop install llvm\nscoop bucket add nerd-fonts\nscoop install sourcecodepro-nf\n</code></pre>"},{"location":"2023-04-14-Neovim-Lua/#windows-terminal","title":"Windows terminal","text":"<p>PowerShell 7 Settings \u2192 \u201cStartup\u201d \u2192 \u201cDefault profile\u201d:  select \"PowerShell\"</p> <p>See <code>2024-01-17-Microsoft-Surface-Laptop-4.md</code> for scoop install, including nerd fonts.</p> <pre><code>C:\\Users\\jackc\\git\\mkdocs-material-test\\docs\\2024-01-17-Microsoft-Surface-Laptop-4.md\n</code></pre> <p>Nerd Font Settings \u2192 \u201cPowerShell\u201d profile \u2192 \u201cAppearance\u201d \u2192 \u201cFont face\u201d: select Nerd Font</p>"},{"location":"2023-04-14-Neovim-Lua/#alacritty","title":"Alacritty","text":"<p>Set \"Start In\" to %USERPROFILE% for the Alacritty shortcut on Windows</p> <p>Alacritty - TOML configuration file</p> <pre><code>nvim $env:APPDATA\\alacritty\\alacritty.toml\n[font]\nnormal = { family = \"SauceCodePro Nerd Font\", style = \"Regular\" }\n</code></pre>"},{"location":"2023-04-14-Neovim-Lua/#vim-neovim-and-related","title":"Vim, Neovim and Related","text":"<ul> <li>unicode.vim</li> <li>Your problem with Vim is that you don't grok vi</li> </ul> <p>Probably the most important command</p> <pre><code>:h quickref\n</code></pre> <p>I added these to my <code>options.lua</code> file, see <code>:help option-list</code></p> <pre><code>local opt = vim.opt\nopt.wrap = true\n-- enable soft wrapping at the edge of the screen\nopt.linebreak = true\n-- make it not wrap in the middle of a \"word\"\nopt.colorcolumn = \"80\"\n-- highlight when you go over a desired width\nvim.opt.tabstop = 4\nvim.opt.shiftwidth = 4\n-- set tabs to 4 spaces\n</code></pre>"},{"location":"2023-04-14-Neovim-Lua/#toggleterm","title":"Toggleterm","text":"<p>This is used to set the program for <code>:!</code> commands. It's also used for the terminal.</p> <pre><code>set shell=powershell\nset shellcmdflag=-command\nset shellquote=\\\"\nset shellxquote=\n</code></pre> <p>Change the default shell Some vimrc options, including spell check <code>set spell spelllang=en_gb</code></p> <p>for LazyVim</p> <p>Vim terminal: how powerful is it really? print the full path from the command prompt</p> <pre><code>find \"$(pwd -P)\" -name \"filename\"\n</code></pre> <p>(from within <code>vim</code> its <code>:echo expand('%:p')</code> )</p> <p>then use <code>gf</code> on that line (once you have switched to Normal mode) to open the file.</p> <pre><code>cat &lt;&lt; EOF &gt; ~/.config/LazyVim/lua/plugins/toggleterm.lua\nreturn {\n  {\n    \"akinsho/toggleterm.nvim\",\n    version = \"*\",\n    opts = {--[[ things you want to change go here]]\n      open_mapping = [[&lt;c-\\&gt;&lt;c-\\&gt;]],\n      hide_numbers = false,\n      direction = \"vertical\",\n      size = function(term)\n        if term.direction == \"horizontal\" then\n          return 15\n        elseif term.direction == \"vertical\" then\n          return vim.o.columns * 0.4\n        end\n      end,\n    },\n  },\n}\nEOF\n</code></pre> <p>You can \"send lines\" to the toggled terminals with the following commands:</p> <ul> <li><code>:ToggleTermSendCurrentLine &lt;T_ID&gt;</code>: sends the whole line where you are standing with your cursor</li> <li><code>:ToggleTermSendVisualLines &lt;T_ID&gt;</code>: sends all the (whole) lines in your visual selection</li> <li><code>:ToggleTermSendVisualSelection &lt;T_ID&gt;</code>: sends only the visually selected text (this can be a block of text or a selection in a single line)</li> </ul> <p>(&lt;T_ID is an optional terminal ID parameter, which defines where should we send the lines. If the parameter is not provided, then the default is the first terminal)</p> <p>Also, ^z (c-z), to exit vim temporarily and <code>fg</code> to go back</p> <p>From Vim and Tmux to Neovim</p>"},{"location":"2023-04-14-Neovim-Lua/#saving-session-state","title":"Saving session state","text":"<p>LazyVim uses persistence.nvim so obsession.vim may not be needed but persistence.vim does not, by default, automatically open the last session.</p> <p>Use obsession.vim (<code>:Obsess</code> to start/stop recording) and then the state is retained, provided you use <code>-S</code> option on startup (otherwise use <code>:source</code>) <code>:wa</code> to write all of your files and <code>ZZ</code> to quit. By default, this will be saved in the directory where you started it.</p> <p><code>1&lt;C-g&gt;</code> for full path or <code>:echo expand('%:p')</code>. <code>&lt;C-r&gt;</code> in insert mode to add things (including filnames, <code>%</code>) at the current cursor position or <code>\"%p</code> in normal mode.</p> <p>using <code>:Mason</code> to add <code>codespell</code> as a LSP and then <code>]s</code> to move between misspelled words and <code>&lt;leader&gt;z=</code> to correct mistakes. Or install codespell (via pip) from the command line and do it that way.</p> <pre><code>cat &lt;&lt; EOF &gt; ~/.config/LazyVim/lua/plugins/obsession.lua\nreturn {\n    -- vim session management with obsession.vim\n    { \"tpope/vim-obsession\" },\n}\nEOF\n</code></pre> <ul> <li>Building Neovim</li> <li>Neovim from Scratch playlist - YouTube</li> <li>Awesome Neovim</li> <li>julia-vim</li> <li>LunarVimConfig for Julia</li> </ul> <pre><code>:lua print(vim.api.nvim_eval(\"tabpagewinnr(tabpagenr())\"))\n-- or\n:lua print(vim.api.nvim_eval(\"winnr()\"))\n-- or\n:lua print(vim.fn.winnr())\n</code></pre> <p>run</p> <p>git clone the target nvim into a subdirectory of .config need the latest (9+) version of nvim</p> <ul> <li>A Basic Stable IDE config for Neovim</li> <li>Neovim Config Switcher - Gist and Neovim Config Switcher - YouTube</li> </ul> <pre><code>alias nvim-lazy=\"NVIM_APPNAME=Lazy nvim -S\"\nalias nvim-kick=\"NVIM_APPNAME=kickstart nvim -S\"\nalias nvim-chad=\"NVIM_APPNAME=LunarVim nvim -S\"\nalias nvim-astro=\"NVIM_APPNAME=AstroNvim nvim -S\"\n\nfuntcion nvims() {\n  items=(\"default\" \"kickstart\" \"Lazy\" \"LunarVim\" \"AstroNvim\")\n  config=$(printf \"%s\\n\" \"${items[@]}\" | fzf --prompt=\"\ue62b Neovim Config \uf63d \" --height=~50% --layout=reverse --border --exit-0)\n  if [[ -z $config ]]; then\n    echo \"Nothing selected\"\n    return 0\n  elif [[ $config == \"default\" ]]; then\n    config=\"\"\n  fi\n  NVIM_APPNAME=$config nvim -S $@\n}\n\nbindkey -s ^a \"nvims\\n\"\n</code></pre> <pre><code>nvim --listen ~/.cache/nvim/server.pipe\n</code></pre> <p>(the pipe name is arbitrary) in one instance, can be used interactively. Then</p> <pre><code>nvim --server ~/.cache/nvim/server.pipe --remote-expr \"winnr()\"\n</code></pre> <ul> <li>Example init.lua etc</li> <li>Build your first Neovim configuration in lua</li> <li> <p>Running command line tasks in Neovim</p> </li> <li> <p>Tmux Cheat Sheet &amp; Quick Reference</p> </li> <li> <p>Vim Cheat Sheet</p> </li> <li>Home - Neovim</li> <li>AstroNvim is an aesthetic and feature-rich neovim</li> <li>GitHub - neoclide/coc.nvim: Nodejs extension host for vim &amp; neovim, load extensions like VSCode and host language servers.</li> <li>GitHub - dense-analysis/ale: Check syntax in Vim asynchronously and fix files, with Language Server Protocol (LSP) support</li> <li>Vim As an IDE for Python 2021</li> <li>Vim for Python in 2020 | Vim From Scratch</li> <li>Vim - Full Stack Python</li> <li>VIM and Python \u2013 A Match Made in Heaven \u2013 Real Python</li> <li>learnbyexample - vim</li> <li>Home - code-server Docs</li> </ul>"},{"location":"2023-04-14-Neovim-Lua/#vim-neovim-nvim","title":"Vim, Neovim, nvim","text":"<p>Reset nvim</p> <pre><code>rm -rf ~/.cache/nvim\nrm -rf ~/.local/share/nvim\nrm -rf ./.config/nvim\n</code></pre> <ul> <li>Build your first Neovim configuration in lua</li> <li>Why Neovim is the best code editor / IDE for developers</li> <li>GitHub - junegunn/vim-plug: Minimalist Vim Plugin Manager</li> <li>GitHub - hrsh7th/nvim-cmp: A completion plugin for neovim coded in Lua.</li> <li>How to Configure Neovim to make it Amazing -- complete tutorial with the Github files here</li> <li>neovim configuration</li> <li>nvim-cmp</li> <li>Intro to LuaSnips</li> <li>LuaSnips</li> <li>Automate with Lua in Neovim</li> </ul>"},{"location":"2023-04-14-Neovim-Lua/#julia","title":"Julia","text":"<p>It's worth metioning that Juila is buit around pacakges as the coding/development unit. Best to start with a minimal Pkg (<code>generate</code>) and work from that. Testing will be easier too.</p> <p>From this Neovim + LanguageServer.jl discourse and Language server - missing references</p> <p>\" neovim/nvim-lspconfig#1153 is merged now so things should work out of the box if you:</p> <p>Install LanguageServer in the shared environment ~/.julia/environments/nvim-lspconfig:</p> <pre><code>julia --project=~/.julia/environments/nvim-lspconfig -e 'using Pkg; Pkg.add(\"LanguageServer\")'\n</code></pre> <p>I put this at the bottom of <code>init.lua</code> but it might belong somewhere else:</p> <pre><code>-- Julia LSP (LanguageServer.jl)\nrequire'lspconfig'.julials.setup({\n    on_new_config = function(new_config, _)\n        local julia = vim.fn.expand(\"~/.julia/environments/nvim-lspconfig/bin/julia\")\n        new_config.cmd[1] = julia\n    end,\n    -- This just adds dirname(fname) as a fallback (see nvim-lspconfig#1768).\n    root_dir = function(fname)\n        local util = require'lspconfig.util'\n        return util.root_pattern 'Project.toml'(fname) or util.find_git_ancestor(fname) or\n               util.path.dirname(fname)\n    end,\n    on_attach = function(client, bufnr)\n        on_attach(client, bufnr)\n        -- Disable automatic formatexpr since the LS.jl formatter isn't so nice.\n        vim.bo[bufnr].formatexpr = ''\n    end,\n    capabilities = capabilities,\n})\n</code></pre> <pre><code>curl https://raw.githubusercontent.com/fredrikekre/.dotfiles/master/.julia/environments/nvim-lspconfig/Makefile -o ~/.julia/environments/nvim-lspconfig/Makefile\ncd ~/.julia/environments/nvim-lspconfig\nmake\n</code></pre> <p>Go into nvim, open a julia file, wait until the <code>julials</code> has loaded.</p> <p>if the above doesn't work, then ...</p> <p>I used .julia/environments/nvim-lspconfig/Makefile file which I imported into this document using <code>:read</code></p> <pre><code>cat &lt;&lt; EOF &gt; ~/.julia/environments/nvim-lspconfig/Makefile\n# MIT License. Copyright (c) 2021 Fredrik Ekre\n#\n# This Makefile can be used to build a custom Julia system image for LanguageServer.jl to\n# use with neovims built in LSP support. An up-to date version of this Makefile can be found\n# at https://github.com/fredrikekre/.dotfiles/blob/master/.julia/environments/nvim-lspconfig/Makefile\n#\n# Usage instructions:\n#\n#   1. Update the neovim configuration to use a custom julia executable. If you use\n#      nvim-lspconfig (recommended) you can modify the setup call to the following:\n#\n#          require(\"lspconfig\").julials.setup({\n#              on_new_config = function(new_config, _)\n#                  local julia = vim.fn.expand(\"~/.julia/environments/nvim-lspconfig/bin/julia\")\n#                  if require(\"lspconfig\").util.path.is_file(julia) then\n#                      new_config.cmd[1] = julia\n#                  end\n#              end,\n#              -- ...\n#          })\n#\n#   2. Place this Makefile in ~/.julia/environments/nvim-lspconfig (create the directory if\n#   4. Upon exiting neovim PackageCompiler.jl will compile a custom system image which will\n#      it doesn't already exist).\n#\n#      start up neovim in a custom project with a julia process that recods compiler\n#      statements. Follow the instructions in the opened source file, and then exit neovim.\n#\n#      automatically be used whenever you work on Julia projects in neovim.\n#\n# Update instructions:\n#\n#  To update the system image (e.g. when upgrading Julia or upgrading LanguageServer.jl or\n#   3. Change directory to ~/.julia/environments/nvim-lspconfig and run `make`. This will\n#  it's dependencies) run the following commands from the\n#  ~/.julia/environments/nvim-lspconfig directory:\n#\n#      julia --project=. -e 'using Pkg; Pkg.update()'\n#      make\n\nJULIA ?= $(shell which julia)\nJULIA_PROJECT=\nSRCDIR:=$(shell dirname $(abspath $(firstword $(MAKEFILE_LIST))))\nifeq ($(shell uname -s),Linux)\n    SYSIMAGE=languageserver.so\nelse\n    SYSIMAGE=languageserver.dylib\nendif\n\ndefault: $(SYSIMAGE)\n\n$(SYSIMAGE): Manifest.toml packagecompiler/Manifest.toml packagecompiler/precompile_statements.jl\n    JULIA_LOAD_PATH=${PWD}:${PWD}/packagecompiler:@stdlib ${JULIA} -e 'using PackageCompiler; PackageCompiler.create_sysimage(:LanguageServer, sysimage_path=\"$(SYSIMAGE)\", precompile_statements_file=\"packagecompiler/precompile_statements.jl\")'\n\nManifest.toml: Project.toml\n    JULIA_LOAD_PATH=${PWD}/Project.toml:@stdlib ${JULIA} -e 'using Pkg; Pkg.instantiate()'\n\nProject.toml:\n    JULIA_LOAD_PATH=${PWD}/Project.toml:@stdlib ${JULIA} -e 'using Pkg; Pkg.add(\"LanguageServer\")'\n\npackagecompiler/Manifest.toml: packagecompiler/Project.toml\n    JULIA_LOAD_PATH=${PWD}/packagecompiler/Project.toml:@stdlib ${JULIA} -e 'using Pkg; Pkg.instantiate()'\n\npackagecompiler/Project.toml:\n    mkdir -p packagecompiler\n    JULIA_LOAD_PATH=${PWD}/packagecompiler/Project.toml:@stdlib ${JULIA} -e 'using Pkg; Pkg.add(\"PackageCompiler\")'\n\npackagecompiler/precompile_statements.jl: Manifest.toml bin/julia\n    TMPDIR=$(shell mktemp -d) &amp;&amp; \\\n    cd $${TMPDIR} &amp;&amp; \\\n    JULIA_LOAD_PATH=: ${JULIA} -e 'using Pkg; Pkg.generate(\"Example\")' 2&gt; /dev/null &amp;&amp; \\\n    cd Example &amp;&amp; \\\n    JULIA_LOAD_PATH=$${PWD}:@stdlib ${JULIA} -e 'using Pkg; Pkg.add([\"JSON\", \"fzf_jll\", \"Random\", \"Zlib_jll\"])' 2&gt; /dev/null &amp;&amp; \\\n    JULIA_LOAD_PATH=$${PWD}:@stdlib ${JULIA} -e 'using Pkg; Pkg.precompile()' 2&gt; /dev/null &amp;&amp; \\\n    echo \"$$PACKAGE_CONTENT\" &gt; src/Example.jl &amp;&amp; \\\n    JULIA_TRACE_COMPILE=1 nvim src/Example.jl &amp;&amp; \\\n    rm -rf $${TMPDIR}\n\nbin/julia:\n    mkdir -p bin\n    echo \"$$JULIA_SHIM\" &gt; $@\n    chmod +x $@\n\nclean:\n    rm -rf $(SYSIMAGE) packagecompiler bin\n\n.PHONY: clean default\n\nexport JULIA_SHIM\ndefine JULIA_SHIM\n#!/bin/bash\nJULIA=${JULIA}\nif [[ $${JULIA_TRACE_COMPILE} = \"1\" ]]; then\n    exec $${JULIA} --trace-compile=${PWD}/packagecompiler/precompile_statements.jl \"$$@\"\nelif [[ -f ${PWD}/$(SYSIMAGE) ]]; then\n    exec $${JULIA} --sysimage=${PWD}/$(SYSIMAGE) \"$$@\"\nelse\n    exec $${JULIA} \"$$@\"\nfi\nendef\n\nexport PACKAGE_CONTENT\ndefine PACKAGE_CONTENT\n# This file is opened in neovim with a LanguageServer.jl process that records Julia\n# compilation statements for creating a custom sysimage.\n#\n# This file has a bunch of linter errors which will exercise the linter and record\n# statements for that. When the diagnostic messages corresponding to those errors show up in\n# the buffer the language server should be ready to accept other commands (note: this may\n# take a while -- be patient). Here are some suggestions for various LSP functionality that\n# can be exercised (your regular keybindings should work):\n#\n#  - :lua vim.lsp.buf.hover()\n#  - :lua vim.lsp.buf.definition()\n#  - :lua vim.lsp.buf.references()\n#  - :lua vim.lsp.buf.rename()\n#  - :lua vim.lsp.buf.formatting()\n#  - :lua vim.lsp.buf.formatting_sync()\n#  - :lua vim.lsp.buf.code_action()\n#  - Tab completion (if you have set this up using LSP)\n#  - ...\n#\n# When you are finished, simply exit neovim and PackageCompiler.jl will use all the recorded\n# statements to create a custom sysimage. This sysimage will be used for the language server\n# process in the future, and should result in almost instant response.\n\nmodule Example\n\nimport JSON\nimport fzf_jll\nusing Random\nusing Zlib_jll\n\nfunction hello(who, notused)\n    println(\"hello\", who)\n    shuffle([1, 2, 3])\n   shoffle([1, 2, 3])\n    fzzf = fzf_jll.fzzf()\n    fzf = fzf_jll.fzf(1)\n    JSON.print(stdout, Dict(\"hello\" =&gt; [1, 2, 3]), 2, 123)\n    JSON.print(stdout, Dict(\"hello\" =&gt; [1, 2, 3]))\n    hi(who)\n    return Zlib_jll.libz\nend\n\nfunction world(s)\n    if s == nothing\n      hello(s)\n  else\n      hello(s)\n  end\n    x = [1, 2, 3]\n    for i in 1:length(x)\n        println(x[i])\n    end\nend\n\nend # module\nendef\n</code></pre> <pre><code>cd ~/.julia/environments/nvim-lspconfig\nmake\n</code></pre> <p>Wait until after <code>julials</code> has finished before exiting neovim.</p> <p>Julia Language Server Configuration - may, or may not, be necessary.</p> <p>Julia VS Code Extension</p> <p>May also want julia-vim</p> <p>Might need to do this <code>julia -e 'using Pkg; Pkg.add(\"LanguageServer\"); Pkg.add(\"SymbolServer\")')</code> if this hasn't been added to <code>nvim-lspconfig</code> already.</p> <p>Need to add julia to treesitter too.</p>"},{"location":"2023-04-14-Neovim-Lua/#fugative-vim","title":"Fugative Vim","text":"<p><code>~/.config/nvim/lua/plugins/fugitive.lua</code></p> <pre><code>return {\n  { \"tpope/vim-fugitive\" },\n}\n</code></pre> <p>\"You may execute :Gw! command in any of the opened windows. The window where you execute that command will be committed and marked as a merge resolution. It is very useful if you want to use just REMOTE or just LOCAL version without any further merge resolution steps.</p> <p>Want more? When in the central window use d2o or d3o to pull changes from LOCAL or REMOTE file.\"</p> <p>See also Neovim As Git Mergetool for another version (although this doesn't seem to work for me)</p> <p>details about vimdiff &amp; nvim</p> <p>Github integration for fugative.vim</p> <p>vim-gitgutter for see changes.</p> <p>As recommended on the Fugative Github.</p> <ul> <li>A complement to command line git</li> <li>Working with the git index</li> <li>Resolving merge conflicts with vimdiff</li> <li>Browsing the git object database</li> <li>Exploring the history of a git repository</li> </ul> <p>Other useful links</p> <ul> <li>Git workflow using Neovim's Fugitive, Telescope &amp; Git-Signs</li> <li>Resolve Git Merge Conflicts with Neovim and Fugitive!</li> <li>Vim Plugin: Fugitive</li> <li>Two keys -= to transform your Git workflow #vim-fugitive</li> <li>Git rebase --interactive | Vim Fugitive</li> </ul>"},{"location":"2023-04-14-Neovim-Lua/#latex","title":"LaTeX","text":"<ul> <li>Compiling LaTeX Documents in a Vim-Based Workflow</li> <li>VimTeX</li> </ul>"},{"location":"2023-04-14-Neovim-Lua/#lua-plugin","title":"Lua Plugin","text":"<p>nvim-lua-plugin-template How to write a neovim plugin in lua Getting started using Lua in Neovim</p>"},{"location":"2023-04-14-Neovim-Lua/#lua","title":"Lua","text":"<ul> <li>Learning Lua - resources</li> <li>Programming in Lua : 1</li> <li>Lua for Programmers Part 1: Language Essentials</li> <li>Learn Lua in Y Minutes</li> <li>Lua Unofficial FAQ (uFAQ)</li> <li>Learn To Code Space Invaders \u2013 learn lua by programming</li> <li>External Editor for TIC-80</li> </ul>"},{"location":"2023-05-01-VFD-3-Phase-Converter/","title":"VFD-3-Phase-Converter","text":""},{"location":"2023-05-01-VFD-3-Phase-Converter/#vfd-3-phase-converter","title":"VFD 3 Phase Converter","text":""},{"location":"2023-05-01-VFD-3-Phase-Converter/#introduction","title":"Introduction","text":"<p>Modbus RTU using RS485 using commix 1.4 software from the PC. https://geekmonkey.org/lwm-julia-bitwise-operators/ includes CRC and a reference to Hacker's delight also  pkg add CRC using CRC crc32 = crc(CRC_32) <pre><code>crcmodbus = CRC.crc(CRC.CRC_16_MODBUS)\n\n#11 03 006B 0003 7687\nmsg = [0x11,0x03,0x00,0x6B,0x00,0x03]\ncrcmodbus(msg) # 0x8776 \n# idential to https://www.lammertbies.nl/comm/info/crc-calculation\n# reported 76 87 https://ipc2u.com/articles/knowledge-base/modbus-rtu-made-simple-with-detailed-descriptions-and-examples/\n# little vs big endian\n# https://stackoverflow.com/questions/65734589/understand-modbus-rtu-crc#:~:text=In%20document%20of%20Modbus%20protocol,values%20for%20the%20low%20byte.%22\n\nmsg = [0x11,0x02,0x03,0xac,0xdb,0x35] \ncrcmodbus(msg) # 0x1820 vs 2018 from https://ipc2u.com/articles/knowledge-base/modbus-rtu-made-simple-with-detailed-descriptions-and-examples/\n</code></pre></p> <p>Julia <code>using CRC32c; crc32c(\"one\")</code></p>"},{"location":"2023-05-01-VFD-3-Phase-Converter/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>See appendices for 485 CAN bus etc</li> <li>Online CRC Calculator</li> <li>VFD</li> <li>VFD Configuration</li> <li>VFD info</li> <li>Modbus</li> <li>Details on codes to send to VFD  </li> <li>VFD Control Methods</li> <li>RS485 vs Modbus Protocol. RS485 communication tutorial</li> <li>Modbus vs RS485 | A quick tutorial on RS485 and MODBUS</li> <li>Modbus RTU Protocol Overview - Real Time Automation, Inc.</li> <li>Modbus RTU made simple with detailed descriptions and examples</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/","title":"Writing-A-Programming-Language","text":""},{"location":"2023-09-04-Writing-A-Programming-Language/#writing-a-programming-language","title":"Writing A Programming Language","text":"<p>The idea behind single-header file libraries</p>"},{"location":"2023-09-04-Writing-A-Programming-Language/#introduction","title":"Introduction","text":"<p>What language to learn?</p> <ul> <li>Leading indicator PYPL PopularitY of Programming Language</li> <li>Lagging indicator The RedMonk Programming Language Rankings: June 2024</li> <li> <p>One person's perspective 26 programming languages in 25 days, Part 2: Reflections on language design</p> </li> <li> <p>How to Design Programs, Second Edition</p> </li> <li>LET'S BUILD A COMPILER! By Jack W. Crenshaw, Ph.D.</li> <li>The ppci (pure python compiler infrastructure) project is a compiler written entirely in python</li> <li>an incremental approach to compiler construction</li> <li>Additional Reading</li> <li>Lots or articles including parsing, compiling Matt Might's blog</li> <li>Compiler Explorer and Matt Godbolt\u2019s blog</li> <li>8bitworkshop</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#front-ends","title":"Front Ends","text":"<ul> <li>What LISP compilers and interpreters were available for 8-bit machines?</li> <li>Modular Docs - Mojo\ud83d\udd25</li> <li>Getting Started - MLIR</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#parsing","title":"Parsing","text":"<p>Here's a few introductory texts: </p> <ul> <li>When to use a Parser Combinator? When to use a Parser Generator?</li> <li>LL and LR in Context: Why Parsing Tools Are Hard</li> <li> <p>LL and LR Parsing Demystified</p> </li> <li> <p>fparsec Tutorial</p> </li> <li>Lerche (German for Lark) is a partial port of the Lark grammar processor from Python to Julia</li> <li>Lark - a parsing toolkit for Python</li> <li>Automa is a regex-to-Julia compiler.</li> <li>CombinedParsers in pure Julia</li> <li> <p>Rex Eats Regular Expressions for Breakfast</p> </li> <li> <p>AbstractTrees.jl</p> </li> <li>Trees in Julia</li> <li>GraphMakie.jl In this example we are going to plot an abstract syntax tree of a Julia function using the Bucheim Layout from NetworkLayout.jl.</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#rust","title":"Rust","text":"<ul> <li>winnow aims to be your \u201cdo everything\u201d parser, much like people treat regular expressions.</li> <li>nom - A byte-oriented, zero-copy, parser combinators library, The Nom Guide (Nominomicon)</li> <li>lalrpop - convenient LR(1) parser generator, LALRPOP Book</li> <li>logos - Create ridiculously fast Lexers, Logos Handbook</li> <li>combine - Fast parser combinators on arbitrary streams with zero-copy support, combine wiki</li> <li>pest - The Elegant Parser, pest book</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#llvm","title":"LLVM","text":"<ul> <li>llvm-mos</li> <li>Kaleidoscope: Kaleidoscope Introduction and the Lexer</li> <li>A Julia wrapper for the LLVM C API.</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#c","title":"C","text":"<ul> <li>Practical, step-by-step, compiler chibicc: A small C compiler and chibicc documentation, in Japanese</li> <li>cproc: Small C11 compiler based on QBE</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#lisp-and-scheme","title":"Lisp and Scheme","text":"<ul> <li>On Lisp is a comprehensive study of advanced Lisp techniques</li> <li>(How to Write a (Lisp) Interpreter (in Python))</li> <li>(An ((Even Better) Lisp) Interpreter (in Python))</li> <li>Learning with Peter Norvig's lis.py interpreter</li> <li>Lots more information and links Scheme (programming language) - Wikipedia</li> <li>beau\u00adtiful racket - an intro\u00adduc\u00adtion to language-oriented programming</li> <li>Racket Documentation</li> <li>Bits of information about Lisp, Scheme, 8 bit LISP</li> <li>The Make-A-Lisp Process</li> <li>uLisp</li> <li>micro-lisp</li> <li>femtolisp - a lightweight, robust, scheme-like lisp implementation used in julia</li> <li>LISP on the BBC Microcomputer Remastered PDF</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#middle","title":"Middle","text":"<ul> <li>Mapping Python to LLVM | Exaloop blog</li> <li>A guide that explains how high level programming language constructs are mapped to the LLVM intermediate language.</li> <li>Netwide Assembler (NASM), an asssembler for the x86 CPU architecture portable to nearly every modern platform, and with code generation for many platforms old and new.</li> <li>vbcc Compiler System</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#back-ends","title":"Back Ends","text":"<ul> <li>Code Generation</li> <li>Someone wrote a Lisp assembler for the 6502 and wrote a blog about it. Fun with Lisp: Programming the NES with code on github</li> <li>QBE - Compiler Backend</li> <li>Let's get hands-on with QBE</li> <li>LISP/8-6502 interpreter</li> <li>6502 \u201cIllegal\u201d Opcodes Demystified</li> <li>Henry Baker's COMFY compiler for the 6502 processor ported to Common Lisp</li> <li>Lisp interpreter written for the Apple //e.</li> <li>Implementing Lisp for 6502/65C816</li> <li>David A. Wheeler's 6502 Language Implementation Approaches</li> <li>Readable MAE Manual</li> <li>EHS Disk Macro Assembler/Text Editor (MAE) - Manual</li> <li>PDP-11 Lisp implementation</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#linker","title":"Linker","text":"<ul> <li>Beginner's Guide to Linkers</li> <li>mold: A Modern Linker</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#c64-specific","title":"C64 Specific","text":"<ul> <li>The Transactor Online Archive and Disks</li> <li>Craig's 8-bit Commodore Page</li> <li>Transactor article that discusses Lisp on C64 - suggests and additiona disk on Page 41 with a special MAE Assembler source to Micro-Lisp</li> <li>Just the Micro-Lisp article</li> <li>\"Micro-Lisp\" a lisp for the C64 attach the image, <code>LOAD\"MICRO-LISP\",8,1</code> then <code>RUN</code></li> <li>Versatile Commodore Emulator Keyboard is a bit weird: Tab key acts as the CTRL key on the C64, and the left CTRL key acts as the C= key. Replacing <code>win_pos.vkm</code> file in the WinVICE/C64 directory with a new keymap. forum link</li> <li>How do I run .T64 and .D64 files in an emulator For D64, you you need File -&gt; Attach disk image -&gt; Drive 8, and then most likely type LOAD\"*\",8,1 to load the first program on the disk.</li> <li>How do I get a list of files on a floppy disk in C64 BASIC? - attach the disk on the emulator (say 8) <code>LOAD\"$\",8</code> and then <code>LIST</code> to see the files.</li> <li>The Codebase: Sourcecode, Articles &amp; Tutorials</li> <li>Code for the C64 - reading the directory</li> <li>Assembly</li> </ul>"},{"location":"2023-09-04-Writing-A-Programming-Language/#6502-emulation-builds","title":"6502 Emulation / Builds","text":"<ul> <li>A 6502 emulator in Lisp</li> <li>Obelisk Home Pages</li> <li>Reverse Engineering the MOS 6502 CPU</li> <li>Bario.2001.emubook Study of the techniques for emulation programming</li> <li>Emulate 6502-based microcomputer systems in Python</li> <li>lib6502 6502 in C</li> <li>an Apple // emulator in Python and YouTube</li> <li>Emulating a BBC Micro in Javascript \u2014 Matt Godbolt\u2019s blog</li> <li>virtual 6502 Emulator</li> <li>YouTube Emulating a CPU in C++ (6502) and GitHub Learning how a CPU works by emulating one</li> <li>8bitworkshop IDE</li> <li></li> <li>dasm</li> <li>Writing a 6502 emulator in Python and 6502 emulator in Python</li> <li>A fast &amp; simple MOS 6502 CPU emulator written in C++</li> <li>Easy 6502 by skilldrick</li> <li>Code for the 6502 microprocessor, mostly for the Replica 1 computer.</li> <li>RetroVGA - Raspbery Pico multi retro computer from Bobricius on Tindie</li> <li>This is a collection of emulators M.CU.M.E = Multi CompUter Machine Emulator</li> <li>Lots of references and hardware ZX Spectrum for Raspberry Pico Pi RP2040</li> </ul> <p>http://telarity.com/~dan/cbm/languages.html</p> <p>Weird archive formats: possibly 16 bit operating systems.</p> <p>Nicholas Vrtis, Transactor Publishing Inc., Vol.8,Iss.6) LISP interpreter. All numbers are stored as 24 bit integers. http://www.csbruce.com/cbm/ftp/c64/programming/mlisp1p2.arc https://www.funet.fi/pub/cbm/c64/programming/mlisp.sfx</p>"},{"location":"2023-09-04-Writing-A-Programming-Language/#links","title":"Links","text":"<ul> <li>Example</li> </ul>"},{"location":"2023-09-09-Picocomputer/","title":"Picocomputer","text":""},{"location":"2023-09-09-Picocomputer/#picocomputer","title":"Picocomputer","text":""},{"location":"2023-09-09-Picocomputer/#install-raspberry-pi-pico","title":"Install Raspberry Pi Pico","text":"<p>https://learn.pimoroni.com/article/pico-development-using-wsl</p> <p>after you've made the various standard Raspberry Pi examples, I suggest that you copy over the hello_world/usb example.</p> <p>Now it's time to install the necessary software for the usb exmple to test out serial communication. I suggest that you PuTTY to test out the connection on the Windows side.</p> <p>On Windows run the \"Device Manager\" and expand the Ports (COM &amp; LPT) section. Note the COM port number for the Pico; on my system it's labelled \"USB Serial Device (COM7)\".</p> <p>Open PuTTY, select the Serial connection type and enter the COM7 (see above) in the Serial line box. Set the Speed to 115200 and click on the Open button. A window should open that repetively prints \"Hello, World!\".</p> <p>Now it's time to deal with the WSL side of things.</p> <p>see 2023-09-24-Systems-on-Systems.md for <code>usbipd</code></p>"},{"location":"2023-09-09-Picocomputer/#openocd","title":"openocd","text":"<pre><code>$ sudo apt install automake autoconf build-essential texinfo libtool libftdi-dev libusb-1.0-0-dev\nsudo apt install pkg-config # missing on my WSL ubuntu\n$ git clone https://github.com/raspberrypi/openocd.git --branch rp2040-v0.12.0 --depth=1 --no-single-branch\ncd openocd\n./bootstrap\n./configure\nmake -j8\nsudo make install\n</code></pre>"},{"location":"2023-09-09-Picocomputer/#software-installation","title":"Software Installation","text":"<p>I recommend using Scoop <pre><code>iwr -useb get.scoop.sh | iex\nscoop install cmake make msys2 \nmsys2\npacman -Syyu\n</code></pre></p> <p>goto https://cc65.github.io/ </p> <p>click on Windows Snapshot link at the bottom of the page, this will take you to Sourceforge and start the download after a short delay.</p> <p>Extract the downloaded file into a suitalble directory (I chose \"C:\\cc65\")</p> <p>The add \"C:\\cc65\\bin\" to the user's path environmental variable. Add other directories as needed.</p> <p>Install Visual Studio Code from its usual page. Open up the project folder that you previously cloned from github.</p>"},{"location":"2023-09-09-Picocomputer/#links","title":"Links","text":""},{"location":"2023-11-05-Pi-Pico/","title":"Pi Pico","text":""},{"location":"2023-11-05-Pi-Pico/#pi-pico","title":"Pi Pico","text":"<p>see also Pi Pico</p>"},{"location":"2023-11-05-Pi-Pico/#pio","title":"pio","text":"<p>Raspberry Pico: Programming with PIO State Machines Raspberry Pi Pico - PIO Stepper Motor Control Rotary encoder for Raspberry Pi Pico using PIO code rpi-pico-nec-ir-transmit-pio LogicAnalyzer Pico-PIO-USB</p>"},{"location":"2023-11-05-Pi-Pico/#networking","title":"Networking","text":"<p>Resilient MicroPython WiFi code</p> <p>Microdot \u201cThe impossibly small web framework for Python and MicroPython\u201d</p>"},{"location":"2023-11-05-Pi-Pico/#teaching","title":"Teaching","text":"<p>Comprehensive learning PIO youtube series from Life with David</p> <p>V. Hunter Adams' series of excellent lecutures (Cornell University) Raspberry Pi Pico Lectures</p> <p>Raspberry Pi Pico Lecture 25: PIO Stepper Motor Driver - uses a bunch of state machines that talk to each other.</p> <p>JMP and X,Y scratch registers for the win!</p> <p>In-depth: Raspberry Pi Pico's PIO - programmable I/O!</p> <p>Raspberry Pico: Programming with PIO State Machines</p> <p>Playing with the Pico Part 4 - Getting Acquainted with PIO and Playing with the Pico Part 5 - Producing VGA Video</p> <p>A Practical Look at PIO on the Raspberry Pi Pico</p> <p>Raspberry Pi Pico PIO - Gary Explains</p>"},{"location":"2023-11-05-Pi-Pico/#simulators-emulators","title":"Simulators, Emulators","text":"<p>Online pioasm for Raspberry Pi Pico and pioasm-wasm</p> <p>byteit101 version of below works great on Windows.</p> <p>RP2040 PIO Emulator scaprile's fork of RP2040 PIO Emulator which is from RP2040 PIO Emulator and Read the Docs Raspberry Pi Pico Emulator</p>"},{"location":"2023-11-05-Pi-Pico/#examples","title":"Examples","text":"<ul> <li>PicoDIV - Raspberry Pi Pico frequency divider</li> <li>PicoPET - A simple time stamper, frequency counter also see Pico PIO using an external clock</li> <li>Raspberry Pi Organisation's Pico pio Examples</li> <li>Raspberry Pi Pico Stepper Motors via PIO and pico-pi-playing - pio-steppers</li> <li>Digital Systems Design Using Microcontrollers - V. Hunter Adams</li> <li> <p>Raspberry Pi Pico PIO Quadrature Encoder</p> </li> <li> <p>Raspberry Pi Pico forum thread on Pico Counter Module</p> </li> <li>Long discussion here about frequency counters, irq, etc plus a fair bit of * ode Reciprocal frequency counter</li> <li>\"I'm trying to make a tachometer\" Measuring frequency using the Pico </li> <li> <p>Can also use PWM for fequency measurement </p> </li> <li> <p>pico micropython examples - pio</p> </li> <li>Implementing composite video output using the Pi Pico's PIO</li> </ul>"},{"location":"2023-11-05-Pi-Pico/#install-raspberry-pi-pico","title":"Install Raspberry Pi Pico","text":"<p>https://learn.pimoroni.com/article/pico-development-using-wsl</p> <p>after you've made the various standard Raspberry Pi examples, I suggest that you copy over the hello_world/usb example.</p> <p>Now it's time to install the necessary software for the usb exmple to test out serial communication. I suggest that you PuTTY to test out the connection on the Windows side.</p> <p>On Windows run the \"Device Manager\" and expand the Ports (COM &amp; LPT) section. Note the COM port number for the Pico; on my system it's labelled \"USB Serial Device (COM7)\".</p> <p>Open PuTTY, select the Serial connection type and enter the COM7 (see above) in the Serial line box. Set the Speed to 115200 and click on the Open button. A window should open that repetively prints \"Hello, World!\".</p> <p>see 2023-09-24-Systems-on-Systems.md for <code>usbipd</code>.</p>"},{"location":"2023-11-05-Pi-Pico/#openocd","title":"openocd","text":"<pre><code>$ sudo apt install automake autoconf build-essential texinfo libtool libftdi-dev libusb-1.0-0-dev\nsudo apt install pkg-config # missing on my WSL ubuntu\n$ git clone https://github.com/raspberrypi/openocd.git --branch rp2040-v0.12.0 --depth=1 --no-single-branch\ncd openocd\n./bootstrap\n./configure\nmake -j8\nsudo make install\n</code></pre>"},{"location":"2023-11-05-Pi-Pico/#picotool","title":"picotool","text":"<p>picotool</p> <p>For Windows without MinGW:  * Download libUSB from here https://libusb.info/ install <code>c:\\tools\\libusb</code> <code>setx LIBUSB_ROOT c:\\tools\\libusb</code> * Install pico-sdk install it somewhere and follow the instructions on Github</p> <pre><code>mkdir build\ncd build\ncmake ..\nmake\ncp picotool.exe c:\\tools\n# add c:\\tools to user PATH, \"\" for spaces etc\n# ad /M for system path, from admin prompt\nsetx PATH \"%PATH%;c:\\tools\"\n</code></pre>"},{"location":"2023-11-05-Pi-Pico/#build","title":"Build","text":"<p><code>cmake -DPICO_BOARD=pico_w ..</code> for Pico W</p>"},{"location":"2023-11-05-Pi-Pico/#additional-packages","title":"Additional Packages","text":"<p>In micropython-lib there are bunch of sub directories that can be isntalled. First the Pico has to be connected to the internet.</p> <pre><code># connect to device on mpremote\n# connect to internet\nimport mip\nmip.install(\"aiorepl\") # for example\n</code></pre> <p>if the Micropython device isn't network connected then the host machine can be used instead.</p> <pre><code>import mip\nmpremote mip install pkgname\n</code></pre>"},{"location":"2023-11-05-Pi-Pico/#links","title":"Links","text":"<p>A bunch of interesting Micropython stuff by Peter Hinch, a retired hardware and firmware developer, here. This includes mqtt gui for tiny screens and async information.</p> <ul> <li>Greg Chadwick - Playing with the Pico Part 1 - Getting Started</li> <li>Arbitrary Wave Generator With the Raspberry Pi Pico : 4 Steps (with Pictures) - Instructables</li> <li>GitHub - GitJer/Some_RPI-Pico_stuff: Some experiments I did with the Raspberry Pi Pico</li> <li>pico-work/pj_adc_fft at master \u00b7 iwatake2222/pico-work \u00b7 GitHub</li> </ul>"},{"location":"2023-11-05-Pi-Pico/#raspberry-pi-and-electronics-projects","title":"Raspberry Pi and Electronics Projects","text":""},{"location":"2023-11-05-Pi-Pico/#fixed-point-vs-floating-point","title":"Fixed point vs Floating point","text":"<ul> <li>Fixed point vs Floating point</li> </ul>"},{"location":"2023-11-05-Pi-Pico/#hardware-projects","title":"Hardware Projects","text":"<ul> <li>Raspberry Pi Pico Oscilloscope | Hackaday</li> <li>Project Update: New Stepper Motor Driver - Lucky Resistor</li> <li>Make a Good Dupont Pin-Crimp EVERY TIME! : 15 Steps (with Pictures) - Instructables</li> <li>DuPont And \"DuPont\" Connectors, And How To Crimp Them Properly</li> </ul>"},{"location":"2023-11-05-Pi-Pico/#micropython-resources","title":"MicroPython Resources","text":"<ul> <li>Overview \u2014 MicroPython latest documentation</li> <li>GitHub - peterhinch/micropython-mqtt: A 'resilient' asynchronous MQTT driver. Plus a means of using an ESP8266 to bring MQTT to non-networked targets.</li> </ul>"},{"location":"2023-11-05-Pi-Pico/#data-monitoring-and-visualization","title":"Data Monitoring and Visualization","text":"<ul> <li>Installing the Mosquitto MQTT Server to the Raspberry Pi - Pi My Life Up</li> <li>Install Mosquitto Broker Raspberry Pi | Random Nerd Tutorials</li> <li>A comprehensive guide to Grafana &amp; InfluxDB - NotEnoughTech</li> <li>InfluxDB and Grafana for sensor time series \u2013 Thingsmatic</li> <li>Plugin directory | Telegraf 1.24 Documentation</li> <li>ExplainingComputers.com: Raspberry Pi Pico W Weather Station</li> <li>Performance Evaluation of TickTock (A new Time Series DB) - RaspberryPI Edition</li> <li>Getting MQTT Data into InfluxDB - Full Stack Energy</li> <li>Monitoring Your Raspberry Pi System using InfluxDB Telegraf | Random Nerd Tutorials</li> </ul>"},{"location":"2023-11-05-Pi-Pico/#thermal-imaging","title":"Thermal Imaging","text":"<ul> <li>infiray P2 Pro Thermal Camera</li> <li>Infiray P2 thingiverse</li> <li>Infiray P2 Pro smartphone thermal camera review &amp; teardown</li> <li>VESA 75x75 Camera Mount</li> <li>PyThermalcam on Raspberry Pi</li> <li>PiThermalCam for  MLX90640</li> </ul>"},{"location":"2023-11-15-Home-Assistant-ESPHome/","title":"Home-Assistant-ESPHome","text":""},{"location":"2023-11-15-Home-Assistant-ESPHome/#template","title":"Template","text":""},{"location":"2023-11-15-Home-Assistant-ESPHome/#home-assistant","title":"Home Assistant","text":"<ul> <li>Understanding MQTT Topics</li> <li>Scargill Tech Blog</li> <li>A simple setup for your own smart home server (on a Raspberry Pi)</li> <li>Home Assistant Container</li> <li>Random Light Schedule on Home Assistant</li> <li>Home Assistant Configuration Example</li> <li>How much does it cost to run a smart home?</li> </ul>"},{"location":"2023-11-15-Home-Assistant-ESPHome/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Firmware, etc on Sonoff BasicR4</li> <li>Tutorial on making a ESPHome External Component from scratch and HomeThing</li> <li>Build your own CT Clamp Power and Energy Monitor with ESPHome</li> <li>Loads of interesting ESP8266 ESP32 products</li> <li>MAKE AN ARDUINO TEMPERATURE SENSOR (THERMISTOR TUTORIAL)</li> <li>HOW ROTARY ENCODERS WORK \u2013 ELECTRONICS BASICS</li> <li>Incremental encoder</li> <li>Rpi pico w onboard temperature sensor and onboard led</li> <li>pico-w-garage-door-sensor</li> <li>Using ESPHome on the Raspberry Pi Pico W and other RP2040 microcontroller boards</li> <li>Development for Home Assistant and my fork of Home Assistant</li> <li>This is the normal Home Assistant documentation for examples of Home Assistant custom config this will work with ESPHome but they prefer that you use exernal components but the documentation for external components is severely limited, as of 2023</li> <li>Electro Dragon Relay</li> <li>WAGO 24A LIGHT JUNCTION BOX 39 X 95 X 29MM GREY</li> <li>Cheap EARU Electric TV01 No WIFIProgrammable Thermostat Timer TRV Radiator Valve Actuator Temperature Controller</li> <li>Purpose of the diode and capacitor in this motor circuit</li> <li>How diodes protect H-bridge DC motor driver?</li> <li>Arduino Lesson 13. DC Motors</li> <li>ARDUINO MOTOR GUIDE - 6 ARDUINO PROJECTS WITH A SPIN</li> </ul>"},{"location":"2023-11-15-Home-Assistant-ESPHome/#development-for","title":"Development for","text":"<ul> <li>used for validation in ESP voluptuous and functions</li> <li>based on FormEncode Validation</li> </ul>"},{"location":"2023-11-15-Home-Assistant-ESPHome/#pi-pico","title":"Pi Pico","text":"<ul> <li>Using ESPHome on the Raspberry Pi Pico W and other RP2040 microcontroller boards</li> <li>Rpi pico w onboard temperature sensor and onboard led</li> </ul>"},{"location":"2023-11-15-Home-Assistant-ESPHome/#zigbee","title":"ZigBee","text":"<ul> <li> <p>How to Transform a RaspberryPi Into a Universal Zigbee and Z-Wave Bridge including information about z-wave vs zigbee search for <code>CC2531</code> on amazon. See Sniff Zigbee and alternative flashing</p> </li> <li> <p>cc2530 information TI recommends \"the ZCP 3.0 compliant CC26x2/CC13x2 family\" the cheaper development board is LAUNCHXL-CC26X2R1, about \u00a345 the similar LAUNCHXL-CC2650 is a bit cheaper. Cheap modules from EBYTE E18-MS1-PCB Firmware for these devices someone built a mini PCB for it Z1-Mini with a cookbook. Someone else build ZigUNO shield with the design files here a set of projects using this including design files little development board design files suitable for jlcpcb needs TI provided sw development kit with their own IDE seems like it gets complicated and expensive pretty quickly Zigbee CC2530</p> </li> <li> <p>Flashing a CC2530 + CC2591 Zigbee Module with a Raspberry Pi using zigbee2mqtt</p> </li> </ul>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/","title":"Microsoft Surface Laptop 4","text":""},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#microsoft-surface-laptop-4","title":"Microsoft Surface Laptop 4","text":""},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#apply-wim-file","title":"Apply WIM file","text":"<p>For recover partition, see</p> <pre><code>rem == CreatePartitions-UEFI.txt ==\nrem == These commands are used with DiskPart to\nrem    create three partitions\nrem    for a UEFI/GPT-based PC.\nselect disk 0\nclean\nconvert gpt\nrem == 1. System partition =========================\ncreate partition efi size=100\nrem    ** NOTE: For Advanced Format 4Kn drives,\nrem               change this value to size = 260 ** \nformat quick fs=fat32 label=\"System\"\nassign letter=\"S\"\nrem == 2. Microsoft Reserved (MSR) partition =======\ncreate partition msr size=16\nrem == 3. Windows partition ========================\nrem ==    a. Create the Windows partition ==========\ncreate partition primary \nrem ==    c. Prepare the Windows partition ========= \nformat quick fs=ntfs label=\"Windows\"\nassign letter=\"W\"\nlist volume\nexit\n</code></pre>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#powershell-history","title":"PowerShell History","text":"<pre><code>$PROFILE # C:\\Users\\jackc\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1hx (Get-PSReadlineOption).HistorySavePath # hx is Helix Editor\n</code></pre>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#building-a-boot-disk","title":"Building a Boot Disk","text":"<p>Create a recovery drive (WinRE) using the control panel from a existing version of windows, create Windows 11 installation media or build Windows PE (WinPE) as described below.</p> <p>Install the Windows ADK offline and add the WinPE add-on:</p> <p>A comprehensive description of a WinPE installation USB WinPE - Create a Custom Windows Install USB Install Windows 11 using WinPE usb on any partition by typing setup at command prompt.</p> <pre><code>cd \"$env:HOMEPATH\\Downloads\\Windows Kits\\10\\ADK\"\n.\\adksetup.exe /quiet /installpath c:\\ADK /features OptionId.DeploymentTools\n.\\adkwinpesetup.exe /quiet /installpath c:\\ADK /features OptionId.WindowsPreinstallationEnvironment\n</code></pre> <p>To find out what features can be installed, use the list option (/help for more options):</p> <pre><code>.\\adksetup /list # OptionId.DeploymentTools\n.\\adkwinpesetup.exe /list # OptionId.WindowsPreinstallationEnvironment\n</code></pre> <pre><code>diskpart\nList disk\nselect disk X # X is the USB drive\nclean\nconvert MBR\ncreate partition primary size=2048\nactive\nformat fs=FAT32 quick label=\"WinPE\"\nassign letter=P\ncreate partition primary\nformat fs=NTFS quick label=\"Images\"\nassign letter=I  \nExit\n</code></pre> <p>run <code>Deployment and Imaging Tools Environment</code> app</p> <pre><code>copype amd64 C:\\WinPE_amd64\n</code></pre> <p>run <code>Deployment and Imaging Tools Environment</code> app as administrator</p> <pre><code>Makewinpemedia /ufd C:\\WinPE_amd64 P:\nxcopy C:\\Images\\install.wim I:\\install.wim # path to install image # Image\n</code></pre>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#winpe-startup","title":"WinPE Startup","text":"<p>Windows PE startup</p> <p>see <code>X:\\System32\\wpeinit.log</code> for details.</p> <p>So let\u2019s review the default process:</p> <ul> <li><code>winlogon.exe</code> runs <code>winpeshl.exe</code></li> <li><code>winpeshl.exe</code> runs <code>\u201ccmd.exe /k startnet.cmd\u201d</code></li> <li><code>startnet.cmd</code> runs <code>wpeinit.exe</code></li> </ul> <p>You\u2019re left sitting at a command prompt. Windows PE will reboot on <code>exit</code> (if exit code is 0). You can change every part of this:</p> <ul> <li>Changing <code>HKLM\\System\\Setup\\CmdLine</code> isn't recommended.</li> <li><code>winpeshl.ini</code> can run something other than <code>\u201ccmd.exe /k startnet.cmd\u201d</code></li> <li>`\u201cstartnet.cmd\u201d`` could run something else.</li> <li>Add an <code>unattend.xml</code> for <code>wpeinit.exe</code>.</li> </ul> <p>Wait until networking and optional components are initialized.</p> <p>Now look at how MDT does it:</p> <ul> <li><code>winlogon.exe</code> runs <code>winpeshl.exe</code></li> <li><code>winpeshl.ini</code> includes <code>\u201cbddrun.exe /bootstrap\u201d</code></li> <li><code>bddrun.exe</code> runs <code>wpeinit.exe</code></li> <li><code>unattend.xml</code> runs the <code>\u201cwscript.exe X:\\Deploy\\Scripts\\LiteTouch.wsf\u201d</code></li> <li>When <code>wscript.exe</code> exits the machine reboots</li> </ul> <p>All of the above avoids displaying a command prompt (it's a series of Windows apps and not console apps) so no console access. To display something to the user HTA or popups can be used.</p>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#adding-drivers-to-boot-media","title":"Adding Drivers to Boot Media","text":"<p>See the official documentation or this write up for more information. The drivers and firmware for \"Surface Laptop 4 with AMD Processor\" are here. To extract these run:</p> <pre><code>Msiexec.exe /a SurfaceLaptop4_AMD_Win11_22000_23.120.1653.0.msi /qb targetdir=c:\\surface_laptop\n</code></pre> <p>Then add these files to the <code>boot.wim</code> (or another image file):</p> <pre><code>mkdir \"c:\\winboot\"\nmkdir \"c:\\winboot\\mount\"\n$BootWimSource = \"D:\\sources\\boot.wim\" \n$MountPath = \"c:\\winboot\\mount\" \n$BootWim = \"c:\\winboot\\boot.wim\"\n$drivers = \"C:\\surface_laptop\"\ncopy $BootWimSource $BootWim\nMount-WindowsImage -Path $MountPath -ImagePath $BootWim -Index 1 # service\nAdd-WindowsDriver -Path $MountPath -Driver $drivers -Recurse\nDismount-WindowsImage -Path $MountPath \u2013Save\ncopy $BootWim $BootWimSource\n</code></pre> <p>The set of drivers for \"Surface Laptop 4 with AMD processor\" are listed in a table</p> <pre><code>U0361415\nAMDfendr\nAMDGpio2\nAMDI2c\nAMDLpcFilterDriverAMDMicroPEP\nAMDPsp\nAMDSmf\nAMDSpi\nAMDUart\nSurfaceEthernetAdapter\nSMBUS\nSurfaceBattery\nSurfaceButton\nSurfaceDigitizerHidSpiExtnPackage\nSurfaceHIDFriendlyNames\nSurfaceHidMini\nSurfaceHotPlug\nSurfaceOemPanel\nSurfacePowerMeter\nSurfacePowerTrackerCore\nSurfaceSerialHub\nSurfaceSMFClient\nSurfaceSmfDisplayClient\nSurfaceSystemManagementFramework\nSurfaceTconDriver\nSurfaceThermalPolicy\nSurfacetimealarmacpifilter\nSurfaceUcmUcsiHidClient\n</code></pre> <pre><code>Device information:\nDevice name: LAPTOP...\nSerial number: 0337...\nSurface model: Surface Laptop 4 Model 1952:1953\nSAM: 12.104.139.0\nUEFI: 3.350.140.0\nApp version: 61.23120.85.0\nBIOS Version/Date: Microsoft Corporation 3.350.140 05/02/2023\nTouch driver: 5.0.132.139\nWiFi driver: 22.230.0.8\nEdition: Windows 11 Pro\nOS build: 22631.3007\nProcessor: AMD Ryzen 7 Microsoft Surface (R) Edition\nInstalled RAM: 8 GB\nStorage size: 56 GB free of 236 GB\nGPU: AMD Radeon(TM) Graphics\nScreen resolution: 2496 x 1664\n</code></pre>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#winpe-extra-tools","title":"WinPE Extra Tools","text":"<ul> <li>Sysinternals</li> <li>NotePad++</li> <li>Neovim</li> <li>Explorer++</li> <li>Adding DaRT to ConfigMgr Boot Images \u2013 And starting it earlier than early</li> <li>How to run Microsoft Network Monitor in WinPE</li> </ul> <p>To add PowerShell, start the \"Deployment and Imaging Tools Environment\" as an administrator and run these commands:</p> <pre><code>$APK = \"C:\\\\Program Files (x86)\\Windows Kits\\10\"\n# mount path as above\n# nvim search/replace - select range, :, then\n# /C:\\\\WinPE_amd64_PS\\\\mount/$MountPath/g\n# /C:\\\\Program Files \\(x86\\)\\\\Windows Kits\\\\10/$APK/g\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\WinPE-WMI.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\en-us\\WinPE-WMI_en-us.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\WinPE-NetFX.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\en-us\\WinPE-NetFX_en-us.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\WinPE-Scripting.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\en-us\\WinPE-Scripting_en-us.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\WinPE-PowerShell.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\en-us\\WinPE-PowerShell_en-us.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\WinPE-StorageWMI.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\en-us\\WinPE-StorageWMI_en-us.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\WinPE-DismCmdlets.cab\"\nDism /Add-Package /Image:\"$MountPath\" /PackagePath:\"$APK\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\WinPE_OCs\\en-us\\WinPE-DismCmdlets_en-us.cab\"\nDism /Unmount-Image /MountDir:\"$MountPath\" /Commit\n</code></pre> <p>After booting WinPE you can run powershell with this command <code>X:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell</code></p>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#image-management","title":"Image Management","text":"<pre><code># Capture Multiple Partitions\ndiskpart\nlist volume\nselect partition=x # x is number of partition to rename\nassign letter=s\nexit\n\nDISM /image:C:\\ /optimize-image /boot\nDism /Capture-Image /ImageFile:E:\\windows.wim /CaptureDir:C:\\ /Name:\"Windows\" /CheckIntegrity # /Compress:{fast|max|none} default max\nDism /Capture-Image /ImageFile:C:\\my-system-partition.wim /CaptureDir:S:\\ /Name:\"My system partition\"\n\n# Apply Image\nSet high-performance power scheme to speed deployment\ncall powercfg /s 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\n\ndism /Apply-Image /ImageFile:E:\\Images\\ThinImage.wim /Index:1 /ApplyDir:W:\\\n\n# Copy boot files to the System partition\nW:\\Windows\\System32\\bcdboot W:\\Windows /s S:\n\n# Copy the Windows RE image to the Windows RE Tools partition\nmd R:\\Recovery\\WindowsRE\nxcopy /h W:\\Windows\\System32\\Recovery\\Winre.wim R:\\Recovery\\WindowsRE\\\n\n# Register the location of the recovery tools\nW:\\Windows\\System32\\Reagentc /Setreimage /Path R:\\Recovery\\WindowsRE /Target W:\\Windows\n\n# Verify the configuration status of the images\nW:\\Windows\\System32\\Reagentc /Info /Target W:\\Windows\n\n# FFU\nDISM.exe /capture-ffu /imagefile=e:\\windows.ffu /capturedrive=\\\\.\\PhysicalDrive0 /name:disk0 /description:\"Windows FFU\"\n</code></pre> <ul> <li>Capture and apply Windows, system, and recovery partitions</li> <li>Image Deployment Sample scripts</li> <li>diskpart</li> <li>Capture and apply Windows Full Flash Update (FFU) images</li> <li>How to convert install.esd to install.wim</li> </ul> <pre><code># Admin\ndism /get-wiminfo /wimfile:\"e:\\sources\\install.esd\" # number 6 is Professional\nmkdir c:\\temp\n# compress max not required, expecially if exporting to install.esd later\ndism /export-image /sourceimagefile:\"e:\\sources\\install.esd\" /SourceIndex:6 /DestinationImageFile:c:\\temp\\install.wim /compress:max /checkintegrity\nMount-WindowsImage -path c:\\mnt -imagepath C:\\temp\\install.wim -index 1\nAdd-WindowsDriver -Path c:\\mnt -Driver C:\\surface\\ -Recurse\nDismount-WindowsImage -Path c:\\mnt -save\n# may not need to do this, could leave it as install.wim\ndism /export-image /sourceimagefile:c:\\temp\\install.wim /sourceIndex:1 /destinationimagefile:c:\\temp\\install.esd /compress:recovery\nrename-item e:\\install.esd e:\\install.esd.old\ncopy c:\\temp\\install.esd e:\\sources\\install.esd\n</code></pre> <p>Split a Windows image file (.wim)</p> <pre><code># similarly, with `swm` filesh\ndism /export-image /sourceimagefile:\"c:\\esd\\install.swm\" /SourceIndex:1 /DestinationImageFile:c:\\temp\\install_home.wim /compress:max /checkintegrity\nMount-WindowsImage -path c:\\mnt -imagepath C:\\temp\\install_home.wim -index 1\nAdd-WindowsDriver -Path c:\\mnt -Driver C:\\surface_laptop\\ -Recurse\nDismount-WinowsImage -Path c:\\mnt -save\nDism /Split-Image /ImageFile:C:\\temp\\install_home.wim /SWMFile:C:\\temp\\install_home.swm /FileSize:4000\ncopy C:\\temp\\install_home*.swm d:\\sources\n</code></pre> <p>DISM Image Management Command-Line Options</p> <p>\"Use the recovery option to export push-button reset images. The resulting files are much smaller in size, which in turn, greatly reduce the amount of disk space needed for saving the push-button reset image on a recovery drive. The destination file must be specified with an .esd extension.\"</p> <p>This appears to be used with both Windows Recovery Environment (Windows RE) and Push-button reset</p> <p>What is the most efficient, native way to image a Windows partition?</p> <p>\"ESDs (Electronic Software Distribution) can only capture a System partition and must use /Compress:Recovery (algorithm is ~33% more efficient than /Compress:Max) Windows \u2265 10: Can only be used for PBR [Push-Button Reset] exported image\"</p> <p>WIM - This paper defines the internal format of a Windows Imaging (WIM) file format</p>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#insalling-windows-11","title":"Insalling Windows 11","text":"<p>\"For Windows 11: If you're launching Windows Setup from WinPE, make sure your WinPE image includes the WinPE-WMI and WinPE-SecureStartup optional components\"</p> <p>Windows Setup Supported Platforms and Cross-Platform Deployments:</p> <ul> <li>Run a 32-bit version of Windows Setup, and use the /InstallFrom command-line option to select a 64-bit Windows image: <code>D:\\setup.exe /InstallFrom:\"N:\\Windows_64-bit\\sources\\install.wim\"</code></li> <li>Run a 32-bit version of Windows Setup, and use the Microsoft-Windows-Setup\\ImageInstall\\OSImage\\InstallFrom unattend setting to select a 64-bit Windows image: <code>D:\\setup.exe /unattend:\"D:\\unattend_install_64-bit.xml\"</code></li> <li>Use image-capturing tools to apply a 64-bit version of Windows to the PC: <code>Dism /Apply-Image /ImageFile:\"Fabrikam_64-bit_image.wim\" /Index:1 /ApplyDir:D:\\</code></li> </ul> <p>Windows Setup Edition Configuration and Product ID Files (EI.cfg and PID.txt)</p> <p>ei.cfg</p> <pre><code>[EditionID]\nProfessional\n[Channel]\nRetail\n[VL]\n0\n</code></pre> <p>PID.txt</p> <pre><code>[PID]\nValue=XXXXX-XXXXX-XXXXX-XXXXX-XXXXX\n</code></pre>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#application-setup","title":"Application Setup","text":"<p>Chocolatey vs. Scoop vs. Winget: Package Managers for Windows</p> <p>Chocolatey and Winget Comparison</p> <p>PowerShell Gallery</p> <p>PowerShell Crescendo - working with existing command line tools</p> <p>My Crescendo journey and Crescendo - PowerShell Community</p> <pre><code>https://aka.ms/PSWindows # upgrade powershell\n# admin user\nSet-ExecutionPolicy AllSigned\nSet-ExecutionPolicy RemoteSigned -scope CurrentUser\nwinget upgrade --all\nwinget install --id Git.Git -e --source winget\nwinget install chezmoi\n# see [2024-02-12-chezmoi.md](2024-02-12-chezmoi.md)\nwinget import -i $env:USERPROFILE\\.config\\windows_config\\winget.json --accept-package-agreements\n# winget export -o $env:USERPROFILE\\.config\\windows_config\\winget.json\n# as admin for choco\niwr -useb chocolatey.org/install.ps1 | iex\nchoco install \"$env:USERPROFILE\\.config\\windows_config\\choco_packages.config\"\n# choco export \"$env:USERPROFILE\\.config\\windows_config\\choco_packages.config\"\n# as normal user for scoop\niwr -useb get.scoop.sh | iex\nscoop import &gt; $env:USERPROFILE\\.config\\windows_config\\scoopfile.json\n# scoop export &gt; $env:USERPROFILE\\.config\\windows_config\\scoopfile.json\n# Set Git Credential Manager Core by running: \ngit config --global credential.helper manager\n# To add context menu entries, run\n'C:\\Users\\jackc\\scoop\\apps\\git\\current\\install-context.reg'\n# To create file-associations for .git* and .sh files, run\n'C:\\Users\\jackc\\scoop\\apps\\git\\current\\install-file-associations.reg'\ncd $env:HOMEPATH\nmkdir git\ncd git\ngit clone https://github.com/jchidley/mkdocs-material-test.git\n# run windows update\niwr -useb https://christitus.com/win | iex\n</code></pre>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#windows-intune-autopilot","title":"Windows Intune / Autopilot","text":"<p>Probably best to go full enterprise install: workstation, WinPE, specialize, etc. Intune and Autopilot are now really aggressive.</p> <p>Previously: If you try to install the Professional version of windows and the previous owner of the laptop has added it to Windows Intune or Autopilot then you will need to install the Home edition first and then upgrade it to Pro.</p>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#chezmoi-and-dotfiles","title":"Chezmoi and dotfiles","text":"<ul> <li>Chezmoi</li> <li>chezmoi - Dotfiles Manager across multiple machines | Tom Payne (the creator of it)</li> <li>Solving the Dotfiles Problem (And Learning Bash) is very well explained</li> <li>Chezmoi and Ansible</li> <li>Easily moving Linux installs</li> <li>chezmoi: Organize your dotfiles across multiple computers | Let's Code</li> <li>Using Chezmoi to Automate dotfiles / Config Files (+ my bashrc)</li> <li>Dotfiles! Here's how I organize them</li> </ul>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#fixing-problems","title":"Fixing problems","text":"<p>Fix Your Windows PC Problems</p> <pre><code>dism command using your windows image\ndism /image:c:\\ /cleanup-image /restorehealth /source:c:\\windows\n\n# Add this command you yours and change path to your path\n/scratchdir:{path}\n\n# This command uses the windows image on USB drive we created.\ndism /image:c:\\ /cleanup-image /restorehealth /source:{path to install.wim or install.esd}\n\nsfc /scannow from windows recovery\nsfc /scannow /offbootdir={drive}\\ /offwindir={drive}\\windows\n</code></pre> <ul> <li>How To Make Microsoft Edge Better</li> <li>Windows 11 Fixer</li> <li>The Ultimate Windows Utility</li> <li>Sysinternals</li> </ul>"},{"location":"2024-01-17-Microsoft-Surface-Laptop-4/#links","title":"Links","text":"<p>Checkout surface backup</p> <ul> <li>Download drivers and firmware for Surface</li> <li>Where to look for your BitLocker recovery key</li> <li>Surface Recovery Image Download</li> <li>Creating and using a USB recovery drive for Surface</li> <li>Restore or reset Surface for Windows</li> <li> <p>Linux running on the Microsoft Surface devices. Follow the instructions below to install the latest kernel.</p> </li> <li> <p>Install Windows the Arch Linux Way</p> </li> <li>Reagentc Windows Recovery Partition</li> <li>Chris Titus Tech Utility <code>iwr -useb https://christitus.com/win | iex</code></li> <li>Windows 11 Perfect Install</li> </ul>"},{"location":"2024-01-28-Git/","title":"Git","text":""},{"location":"2024-01-28-Git/#git","title":"Git","text":"<p>Git Visual Reference</p>"},{"location":"2024-01-28-Git/#setting-up-github-for-exisiting-repository","title":"Setting up GitHub for Exisiting Repository","text":"<pre><code>git config --global init.defaultbranch silver # the default local branch\ngit checkout -b myuniquebranchname # new branch, for cleanliness\ngit add *\ngit commit -m \"most recent commit\" # clean up local git\n# setup new repository on GitHub\ngit remote add origin git@github.com:jchidley/some_project.git\ngit fetch\ngit checkout main # the remote branch's name\ngit rebase myuniquebranchname\n# --- if conflicts ---\nhx confliced_files # edit conflicting files, in this case using 'hx'\ngit add *\ngit rebase --continue\n# I name the commit \"GitHub Initial\"\ngit push --force\n# perhaps # git push --set-upstream origin main\n# --- sync branches method 1 ---\ngit checkout myuniquebranchname\ngit rebase main # sync up branches\n# --- sync branches method 2 ---\ngit branch -f myuniquebranchname # still on main\n</code></pre>"},{"location":"2024-01-28-Git/#configuration","title":"Configuration","text":"<p>Customizing Git - Git Configuration</p> <p>Git config</p> <p>To find what is set, and where the configuraiton file(s) are located, use: <code>git config --list --show-origin</code></p> <p><code>git config --global init.defaultbranch silver # the default local branch</code> <code>git config --global --list</code></p> <pre><code>init.defaultbranch=silver\nuser.name=Jack Chidley\nuser.email=7399749+jchidley@users.noreply.github.com\n</code></pre> <p><code>git config --local --list</code></p> <pre><code>core.repositoryformatversion=0\ncore.filemode=false\ncore.bare=false\ncore.logallrefupdates=true\ncore.symlinks=false\ncore.ignorecase=true\nremote.origin.url=https://github.com/jchidley/mkdocs-material-test.git\nremote.origin.fetch=+refs/heads/*:refs/remotes/origin/*\nbranch.main.remote=origin\nbranch.main.merge=refs/heads/main\n</code></pre>"},{"location":"2024-01-28-Git/#ssh","title":"SSH","text":"<p>Adding your SSH key to the ssh-agent Setting up SSH-Agent in Windows for Passwordless Git Authentication</p> <pre><code># Admin shell\nGet-Service -Name ssh-agent | Set-Service -StartupType Automatic #Manual\nStart-Service ssh-agent # only the first time\nssh-add $env:USERPROFILE/.ssh/id_ed25519 # add it to powershell profile \ngit config --global core.sshCommand C:/Windows/System32/OpenSSH/ssh.exe\nhx $PROFILE\ngit config --global --add safe.directory C:/Users/jackc/git/mkdocs-material-test\ngit config --global --add safe.directory C:/Users/jackc/.local/share/chezmoi\n</code></pre>"},{"location":"2024-01-28-Git/#fugative-vim","title":"Fugative vim","text":"<p>see Neovim-Lua</p>"},{"location":"2024-01-28-Git/#lazygit","title":"LazyGit","text":"<p>Lazygit tutorial</p> <p>LazyGit: The Git Interface That Everyone Keeps Asking For</p>"},{"location":"2024-01-28-Git/#links","title":"Links","text":""},{"location":"2024-02-12-chezmoi/","title":"chezmoi","text":""},{"location":"2024-02-12-chezmoi/#chezmoi","title":"chezmoi","text":""},{"location":"2024-02-12-chezmoi/#install","title":"Install","text":"<pre><code>sh -c \"$(curl -fsLS get.chezmoi.io)\" -- init --apply git@github.com:$GITHUB_USERNAME/dotfiles.git\n# probably need to move from `bin/chezmoi` to `~/.local/bin` or elsewhere on the path\n</code></pre> <p>If the repository has been added as HTTPS, then</p> <pre><code>git remote rm origin\ngit remote add origin git@github.com:$GITHUB_USERNAME/dotfiles.git\ngit remote -v\n</code></pre>"},{"location":"2024-02-12-chezmoi/#adding-new-files","title":"Adding new files","text":"<pre><code>chezmoi add a_new_file\nchezmoi cd # cd's to chezmoi and shells to it\n# better to edit it in the directory itself\n# windows:\n$env:USERPROFILE/.local/share\n# do the usual git stuff \"git add\", \"git commit\", \"git push\" etc\nchezmoi update # on the other machine\nchezmoi apply # apply changes\n</code></pre>"},{"location":"2024-02-12-chezmoi/#links","title":"Links","text":"<ul> <li>https://www.chezmoi.io/</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"2024-02-13-Helix/","title":"Helix","text":"","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-13-Helix/#helix-editor","title":"Helix Editor","text":"","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-13-Helix/#install-helix-on-linux","title":"Install Helix on Linux","text":"<p>From https://lindevs.com/install-helix-text-editor-on-ubuntu</p> <pre><code># latest helix\nHELIX_VERSION=$(curl -s \"https://api.github.com/repos/helix-editor/helix/releases/latest\" | grep -Po '\"tag_name\": \"\\K[0-9.]+')\nwget -qO helix.tar.xz https://github.com/helix-editor/helix/releases/latest/download/helix-$HELIX_VERSION-x86_64-linux.tar.xz\nsudo mkdir /opt/helix\nsudo tar xf helix.tar.xz --strip-components=1 -C /opt/helix\nsudo ln -s /opt/helix/hx /usr/local/bin/hx\nhx --version\nrm -rf helix.tar.xz\n# full colour for themes\necho \"export COLORTERM=truecolor\" &gt;&gt; .bashrc\n</code></pre>","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-13-Helix/#spelling","title":"Spelling","text":"<p>Working fork here: Spell Checker LSP this is based on: Spellcheck as LSP.</p> <p>Probably need to install bun package manager, see CSpell</p> <pre><code>sudo apt install unzip\ncurl -fsSL https://bun.sh/install | bash \n</code></pre> <p>in <code>helix/languages.toml</code> change <code>&lt;path to dictionary file&gt;</code> to <code>project-words.txt</code> and the file will be created in the working directory.</p> <pre><code>args = [\"--stdio\", \"--dictionary\", \"&lt;path to dictionary file&gt;\"]\n</code></pre>","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-13-Helix/#edit-files-as-sudo","title":"Edit Files as Sudo","text":"<p>How can I set my default editor in UNIX?</p> <pre><code>export SUDO_EDITOR=$(which hx)\nexport VISUAL=$(which hx)\nexport EDITOR=\"$VISUAL\"\n# to .bashrc\nsudoedit file-to-be-edited\nsudo EDITOR=$(which hx) visudo\n</code></pre> <p>uncomment <code>Defaults:%sudo env_keep += \"EDITOR\"</code> line in <code>/etc/sudoers</code></p> <p>potentially also a <code>hx</code> <code>bash</code> script</p> <pre><code>#!/bin/sh\nHELIX_RUNTIME=/path/to/helix/runtime exec /path/to/real/helix/hx --config /path/to/helix/config.toml \"$@\"\n</code></pre>","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-13-Helix/#installation","title":"Installation","text":"<p>normal installation for  installation on Debian, download the \"pre built binary\" extract to a directory then <code>ln -s extracted-directory ~/helix</code> and set %PATH to that. Run <code>hx --tutor</code> to get started.</p> <p><code>/home/jackc/.config/helix/config.toml</code></p> <p>Per project configuration is handled with a local <code>.helix/config.toml</code> with local <code>.helix/ignore</code> used for the file-picker.</p> <p>I use [[chezmoi]] for configuration management, so below is the Windows specific version.</p> <pre><code>theme = \"gruvbox\"\n\n[editor]\nline-number = \"relative\"\ntrue-color = true\nrulers = [80]\nbufferline = \"multiple\"\n\nshell = [\"pwsh.exe\",\"-NoLogo\",\"-NoProfile\",\"-NoProfileLoadTime\",\"-Command\",\"$PSStyle.OutputRendering='PlainText';\"]\n\n\n[editor.cursor-shape]\ninsert = \"bar\"\n\n[keys.normal]\nesc = [\"collapse_selection\", \"keep_primary_selection\"]\n\n[editor.soft-wrap]\nenable = true\nwrap-at-text-width = true\n</code></pre>","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-13-Helix/#cut-and-pase-from-the-system-clipboard","title":"Cut and Pase from the System clipboard","text":"<p>+p, +P, +y, +Y to paste/cut from the system clipboard (the '*' register '\"'). <p>To paste from the system clipboard, might need to use <code>\"*p\"</code>.</p>","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-13-Helix/#rust","title":"rust","text":"<pre><code>rustup component add rust-analyzer // to get this to work\n</code></pre>","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-13-Helix/#markdown","title":"Markdown","text":"<p>Helix &amp; marksman</p> <p>like for [[#rust]] helix is ready to go, you just need to install marksman</p> <pre><code>scoop install marksman\n</code></pre>","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-13-Helix/#windows-terminal","title":"Windows Terminal","text":"<p>documentation Open a pane: Alt+Shift++</p>","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-13-Helix/#links","title":"Links","text":"<ul> <li>Search for helix on Luke Pighetti's channel</li> </ul>","tags":["editor","tools","linux","terminal","programming"]},{"location":"2024-02-29-NixOS/","title":"NixOS","text":""},{"location":"2024-02-29-NixOS/#nixos","title":"NixOS","text":""},{"location":"2024-02-29-NixOS/#links","title":"Links","text":"<p>NixOS-WSl Nix Reference Manual Nix Pills NixOS: Everything Everywhere All At Once Ultimate NixOS Guide | Flakes | Home-manager NixOS Surface</p>"},{"location":"2024-03-10-How-I-Learned-Rust/","title":"How-I-Learned-Rust","text":"","tags":["rust","programming","learning"]},{"location":"2024-03-10-How-I-Learned-Rust/#how-i-learned-rust","title":"How I Learned Rust","text":"","tags":["rust","programming","learning"]},{"location":"2024-03-10-How-I-Learned-Rust/#introduction","title":"Introduction","text":"<p>I found Python to be an incredibly useful language that's available almost everywhere - even on micro-controllers. Its amazing libraries cover a huge range of needs and are performant. I would still be using Python as my go-to langage if I hadn't needed to do a Monte Carlo simulation of my own finances. There didn't appear to be a suitable library to fit my needs and, owing to the compute intensive nature of the problem, I found that I would have to develop a library in another, more performant language. Thus I discovered the \"2 language problem\" you have a flexible, easy to learn and use language (e.g. Python) but need a highly performant language for it's libraries (e.g. C).</p> <p>I initially looked using <code>rust</code> through the pyo3 library but it became obvious that this was no quick fix. So I looked for alternatives and found that julia met my needs. I developed my little application and I was happy. However, there are limitations with julia: 1) it is a niche language and doesn't seem like to gain really broad application 2) it requires a runtime and 3) it doesn't easily run on micro-controllers.</p> <p>So I started looking again. I wanted a langauge with broad applicability, didn't suffer the 2 langague problem, is higly performant, had a welcoming beginner-friendly community and is strongly typed (this goes hand-in-hand with great performance). It seems to be used for a very large, and expanding rapidly, set of computing tasks - gaming, embedded programming, GUI development, web development, operating systems, etc. <code>rust</code> comes with a long-to-get-productive learning curve. I don't think that it's espcially difficult to learn.</p> <p>I also found mojo which \"combines the usability of Python with the performance of C, unlocking unparalleled programmability\". Mojo targets AI but looks like it'll work as a general programming langage. It's in its very early stages so I'm keeping an eye on it.</p> <p>The clostest thing that I've found to a hands on and, relatively, short tutorial is this one for command line apps in Rust. It covers a lot of ground and has a set of resources</p> <ul> <li>Learn Rust</li> <li>rustlings</li> </ul>","tags":["rust","programming","learning"]},{"location":"2024-03-10-How-I-Learned-Rust/#workflow-and-setup","title":"Workflow and Setup","text":"<p>My primiary machines are a 16 GB Windows Surface Laptop 3 and an 8GB Raspberry Pi 5. I think these represent excellent value for money. I also use a macbook and Linux desktops. I have been using PCs for over 3 decades and Windows since \"386\". It's in my muscle memory. There appears to few examples of people programming rust on windows, so that's another reason to use it. </p> <p>I use the current versions of helix editor, using Powershell inside the Windows Terminal. I prefer to use cross-platform <code>rust</code>-based command line tools. I use zoxide, ripgrep and fd all the time. Feel free to use whatever you're comfortable with.</p> <p>Install <code>rust</code> using <code>rustup</code></p> <pre><code>cd $env:TEMP # Windows temporary directory\ncargo new --lib rust_explore # almost all programming involves creating and using libraries\ncargo test --lib tests -- --nocapture # `-- --nocapture` for `println!`` and friends\nSet-ExecutionPolicy Unrestricted -Scope Process; iex (iwr \"https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.ps1\").Content # binary install for crates\ncargo binstall cargo-watch # watcher\n# open 3 panes: 1) `hx .\\src\\lib.rs` editor 2) `cargo watch -x check` hot-loading compile checking 3) `cargo test --lib explore -- --nocapture` or `cargo add some-crate` or some other command\n</code></pre> <p>I rename the module <code>tests</code> to <code>explore</code> and use that to explore the rust language as I'm learning it. </p> <p>I make sure that the test includes a <code>let result =</code> assigment directly before <code>dgb!{result);</code>. Once I am compfortable with this, I use the result in an appropriate <code>assert</code> macro for the final test.</p> <p>This closely mimics my ideal development process. First I explore the libraries I might use and then I use tests as I develop the code. Sometimes its code first, sometimes its test first; I write documentation, including examples, at the same time. I aim for 100% coverage of the code with tests and documentation. I'd by lying if I wrote that I always do this.</p> <p>Given that almost everyting that I do involves the command line I used Command line apps in Rust book as a reference implemetation and tutorial.</p>","tags":["rust","programming","learning"]},{"location":"2024-03-10-How-I-Learned-Rust/#getting-started","title":"Getting Started","text":"<p>I did a skim read of the The Rust Programming Language, and watched doggo dot rs's full rust course.</p> <p>I followed this up with working my way through rustlings, Trevor Sullivan's Rust Programming Tutorial and Mastering Rust - Second Edition by Rahul Sharma and Vesa Kaihlavirta concurrently.</p> <p>I found <code>rust</code> one of the most invovled languages to learn. Like many people I have learnt, to varying degrees, many languages over the years: BASIC, Pascal, FORTRAN, C, C#, Python, F#, lisp, haskell and Javascript to name a few. <code>rust</code> takes a long time to get aquantied with because of the unfamiliar concepts of how to manage memory really effectively (with <code>C</code> and <code>C++</code> you can get going leaving memory, and thus security, issues in your wake) I had a head start with the static typing and functional aspects owing to the fact that I had learnt <code>ml</code> langagues earlier. Learning <code>rust</code> is comparable to learning a functional language (<code>F#</code>, <code>lisp</code>) for the first time as the concepts are not like mainstream programming langagues with their reliance on procedures and classes. If you've only used <code>REPL</code> languages like <code>Python</code> you are in for a shock when you try a compiled strongly-typed language like <code>rust</code>.</p> <p>I don't consider <code>rust</code> difficult to learn but it does take much, much longer to start real programming by yourself. Contrast this with <code>Python</code> which is easy to start programming and then descends into a morass of libraies, virutalisation and package management. Spreadsheets are also an easy entry to programming with data front and centre. Spreadsheets soon become an impossible change-management problem with their plethora of easily modified and obscured functions. There are banks that have banned spreadsheets from certain parts of their business owing to this complexity and lack of control.</p>","tags":["rust","programming","learning"]},{"location":"2024-03-10-How-I-Learned-Rust/#see-also","title":"See also","text":"<p>Fornjot is an early-stage CAD kernel</p> <p>Rust Beginnings needs to be moved from here, and deleted in beginning rust</p>","tags":["rust","programming","learning"]},{"location":"2024-03-10-How-I-Learned-Rust/#links","title":"Links","text":"<ul> <li>https://docs.rs/toml/latest/toml/</li> </ul>","tags":["rust","programming","learning"]},{"location":"2024-03-17-Asbestos-Roof-Replacement/","title":"Asbestos Roof Replacement","text":""},{"location":"2024-03-17-Asbestos-Roof-Replacement/#asbestos-roof-replacement","title":"Asbestos Roof Replacement","text":""},{"location":"2024-03-17-Asbestos-Roof-Replacement/#introduction","title":"Introduction","text":"<p>Cladco 175mm Metal Z Purlins  and other roof supplies at cladco</p> <p>Profile 6 Fibre Cement Sheeting</p> <p>85 cm x 180 cm. 9 in total.</p> <p>Needs to be a cold roof construction perlins a 90 cm spacing</p> <p>SunFixings - HANGER BOLT</p> <p>Installation of PV solar system on NT Eternit/Euronit fibre cement profile sheets</p> <p>Rafter Solar Fixing 250</p> <p>Panel installation</p> <p>Do It Yourself Solar Power? - Easy DIY Solar Panel Installation!</p>"},{"location":"2024-03-17-Asbestos-Roof-Replacement/#asbestos","title":"Asbestos","text":"<p>Non-licensed work with asbestos \"asbestos cement products, (eg roof sheeting and rainwater goods) provided the material is carefully handled/removed without breaking up; this includes work with asbestos cement which is weathered but not otherwise substantially damaged\"</p> <p>PPE</p> <p>A worker's guide to asbestos safety</p> <p>Asbestos essentials emoving asbestos cement (AC) sheets, gutters etc and dismantling a small AC structure</p> <p>Hazardous waste collection</p>"},{"location":"2024-03-17-Asbestos-Roof-Replacement/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"2024-03-24-House-Electrics/","title":"House-Electrics","text":""},{"location":"2024-03-24-House-Electrics/#house-electrics","title":"House Electrics","text":""},{"location":"2024-03-24-House-Electrics/#update-12824","title":"Update 12/8/24","text":"<p>RS PRO 5A Inline Fuse Holder for 5x20mm Fuse, 250V ElectricalOM - Ideal Software Tool for Domestic, Commercial and Industrial Low Voltage Electrical Design to BS7671 FoxESS - Modbus Buy \"Fox H1-6.0 Hybrid Inverter 6kW\" from TradeSparky This repo contains a bit of everything BYD register, scripts, logs, wiring etc This software enables EV battery packs to be used for stationary storage Battery-Emulator Nissan LEAF battery Powerwall Installation Documents</p> <p>PredBat Youtube,   Home battery prediction and automatic charging for Home Assistant Predbat  and GitHub Predbat</p> <p>The fire rated board, aka Fire Batts, is simple and very quick to install to provide up to four hours fire and smoke protection</p> <p>PredBat - Powerful Automated Home Battery Management</p> <p>XLPE Insulated, PVC Bedded and Sheathed, Steel Wire Armoured Cables</p> <p>dishwasher turned on at 23:21, says it will take 2:15 ish. First 1/2 hour isn't much activity, then 1/2 hour of water heating and 1/2 hour drying at the end.</p>"},{"location":"2024-03-24-House-Electrics/#duct","title":"Duct","text":"<p>singlewall is probably enough, with a drawcord</p> <p>Flexi Duct Electric - 63mm (O.D.) X 50mtr Black Coil \u00a370ish</p> <p>Naylor MetroCoil Singlewall Ducting</p> <p>twinwall for smoothness</p> <p>various sizes cheap twinwall 63mm 50m \u00a367ish</p>"},{"location":"2024-03-24-House-Electrics/#consumer-units","title":"Consumer Units","text":""},{"location":"2024-03-24-House-Electrics/#solar","title":"Solar","text":"<p>FoxESS inverter integration</p> <p>FoxESS - Modbus is forked from, and is newer than, FoxESS and Home Assistant integration via Modbus RS485</p> <p>Various Repositories</p> <p>Read out Foxess T-Series Inverter to Home Assistant by using ESPHome</p>"},{"location":"2024-03-24-House-Electrics/#tesla-battery","title":"Tesla Battery","text":"<p>Finder DIN Rail Power Relay, 20A Switching Current, 2NC, DPST 22.24.8.230.4000 AC 22.24.9.024.4000 24V DC Finder DIN Rail Power Relay, 230V ac Coil, 20A Switching Current, DPST Internet Connectivity and Plan Internet Connection for the Backup Gateway 2 Gateway Ethernet connection</p> <p>Is it possible to change the Powerwall IP address in Tesla Powerwall Integration</p> <p>I beleive that there is now less availabe, following firmware updates, than there once was</p> <p>Powerwall-Dashboard</p>"},{"location":"2024-03-24-House-Electrics/#leaf-battery","title":"Leaf Battery","text":"<p>Battery-Emulator Raspberry Pi version of Battery-Emulator</p> <p>Moving heavyweight items Engine Hoist Hire Turntable Truck with Pneumatic Tyres Hire All Terrain Pallet Truck Hire Large 4 Wheel Turntable Truck Turntable Trolleys Bad Boy All Purpose Trolley</p> <p>Battery Fires - key is containment and supresssion around the fire. It usually doesn't go out by itself because is supplies the fuel, oxidiser and gas required. Can explode.</p>"},{"location":"2024-03-24-House-Electrics/#diy-battery","title":"DIY Battery","text":"<p>Lots of useful stuff about Fox ESS H1 Fox ESS H1-5.0-E ~33KW Peugeot E208</p> <p>2-Channel Isolated CAN HAT for Raspberry Pi</p> <p>\"The FoxESS inverters support an Eastron SDM230 Modbus energy meter instead of the supplied CT clamp. This is connected on pins 1&amp;2 of the \"Meter/CT/RS485\" connector.</p>"},{"location":"2024-03-24-House-Electrics/#fox-ess","title":"Fox ESS","text":"<p>FoxESS - Modbus FoxESS V1 BMS protocol Solax/FoxESS V1 Hybrid/Fit/AC Can Bus Protocol Rust no_std CHAdeMO crate</p>"},{"location":"2024-03-24-House-Electrics/#safety","title":"Safety","text":"<p>Need overgloves to prevent puncturing</p> <p>Gloves - Insulated, Under &amp; Over https://alertelectrmimcal.com/electrical-equipment/circuit-protection/verso-circuit-protection/verso-main-switch-spd-consumer-unit.html</p>"},{"location":"2024-03-24-House-Electrics/#testing","title":"Testing","text":"<p>EICR walkthrough on a house</p>"},{"location":"2024-03-24-House-Electrics/#octopus","title":"Octopus","text":"<p>Agile Portal</p> <p>Octopus Energy APIs</p> <p>REST API Basics</p> <p>jq</p>"},{"location":"2024-03-24-House-Electrics/#power-monitoring","title":"Power Monitoring","text":"<p>Smart Meter changed to stop phantom drain with Tesla Powerwall 2</p>"},{"location":"2024-03-24-House-Electrics/#esp","title":"ESP","text":"<p>ESPhome CT Clamp Current Sensor</p> <p>Build your own CT Clamp Power and Energy Monitor with ESPHome with is assciated blog post ESPHome CT Clamp Power and Energy Monitor</p> <p>Mottram Labs CT Products</p> <p>Another power monitoring solution (UK) - Mottramlabs CT clamp board - Green board. That thread also covers the blue board which has some instructions here</p> <p>Unable to connect to wifi: Auth Expired and Association Expired with the issue on GitHub  Wifi not connected to the esp32 module. #2144 - Wifi power lowering fix</p> <p>```yaml</p> <p>wifi:   output_power: 8.5dB```</p> <p>MottramLabs.com CT Clamps</p> <p>ESP32 ADC \u2013 Read Analog Input in Arduino IDE</p> <p>ESP Answered What are the ADC input ranges?</p> <p>ESP32-C3 Series Datasheet</p> <p>Clamp Sensor Energy Monitoring - ESPHome in Home Assistant and https://github.com/willbob8/willsurridgetech/blob/master/clampSensor.yaml</p>"},{"location":"2024-03-24-House-Electrics/#raspberry-pi","title":"Raspberry Pi","text":"<p>Welcome to the Power Monitor for Raspberry Pi</p>"},{"location":"2024-03-24-House-Electrics/#solar_1","title":"Solar","text":"<p>Doncaster Cable</p> <p>Bird thing F3600 (not F5000) Inverter in toilet or bathroom or loft</p> <p>email addresss for UK Power networks: connections.gateway@ukpowernetworks.co.uk send them an amendment.</p> <p>General enquieries: 0800 0294285 </p> <p>GivTCP v2: GivEnergy and Home Assistant with Solar Forecast Automation and blog</p> <p>Earlier video using spreadsheets to show the value GivEnergy Giv-AC 3.0 Battery, Home Assistant and Solar Forecast Automation</p> <p>Solar Forecasing solcast</p> <p>TCP Modbus connection to MQTT/JSON for GivEnergy Battery/PV Invertors GivEnergy GivTCP</p> <p>fork of GivTCP</p> <p>25mm2 5 core 50m for the garage - 1 for earth, 2 for supply, 2 for pv 6945X BS5467 SWA PVC XLPE ARMOURED CABLE 5 CORE 25MM\u00b2 HARMONISED</p> <p>WALL MOUNT ENCLOSURES or </p> <p>Renusol - Instructions and data / Downloads</p> <p>Renusol - PV-Configurato</p> <p>GivEnergy All in One combined with existing solar PV</p> <p>GivEnergy resource hub</p> <p>GivEnergy Ltd, AIO, certificates</p> <p>Mixergy - Find an Approved Installer</p> <p>Sunamp Thermino hpPV</p> <p>VDV VALKPRO+ FLAT ROOF MOUNT and see ValkPro+ P10 East-West with ValkSolarFix</p> <p>Octopus Energy Unplugs MCS Certification for Solar Panel Installations</p> <p>Export Tariffs - Terms &amp; Conditions </p> <p>\"5.5 For solar, wind and micro-CHP generation assets, you should be able to demonstrate that the generation asset is suitably certified via:</p> <p>(i) the Microgeneration Certification Scheme (MCS) certification; or</p> <p>(ii) an equivalent certification scheme recognised by Octopus Energy (an equivalent</p> <p>scheme is a scheme accredited in accordance with EN 45011 or EN ISO/IEC</p> <p>17065:2012).\"</p> <p>\"5.8 Where you are unable to provide MCS or equivalent certification under clause 5.5, you confirm that you are satisfied that the generation asset has been installed by a competent professional and meets all required industry standards and guidelines. Octopus accepts no liability for any loss, damage or injury resulting from the installation.\"</p> <p>Ramsgate Road, Sandwich CT13 9FF United Kingdom T +44 (0)1304 897658 info@valksolarsystems.co.uk www.valksolarsystems.co.uk</p> <p>Find Out How Much Solar Power Your Home Can Generate (using the JRC PVGIS utility) </p> <p>PHOTOVOLTAIC GEOGRAPHICAL INFORMATION SYSTEM</p> <p>A study on how flow temperature affects performance, usage and comfort Money Saving Boiler Challenge: Supporting evidence October 2022</p> <ul> <li>Michael de Podesta has intersting videos, spreasheets, etc.</li> <li>Solar PV: Review of 2023</li> <li>The Economics of Home Solar PV \u00a310k invested returns 7.5%, assumes a smaller battery.</li> <li>Perfect Solar Days</li> <li>New Solar Panels</li> <li>First Winter with a Heat Pump</li> <li>A Year of Solar Energy</li> <li>Battery Day: First Results</li> </ul> <p>How I powered my house and charged two EVs for a whole year for just 1p per kWh my copy of his Solar for Download</p> <p>\"Tim &amp; Kat's Green Walk\" start exporting from May to September.</p> <p>Get monthy summaries from the Met Office's Blog - January's weather or the Warmest February on record for England and Wales press release for example.</p> <p>His consumption for heating vs my consumption varies from 4.4 times in the colder months to 6.1 times in the warmer months (5 times since he started heating overnight, like I do).</p> <ul> <li>The model below adjusted for, among other things, battery capacity Is it greener if I boost my heat pump during off-peak periods? - And save me money as well? my version of one of his spreadsheets Toy heat loss model - with carbon calculation - Intelligent Octopus Go</li> <li>A bunch of tests with different strategies: constant temp over 24 hours, on at 6am off at 8:30pm, differnt thermal mass, different temperatures, etc Should I boost my heat pump during off-peak periods? - Will it save me money? my version of his spreadsheet Toy heat loss model</li> <li>Solar stats update - August 2023 - bang on par with spreadsheet explanation, </li> <li>Octopus data analysis guide - with template spreadsheet my version of his spreadsheet Octopus data template</li> <li>Cosy Octopus vs Go - now with added solar my version of his spreadsheet Cosy Octopus vs. Go with Solar</li> <li>Should we switch to Cosy Octopus? - Or stick with Octopus Go? my version of his spreadsheet Cosy Octopus vs. Go</li> <li>Should I get a second home storage battery? It's spreadsheet time! my version of his spreadsheet HEAT Spreadsheet</li> </ul>"},{"location":"2024-03-24-House-Electrics/#tesla","title":"Tesla","text":"<ul> <li>Tesla releases API for solar, Powerwall systems, EV chargers</li> <li>Tesla API - Energy Endpoints</li> <li>Tesla Powerwall 2 - Local Gateway API documentation AgileBattery and AgileBattery: Tesla Powerwall and Octopus Energy Agile integration</li> </ul>"},{"location":"2024-03-24-House-Electrics/#fans","title":"Fans","text":""},{"location":"2024-03-24-House-Electrics/#heat-recovery-fans","title":"Heat Recovery Fans","text":"<p>Building Regulations Part F: Ventillation https://assets.publishing.service.gov.uk/media/61deba42d3bf7f054fcc243d/ADF1.pdf</p> <p>Minimum extract ventillation rates for continuous extract systems. Kitchen: 13 (above the fan below) Utility room: 8 (set to 9) Bathroom: 8 (set to 9) Sanitary accommodation: 6 (set to 6)</p> <p>Lo-Carbon Tempra SELV HTP Currently cheapest \u00a3203 from www.electrical2go.co.uk</p>"},{"location":"2024-03-24-House-Electrics/#simple-fans","title":"Simple Fans","text":"<p>Simply Silent DX100BS - 4\"/100mm Square Axial Extract Fan Standard</p>"},{"location":"2024-03-24-House-Electrics/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul>"},{"location":"2024-04-14-Plumbing/","title":"Plumbing","text":""},{"location":"2024-04-14-Plumbing/#plumbing","title":"Plumbing","text":"<p>Fine grained in home data from electricity meter, different from Octopus, Display and CAD - Smart meters</p> <p>Sink for toilet? AKW Navlin Wall Hung Corner Basin 470mm Wide - 1 Tap Hole</p> <p>Wolseley Compression Fittings Dimensions &amp; Working Parameters</p> <p>Pipe insulation and heat loss, need 20mm or more for large pipes Pipes - Insulated Heat Loss Diagrams</p> <p>eBus for the Vaillant Heat pump ebusd - eBUS daemon which uses eBUS Adapter Shield v5</p> <p>Helpful Vaillant Heat Pump info, came from Open Energy Monitor Forum Heat Pump Info</p> <p>Recording Multiple emonPi - nodeID on local emonCMS fixed to 8 and Multiple EmonTH and EmonPi</p> <p>OpenEnergyMonitor Heat Pump Monitor</p> <p>I didn't know what to look for before to add extra sensors. \"1/2 inch thermowell\" search on Amazon turns up a bunch of hits (\"1/2 inch thermowell ds18b20\" even turns up a few, there are a lot of counterfeit ds18b20 so buyer beware). Open energy monitor forum Heat Pump Experimentation App - Release News</p>"},{"location":"2024-04-14-Plumbing/#heat-pump-control","title":"Heat Pump Control","text":"<p>emonhp userid: pi password: see bitwarden</p> <p>Menu &gt; Installer level &gt; 000 &gt; System configuration Frost proect. delay -  OT constant heating: off Adaptive heat.curve: No Config heat.circ.: All Hybrid manager: Biv.point Heat.bivalence point: -20 C DHW bivalence point: -20 C Alternative point: off T.emergency mode: 25 C Energy supplier: HP off Auxiliary heeat for: Inactive Noise reduction operation: -  Buff.cyl.offs.: 0K System diagram: 8 Multi-funct.output 2: Not conn. Aux. heater output: off Multi-funct.Input 2: Not conn. HEATING1 ------ Type of circuit: Heating Maxlimit outs.temp: 17 Heating curve: 0.45 Minimum temperature: 20 C Maximum temperature: 45 C Auto Off mode: Set-back Room temp.mod.: None Cooling possible: No HOUSE ---- Zone activated: Yes Day temp.heating: 20.0C Set-back temp.heat.: 17.0C Zone assignment: Without DHW circuit ---- Cylinder: active Domestic hot water: 45 C // 45 for Sterling // 44 for Carol Anti-legionella day: off Cyl.boost hysteresis: 5.0K Cylinder boost offset: 3k // change to 3? Max.cyl.charg.time: 120min // 90min requires mostly 2 tank heat ups DHW req.anti-cy time: 60min // limit to just 1 tank heat up in normal mode Ch.pump overrun time: 5 min Parallel cyl.charging: off</p> <p>HW timing to be within the cheap electric periods: 5am to 7am and 1pm to 4pm. Same for battery. Need to change weekend times to be equal to day times before Mon-Sun active. Cylinder boost for long showers/bath 2 normal showers per cycle or 1 long shower or 1 bath (morning or early evening)</p> <p>Heat Loss and Air Change Rates (Ventialation)</p> <p>Air change rate calculation methods</p> <p>Measuring air change rates with CO2 sensors for heat pump heat loss calculation</p> <p>\"In the interim for those in less windy parts of the UK perhaps just using a figure such as 0.5-0.7 ACH and accepting that in rare events some form of hybrid heat may be needed\"</p> <p>\"very few days that get anywhere near 23K DT between the living room temp and outside\"</p> <p>\"I have a 30 year old prefab house with a moisture barrier, so my ACH when keeping windows closed is around 0.1 or less (CO2 half life in my living room is 8 hours). I\u2019m using CO2 sensors + notifications from Home Assistant to open the windows when air quality gets bad. This way I\u2019m also not blowing too much heat out the window. It will be interesting looking at wind speed and correlating it.\"</p> <p>\"For the heat loss surveys in Germany they (have to) assume 0.5 ACH if no measurements are available. That\u2019s also the value they have to target for designing ventilation systems for new houses. I already found 0.5 quite high since in the survey that accounts for around 30% of my heat loss. Seeing rates of 2 or higher seems crazy and it\u2019s no wonder that this might lead to oversized heat pumps.\"</p> <p>\"Electricity Used per Day = 36.4 + 1.25(wind speed) - 3.2(air temperature). This model has an r2 of 90% so nearly all variability in electrical energy used is accounted for.\"</p> <p>\" I changed to using \u201ceffective temp 1\u201d to compensate for the windy weather.\"</p> <p>Heat pump experiment review after two years and Effective Temp</p> <p>\"My old school ground source unit has the thermistor in a sealed box not exposed to air. (mechanical damping)</p> <p>Fridges used to do the same (sensor with a similar temperature response to a vegetable)\"</p>"},{"location":"2024-04-14-Plumbing/#zigbee","title":"Zigbee","text":"<p>Receive zigbee sensor data on emonPi</p>"},{"location":"2024-04-14-Plumbing/#heat-recovery","title":"Heat Recovery","text":"<p>Recoup</p> <p>Recoup WWHRS</p>"},{"location":"2024-04-14-Plumbing/#hot-water","title":"Hot Water","text":"<ul> <li>Hot Water Settings Energy Suppliers Don't Want You to Know!</li> <li>The three tiers of safety on all unvented cylinders</li> <li>How Unvented Hot Water Works</li> <li>Unvented Cylinder For Hot Water - Safety Controls - G3</li> <li>How Unvented Hot Water Cylinder Works - Plumbing Training Video</li> <li>How To Service An Unvented Hot Water Cylinder Roy Fugler</li> <li>How to re-pressurise a Tribune Xe or Ultrasteel Plus Unvented Cylinder</li> </ul> <p>techtalk live \"Unvented Hot water Safety and Control\"</p> <p>Range Tribune Xe 250l has low thermal losses (68W) and could use the solar version, indirect, which probably does heat transfer better. This is from Kingspan TXSN250ERP. Range Tribune Xe it costs about \u00a31,500 Range Tribune Xe Solar 300L Indirect Cylinder - TXSN300ERP from this place but might be cheaper elsewhere.</p>"},{"location":"2024-04-14-Plumbing/#central-heating-and-hot-water-wiring","title":"Central Heating and Hot Water Wiring","text":"<ul> <li>Central Heating Electrical Wiring - Part 1</li> <li>Central Heating Electrical Wiring - Part 2 - S Plan</li> <li>Central Heating Electrical Wiring - Part 3 - Y Plan</li> <li>Y Plan Heating with Unvented Hot Water Cylinder</li> </ul> <p>The rest of the playlist Central Heating Wiring</p>"},{"location":"2024-04-14-Plumbing/#external-solid-wall-insulation","title":"External Solid Wall Insulation","text":"<ul> <li> <p>Whole series on this, by a tradesman who does a good jobHow to do External Wall Insulation Project 3 part 1 Retrofitting a House. EWI,ETICS.</p> </li> <li> <p>External Wall Insulation Explained | FULL PROCESS REVEALED! and https://baumit.co.uk/courses</p> </li> <li>baumit from here</li> <li>Application and installation of an external wall insulation system</li> <li>Application and installation of an external wall insulation system</li> <li>How you can DIY External Wall Insulation on your house - complete guide</li> <li>EWI Store</li> <li>Application and installation of an external wall insulation system</li> <li>DIY Disaster Averted: My External Wall Insulation Saga</li> <li>cheap insulation</li> <li>40mm (probably less) meets need with a payback of less than 15 years, 70mm is better but has a longer payback Kingspan K5</li> <li></li> </ul>"},{"location":"2024-04-14-Plumbing/#pipes","title":"Pipes","text":"<ul> <li> <p>FITTING A NEW SOIL STACK, OUTSIDE TAP INSTALL ON A NEW-BUILD HOME &amp; DEALING WITH DAVE AT PLUMBASE</p> </li> <li> <p>Laying the 110mm plastic underground drainage pipes</p> </li> <li>Connecting to the live soil stack - new toilet (part 4)</li> <li>Gully repair and clay drain pipe hook-up (Renovation Part 12)</li> <li>Connecting In To A Cast Iron Soil Stack &amp; Fitting Yet Another Toilet</li> <li>First Fix Plumbing For A Downstairs Toilet &amp; How to Cut In a Branch To An Existing Soil Stack</li> <li> <p>Swept bend to keep flow high How to repair old drains!</p> </li> <li> <p>Lots of bits, mentions \"rest bend\" How To Repair Your Damaged Drains For Dummies!</p> </li> <li> <p>HOW TO: Install a Soil and Waste system | Drainage Sales</p> </li> <li>HOW TO: Connect PVC Drainage Pipe to Clay Pipes | Drainage Sales</li> <li>HOW TO: Connect Plastic Soil Pipe to Cast Iron or Asbestos Cement | Drainage Sales</li> <li>Long radius bend HOW TO: Install Underground Drainage With Floplast | Drainage Sales PRODUCT REVIEW: Drainage Rest Bend | Drainage Sales Drain Repair! #7</li> </ul> <p>Building Regs How to extend the Soil pipe.All pipes, boxes, cables,satelite must be extended.Never in the facade.</p> <p>FloPlast Soil</p> <p>https://promo.wavin.com/en-gb/wavin-osma-soil-and-waste</p>"},{"location":"2024-04-14-Plumbing/#pipe-bending","title":"Pipe Bending","text":"<p>28mm pipe bender hire CM35 Manual Pipe Bender (15mm, 22mm &amp; 28mm) Hire Looks like the former for 28mm pipe will be 114mm radius bend.</p> <p>Pipe bending How to bend metal conduit HOW TO BEND COPPER PIPE &amp; CONDUIT - OFFSET - PASSOVER - CROSSOVER 4 Pipe Bending Mistakes EVERYONE makes</p>"},{"location":"2024-04-14-Plumbing/#flow-and-pressure","title":"Flow and Pressure","text":"<p>I am designing my central heating (pipes, valves, emitters, cylinders) to a pressure drop budget that is given by the pump(s) in the heat source, and the flow rate of that source.</p> <p>Urban Plumbers - Design Heating System Pipework Like a Pro Unlocking Super Efficiency: Air Source Heat Pump Swap With Vaillant Arotherm Heat Pump Retrofit in a 1980s House: What's Involved?</p> <p>You should know pressure drop before designing equipment, more fundamental What happens when you mix different pressures? and remember that pressure is \"head\" not amount Pressure, head, and pumping into tanks</p> <p>Centrifugal pump sizing and selection in six easy steps</p> <p>Flow will take the path of least resistance.</p> <p>Pressure Drops in Series Circuits Pressure in Parallel Circuits How to Use System Pressure to Troubleshoot How to Use System Pressure to Troubleshoot</p> <p>Pressure Compensated Flow Control - Part 1 Pressure Compensated Flow Control - Part 2 Pressure Compensated Flow Control - Part 3</p> <p>Loss coefficients</p> <p>Description of Pipe Fittings Loss Calculations with K Factors Loss Coefficients: A Practical Guide for Engineers Pipe and Tube System Components - Minor (Dynamic) Loss Coefficients</p> <p>Tee, Flanged, Dividing Line Flow    0.2 Tee, Threaded, Dividing Line Flow   0.9 Tee, Flanged, Dividing Branched Flow    1.0 Tee, Threaded, Dividing Branch Flow 2.0 Union, Threaded 0.08 Elbow, Flanged Regular 90 o 0.3 Elbow, Threaded Regular 90 o    1.5 Elbow, Threaded Regular 45 o    0.4 Elbow, Flanged Long Radius 90 o 0.2 Elbow, Threaded Long Radius 90 o    0.7 Elbow, Flanged Long Radius 45 o 0.2 Return Bend, Flanged 180 o  0.2 Return Bend, Threaded 180 o 1.5 Globe Valve, Fully Open 10 Angle Valve, Fully Open 2 Gate Valve, Fully Open  0.15 Gate Valve, 1/4 Closed  0.26 Gate Valve, 1/2 Closed  2.1 Gate Valve, 3/4 Closed  17 Swing Check Valve, Forward Flow 2 Ball Valve, Fully Open  0.05 Ball Valve, 1/3 Closed  5.5 Ball Valve, 2/3 Closed  200 Diaphragm Valve, Open   2.3 Diaphragm Valve, Half Open  4.3 Diaphragm Valve, 1/4 Open   21 Water meter 7</p> <p>UNDERSTANDING MINOR LOSSES IN PIPE SYSTEMS: KEY FACTORS AND SOLUTIONS</p> <p>You pay a certain amount of pressure to get a certain flow Stop looking at pressure drop like this  and Liquid line sizing &amp; pumping downhill</p> <p>K.V. (Kv) \"The water flow in m3/h, at a pressure drop across the valve of 1 kgf/cm2 when the valve is completely open Flow coefficient</p> <p>This 28mm low loss 3 port valve has almost no pressure drop at 14 l/m Mut Meccanica Tovo SF 3-port diverting valve and Urban Plumbers describes it and see datasheet</p> <p>Use 28mm 2 port valves as they have a low pressure drop at 14 l/s 440 l/m.</p> <p>aroTherm Operating instructions p. 35 pressure/flow diagram ecofit pressure/flow diagram p.28 150 to 350 milli bar for 500 to 1100 l/h Pressure Drop calculations for pipes Water Flowing in Pipes - why size matters (1) Water Flowing in Pipes - real systems (2) Pressure drops and flow rates Flow-rate and pressure-drop Simulator</p> <p>15mm T and radiator valve = 5m on length (for each of flow, return)</p> <p>Hot Water Systems - Equivalent Length vs. Fittings Resistance PRESSURE LOSS FROM FITTINGS - EQUIVALENT LENGTH METHOD</p> <p>PICV Explained - Pressure Independent Control Valves (PICV) Devices for system balancing - valve with Venturi device, flow meter, autoflow, DP regulating valve Relief Valve Basics</p>"},{"location":"2024-04-14-Plumbing/#scaffolding","title":"Scaffolding","text":"<p>6.2 M Narrow Alloy Tower (1.8 M Deck) LEWIS Miniscaff Solo Tower Miniscaff Solo</p>"},{"location":"2024-04-14-Plumbing/#heat-pump-installation","title":"Heat Pump Installation","text":"<p>Air Source Heat Pump 1st Winter Performance in Solid Stone Welsh Cottage Heat Pump Retrofit In a Victorian House. Is It Even Possible? 500% Efficient Heat Pumps - Are They Real?</p> <p>System schematics for aroTHERM plus </p> <p>Vaillant Arotherm Firmware 351.06.07 Problems (Energy Integral) Heat Pump Installation Summary Weather Compensation Sizing and adjusting with Experience</p> <p>Take the EPC data / 2255 to get the size of heat pump. Heat Geek Design - \u00a3350 Octopus Energy - \u00a3500</p> <p>The importance of correct heat pump sizing The importance of flow rates Why We Don't Use Glycol Anti Freeze Valves (Basic Guide)</p> <p>Daikin Aberdeenshire Heat Pump Odyssey Part 3: Post Install Impressions, Operation and Performance:</p> <ul> <li>advanced user passcode 1234</li> <li>installer passcode 5678</li> </ul> <p>Aberdeenshire Heat Pump Odyssey Part 4a: How to acquire data from a Daikin Altherma Heatpump</p>"},{"location":"2024-04-14-Plumbing/#heat-pump-monitoring","title":"Heat Pump Monitoring","text":"<p>Heat Pump Experimentation App - Release News</p>"},{"location":"2024-04-14-Plumbing/#anti-freeze-valve","title":"Anti Freeze Valve","text":"<p>Fitting / Insulating and sealing antifreeze valves correctly search for 35mm fittings at bes</p>"},{"location":"2024-04-14-Plumbing/#radiator","title":"Radiator","text":"<p>For front room and outside toilet on landing Stelrad Vita Compact Vertical K2 compact vertical radiator 1800 x 600mm</p> <p>These are designed for 47 return temp, so will have to manually switch on fan (or use an automation)</p> <p>3kick80D quiestest Myson Kickspace 80D plinth heater White 3kick800 most powerfull Myson Kickspace 800 Hydronic Plinth Heater - 3KICK800</p>"},{"location":"2024-04-14-Plumbing/#underfloor-insulation","title":"Underfloor insulation","text":"<p>Roofing felt, insulation DEWALT 14MM 2-IN-1 TACKER - composite Thermally Upgrading Suspended Timber Floors with Natural Insulation Insulating A Suspended Timber Floor Insulating a Timber Joist Suspended Floor</p>"},{"location":"2024-04-14-Plumbing/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul>"},{"location":"2024-05-05-Rust-Data/","title":"rust-Data","text":""},{"location":"2024-05-05-Rust-Data/#rust-data","title":"rust-Data","text":""},{"location":"2024-05-05-Rust-Data/#introduction","title":"Introduction","text":"<p>Basics of representing data using Rust</p>"},{"location":"2024-05-05-Rust-Data/#excel","title":"Excel","text":"<p>An Excel/OpenDocument Spreadsheets file reader/deserializer, in pure Rust.</p>"},{"location":"2024-05-05-Rust-Data/#serde","title":"serde","text":"<p>serde &amp; serde Using Serde in Rust serde_with</p>"},{"location":"2024-05-05-Rust-Data/#datetime","title":"DateTime","text":"<p>chrono chrono_tz</p> <p>Deserializing optional date times with Serde</p>"},{"location":"2024-05-05-Rust-Data/#csv","title":"csv","text":"<p>csv CSV processing Rust's IO: Build a program that reads in a CSV file and performs operations such as sorting and filtering on the data.</p>"},{"location":"2024-05-05-Rust-Data/#serde_arrow","title":"serde_arrow","text":"<p>Docs: Fix examples in Readme and API docs Polars - DataFrames for the new era Polars user guide How to read compressed TSV files (*.gtf.gz) with rust-polars? arrow parquet arrow_csv</p>"},{"location":"2024-05-05-Rust-Data/#other","title":"Other","text":"<p>Group vector of structs by field Grouping similar elements in a Vector of Vector in Rust</p>"},{"location":"2024-05-05-Rust-Data/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"2024-05-05-Rust-Embedded/","title":"rust-Embedded","text":""},{"location":"2024-05-05-Rust-Embedded/#rust-embedded","title":"rust Embedded","text":""},{"location":"2024-05-05-Rust-Embedded/#update-from-301224","title":"Update from 30/12/24","text":"<p>This is the website for Jonathan 'theJPster' Pallant he does rust embedded stuff, like this Neotron Pico</p> <p>A fast and flexible allocator for no_std and WebAssembly</p>"},{"location":"2024-05-05-Rust-Embedded/#testing","title":"Testing","text":"<p>Test driven embedded rust \"In this tutorial we will set up an embedded development environment in rust that focuses on test driven development (TDD for short). TDD is especially useful for embedded systems, as testing the code on the target hardware is significantly more difficult than testing software written for the host device.\" using mockall - a powerful mock object library for Rust</p> <p>Comment out <code>target = \"thumbv7em-none-eabihf\"</code> in in the <code>[build]</code> section of <code>.cargo/config.toml</code>, so you will need to <code>cargo build --release --target=thumbv7em-none-eabihf</code> for cargo.</p> <p>Add </p> <pre><code>#![cfg_attr(not(test), no_main)]\n#![cfg_attr(not(test), no_std)]\n\n#[cfg(not(test))]\nuse panic_halt as _;\n</code></pre> <p>at the top of source files.</p> <p>Need to use mockall add <code>[dev-dependencies] mockall = \"0.13.1\"</code></p> <p>See also Mocking in Rust: Mockall and alternatives</p> <p>Rust Unit Testing - Mockall Crate</p>"},{"location":"2024-05-05-Rust-Embedded/#previously","title":"Previously","text":"<p>embassy-template \"Simple template to generate a embassy project for a few common boards. Make sure you've run cargo install cargo-generate before using.\"</p> <p>defmt book \"defmt (\"de format\", short for \"deferred formatting\") is a highly efficient logging framework that targets resource-constrained devices, like microcontrollers.\"</p>"},{"location":"2024-05-05-Rust-Embedded/#operating-system-development-tutorials-in-rust-on-the-raspberry-pi","title":"Operating System development tutorials in Rust on the Raspberry Pi","text":"<p>rust-raspberrypi-OS-tutorials</p>"},{"location":"2024-05-05-Rust-Embedded/#introduction","title":"Introduction","text":"<p>The guy that built JeeLabs's stuff, for exampe JeeNode JC's Logbook \"How do you make sure that all \u201creadings\u201d get logged, yet still retain the ability to adjust and extend the underlying database and software?\" The logic of data logging</p> <p>The improved version of JeeNode's communications chip was done by Low Power Lab To measure very low voltages or currents CurrentRanger</p> <p>see also Pi Pico</p> <ul> <li>Embassy is a project to make async/await a first-class option for embedded development.</li> <li> <p>Embedded Rust &amp; Embassy: GPIO Button Controlled Blinking</p> </li> <li> <p>Writing an OS in Rust </p> </li> <li>Discover the world of microcontrollers through Rust!</li> <li>MicroBit Schematic</li> <li> <p>Embedded Rust documentation</p> </li> <li> <p>Get-PnpDevice = Returns information about PnP devices.</p> </li> <li> <p>The Drogue IoT project aims to bring together data and users in an Internet of Things world.</p> </li> <li>Embedded development</li> <li> <p>rust-mqtt</p> </li> <li> <p>Introduction to Rust programming on bare metal hardware by Mike Kefeder - Rust Z\u00fcrisee March 2023</p> </li> <li>The Embedded Rust ESP Development Ecosystem (Embedded Developer)[https://blog.mark-stevens.co.uk/]</li> </ul>"},{"location":"2024-05-05-Rust-Embedded/#embedded-hals","title":"Embedded HALs","text":"<p>There appear to be at least 2 completely different HALs/APIs/ecosystems for supporting Raspberry Pi Picos. </p> <ul> <li>Embassy RP HAL implements both blocking and async APIs for many peripherals</li> <li>Rust support for the \"Raspberry Silicon\" family of microcontrollers</li> </ul> <p>These are not compatible, see Embassy-RP and RP2040-hal Compatibility? and Embassy-RP and RP2040-hal Compatibility?</p>"},{"location":"2024-05-05-Rust-Embedded/#rust-analyzer","title":"rust-analyzer","text":"<p>helix - Language Server Configurations :\"Everything under the rust-analyzer key goes under language-server.rust-analyzer.config key in helix\" </p> <p>From rust-analyzer manual</p> <p>\"rust-analyzer does not require Cargo. However, if you use some other build system, you\u2019ll have to describe the structure of your project for rust-analyzer in the rust-project.json format:\"</p>"},{"location":"2024-05-05-Rust-Embedded/#debugging","title":"Debugging","text":"<p>rtt</p> <p>only appears in debug compilation. There's also a function to send information back \"Reading\".</p> <pre><code>use rtt_target::{debug_rtt_init_print, debug_rprintln};\n\nfn main() -&gt; ! {\n    debug_rtt_init_print!(); // nop in --release\n    loop {\n        debug_rprintln!(\"Hello, world!\"); // not present in --release\n    }\n}\n</code></pre> <p>defmt (\"de format\", short for \"deferred formatting\") is a highly efficient logging framework that targets resource-constrained devices, like microcontrollers.</p>"},{"location":"2024-05-05-Rust-Embedded/#rust-toolchain-override-causes-rust-analyzer-language-server-to-exit","title":"rust toolchain override causes rust-analyzer language server to exit.","text":"<p>Github issue raised</p> <p>rust toolchain override causes rust-analyzer Language server to exit.</p> <p><code>rustup toolchain list</code>:</p> <pre><code>stable-x86_64-pc-windows-msvc (default)\n1.80-x86_64-pc-windows-msvc (override)\n</code></pre> <p><code>helix.log</code>:</p> <pre><code>2024-08-31T14:20:03.024 helix_lsp::transport [ERROR] rust-analyzer err &lt;- \"error: Unknown binary 'rust-analyzer.exe' in official toolchain '1.80-x86_64-pc-windows-msvc'.\\n\"\n2024-08-31T14:20:03.074 helix_lsp::transport [ERROR] rust-analyzer err: &lt;- StreamClosed\n2024-08-31T14:20:03.074 helix_lsp [ERROR] failed to initialize language server: server closed the stream\n</code></pre> <p><code>rust-toolchain.toml</code>:</p> <pre><code>[toolchain]\nchannel = \"1.80\"\ncomponents = [ \"rust-src\", \"rustfmt\", \"llvm-tools\" ]\ntargets = [\n    \"thumbv7em-none-eabi\",\n    \"thumbv7m-none-eabi\",\n    \"thumbv6m-none-eabi\",\n    \"thumbv7em-none-eabihf\",\n    \"thumbv8m.main-none-eabihf\",\n    \"riscv32imac-unknown-none-elf\",\n    \"wasm32-unknown-unknown\",\n]\n</code></pre> <p>VS Code works fine with this configuration, helix doesn't.</p>"},{"location":"2024-05-05-Rust-Embedded/#mitigation","title":"Mitigation","text":"<p>Start helix from a directory where the override isn't in effect to edit the desired file.</p>"},{"location":"2024-05-05-Rust-Embedded/#embassy-hals","title":"Embassy HALs","text":"<p>Discovery f0 has interesting peripherals but these need to be added (LD4 for an LED is the most prosaic)</p> <p>(Note: search command history with PowerShell <code>rg probe-rs $env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine</code>)</p> <p>For ST chips, might need to update firmware using STSW-LINK007</p> <p>need to adjust <code>.\\.cargo\\config.toml</code> runner command (find the chip with <code>probe-rs chip info nrf528</code> and might need to add the <code>--probe</code> parameter too with the USB ID)</p> <p>and flavours in <code>Cargo.toml</code> (e.g. for STM32 see <code>https://github.com/embassy-rs/embassy/blob/main/embassy-stm32/Cargo.toml</code>)</p> <p>microbit v2 microbit-bsp had to add \"\"--probe\" argument (find using <code>probe-rs info</code>). Also adapted the <code>embassy\\examples\\nrf52840</code> but I'm not sure the bsp is complete - compiles and is loaded but doesn't seem to do anything.</p>"},{"location":"2024-05-05-Rust-Embedded/#works","title":"Works","text":"<pre><code>rp2040\nCores (2):\n    - core0 (Armv6m)\n    - core1 (Armv6m)\nRAM: 0x20000000..0x20042000 (264.00 KiB)\nRAM: 0x21000000..0x21010000 (64.00 KiB)\nRAM: 0x21010000..0x21020000 (64.00 KiB)\nRAM: 0x21020000..0x21030000 (64.00 KiB)\nRAM: 0x21030000..0x21040000 (64.00 KiB)\nNVM: 0x10000000..0x18000000 (128.00 MiB)\n</code></pre> <pre><code>STM32F303RETx\nCores (1):\n    - main (Armv7em)\nRAM: 0x20000000..0x20010000 (64.00 KiB)\nNVM: 0x08000000..0x08080000 (512.00 KiB)\n</code></pre> <pre><code>nRF52833_xxAA\nCores (1):\n    - main (Armv7em)\nRAM: 0x20000000..0x20020000 (128.00 KiB)\nRAM: 0x00800000..0x00820000 (128.00 KiB)\nNVM: 0x00000000..0x00080000 (512.00 KiB)\nNVM: 0x10001000..0x10002000 (4.00 KiB)\n</code></pre> <pre><code>STM32F072RBTx\nCores (1):\n    - main (Armv6m)\nRAM: 0x20000000..0x20004000 (16.00 KiB)\nNVM: 0x08000000..0x08020000 (128.00 KiB)\n</code></pre> <pre><code>STM32F030R8Tx\nCores (1):\n    - main (Armv6m)\nRAM: 0x20000000..0x20002000 (8.00 KiB)\nNVM: 0x08000000..0x08010000 (64.00 KiB)\n</code></pre> <pre><code>STM32F051R8Tx\nCores (1):\n    - main (Armv6m)\nRAM: 0x20000000..0x20002000 (8.00 KiB)\nNVM: 0x08000000..0x08010000 (64.00 KiB)\n</code></pre> <p>blinky in debug will not fit, but --release will</p> <pre><code>stm32f302r8tx\nCores (1):\n    - main (Armv7em)\nRAM: 0x20000000..0x20004000 (16.00 KiB)\nNVM: 0x08000000..0x08010000 (64.00 KiB)\n</code></pre> <p>blinky --release works, --debug won't</p> <pre><code>stm32l031k6tx\nCores (1):\n    - main (Armv6m)\nRAM: 0x20000000..0x20002000 (8.00 KiB)\nNVM: 0x08000000..0x08008000 (32.00 KiB)\n</code></pre>"},{"location":"2024-05-05-Rust-Embedded/#stm32-flash-too-small","title":"STM32 flash too small","text":"<p>blinky --release overflowed:</p> <pre><code>= note: rust-lld: error: section '.bss' will not fit in region 'RAM': overflowed by 2388 bytes\nrust-lld: error: section '.uninit' will not fit in region 'RAM': overflowed by 3412 bytes\n</code></pre> <pre><code>stm32l011k4tx\nCores (1):\n    - main (Armv6m)\nRAM: 0x20000000..0x20000800 (2.00 KiB)\nNVM: 0x08000000..0x08004000 (16.00 KiB)\n</code></pre>"},{"location":"2024-05-05-Rust-Embedded/#testing_1","title":"Testing","text":"<p>This is tricky with embedded because <code>cargo test</code> uses <code>std</code> which doesn't exist for embedded. One way is to use custom_test_frameworks as noted in The Rust Unstable Book. There's a long blog entry on testing in \"Writing an OS in Rust\" by Philipp Oppermann.</p> <p>Other sources, How to test code when #![no_std] is set, How do I test crates with #![no_std]?, Testing for no_std compatibility in Rust crates and Nine Rules for Running Rust on Embedded Systems</p> <p>suggest either including <code>#![cfg_attr(not(test), no_std)]</code> at the top of the file or adding </p> <pre><code>#[cfg(test)]\nmod tests {\n    extern crate std;\n}```\n\nto the testing part.\n\n\n* Rule 1: Confirm that your project works with WASM WASI and WASM in the Browser.\n\n```rust\ncargo test --target wasm32-wasip1\ncargo test --target wasm32-unknown-unknown\n</code></pre> <ul> <li>Rule 2: Use target thumbv7m-none-eabi and cargo tree to identify and fix dependencies incompatible with no_std.</li> </ul> <pre><code>rustup target add thumbv7m-none-eabi\ncargo check --target thumbv7m-none-eabi\n# then\ncargo tree --edges no-dev --format \"{p} {f}\"\n</code></pre> <ul> <li>Rule 3: Mark main (non-test) code no_std and alloc. Replace std:: with core:: and alloc::.</li> <li>Rule 4: Use Cargo features to let your main code use std optionally for file-related (etc.) functions.</li> <li>Rule 5: Understand why test code always uses the standard library.</li> </ul> <pre><code># DOES NOT TEST `no_std`\ncargo test --no-default-features\n</code></pre> <p>\"Functions from std that are unavailable in a true no_std environment will still be accessible during testing.\"</p> <pre><code>#![cfg(test)]\n// imports required for testing\nuse std::prelude::v1::*;\nuse std::{format, print, println, vec};\n</code></pre> <ul> <li>Rule 6: Create a simple embedded test project. Run it with QEMU.</li> </ul>"},{"location":"2024-05-05-Rust-Embedded/#from-c-to-rust","title":"From C to Rust","text":"<ul> <li>C2Rust</li> <li>Citrus: Convert C to Rust</li> <li>Lessons learned porting C++ to rust</li> </ul>"},{"location":"2024-05-05-Rust-Embedded/#c2rust","title":"c2rust","text":"<p>For Arduino sketches, this consists of:</p> <ol> <li>Compile using arduino-cli</li> <li>cd to build directory <code>cd /tmp/arduino/sketches/EA070D50AE3989211800C04360BDAE60</code> for example</li> <li>inspect <code>compile_commands.json</code> using <code>bat compile_commands.json -r 1:35</code> for example</li> <li>rename .cpp to .c if required</li> </ol> <p>Then rounds of:</p> <ol> <li><code>c2rust transpile blink.c -- -I/home/jackc/.arduino15/packages/arduino/hardware/avr/1.8.6/cores/arduino</code></li> <li>remove current rust output e.g. <code>rm blink.rs</code></li> <li>Find missing includes: <code>fd pgmspace.h ~ -H</code> for example</li> <li>include them in new commmand.</li> </ol> <p>If you'd prefer to avoid <code>arduino-cli</code> then PlatformIO Core CLI is an alternative.</p>"},{"location":"2024-05-05-Rust-Embedded/#pi-pico","title":"Pi Pico","text":"<ul> <li>Raspberry Pi Pico Lecture 14: Introducing PIO</li> <li>Raspberry Pico: Programming with PIO State Machines</li> <li>A Practical Look at PIO on the Raspberry Pi Pico</li> </ul>"},{"location":"2024-05-05-Rust-Embedded/#rust","title":"rust","text":"<p>Embassy pio module embassy_rp::pio</p> <p>pio-rs note: \"you can call pio::assembler::new() and construct a pio program using the 'builder pattern' - effectively you are compiling a pio program at run-time on the rp2040 itself!\"</p> <p>Note that embassy includes it's own Pico specific HALs, etc</p> <p>pio-rs</p>"},{"location":"2024-05-05-Rust-Embedded/#links","title":"Links","text":""},{"location":"2024-05-05-Rust-General/","title":"rust-General","text":"","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#rust-general","title":"rust General","text":"","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#additions-from-18125","title":"Additions From 18/1/25","text":"<p>Blessed.rs \"an unofficial guide to the rust ecosystem\"</p> <p>RustyLine is a \"Readline implementation in Rust that is based on Antirez' Linenoise\" see Similar projects for other readline. noline \"is an IO-agnostic #[no_std] line editor providing robust line editing for any system. The core functiunality is IO-free, so it can be adapted to any system be it embedded, async, async embedded, WASM or IPoAC (IP over Avian Carriers).\"</p> <p>As good an argument for rust, from a security point of view, as I've seen The existential threat against C++ and where to go from here - Helge Penne - NDC TechTown 2024 along with this one Moving from C to Rust for embedded software development</p> <p>ProjectEuler, using computer science to explore maths, or vice versa?</p> <p>Clearly you can go to town on individual math problems, like Primes | A Software Drag Race. rust Prime Sieve, from with Dave's original Python Prime Sieve</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#update-from-271224","title":"Update From 27/12/24","text":"<p>just for all the things that <code>cargo</code> doesn't do. Deploy WASM/WASI to the cloud Fermyon Developer Home</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#update-12824","title":"Update 12/8/24","text":"<p>Plotters is a drawing library aimed to expedite the production of high-quality data visualization in Rust. DataFusion is a very fast, extensible query engine for building high-quality data-centric systems in Rust, using the Apache Arrow in-memory format. DataFusion originated as part of the Apache Arrow project. and DataFusion is an extensible query engine written in Rust  DataFusion Examples</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#packages-workspaces","title":"Packages, Workspaces","text":"<p>Nesting packages, workspaces How to deal with multiple nested workspace roots?</p> <p>start of quote</p> <p>With a layout like this</p> <pre><code>workspace root\n\u251c\u2500\u2500 Cargo.toml (workspace)\n\u251c\u2500\u2500 my_app (executable)\n|   \u2514\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 common_lib (lib, via submodule)\n|   \u2514\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 bigger_lib_repo (workspace, via submodule)\n    \u251c\u2500\u2500 Cargo.toml  (workspace)\n    \u251c\u2500\u2500 common_lib (lib, via submodule)\n    |   \u2514\u2500\u2500 Cargo.toml\n    \u2514\u2500\u2500 bigger_lib (lib, not a submodule)\n</code></pre> <p>With content looking like this</p> <pre><code># ./Cargo.toml\n[workspace]\n\nmembers = [\"app\"]\n\n# Important to avoid the multiple workspaces error\nexclude = [\"bigger_lib_repo\"]\n\n# Unsure if this is necessary\nresolver = \"2\"\n\n[patch.crates-io]\n# The common dep gets overridden for everybody here\ncommon_lib = { path = \"./common_lib\" }   \n</code></pre> <pre><code># ./my_app/Cargo.toml\n[package]\nname = \"my_app\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n# Note this isn't specced using a path\ncommon_lib = { version = \"0.1.0\" }\nbigger_lib = { version = \"0.1.0\", path = \"../bigger_lib_repo/bigger_lib\" }\n</code></pre> <pre><code># ./bigger_lib_repo/Cargo.toml\n[workspace]\n\nmembers = [ \"bigger_lib\" ]\n\nresolver = \"2\"\n\n[patch.crates-io]\n# Same as the root workspace\ncommon_lib = { path = \"./common_lib\" }\n</code></pre> <pre><code># ./bigger_lib_repo/bigger_lib/Cargo.toml\n[package]\nname = \"bigger_lib\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n# Note this isn't specced using a path\ncommon_lib = { version = \"0.1.0\" }\n</code></pre> <p>All other Cargo.toml files are not particularly different from what you'd expect.</p> <p>With this pattern I can</p> <ul> <li>Build the workspace root without issues</li> <li>Build the nested workspace root without issues</li> <li>Use publicly exported package members from nested libraries (ie: <code>bigger_lib::common_lib::MyStruct</code>)</li> </ul> <p>end of quote</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#learning","title":"Learning","text":"<p>use codewars select rust as the language, sort by \"Most Completed\". This is surprisingly useful because the various solutions offer a deeper insight into rust.</p> <p>Rust By Practice</p> <p>Exercises in programming style Exercises in Programming Style, 2nd Edition https://github.com/crista/exercises-in-programming-style Exercises in Prog Style, F#, The Burning Monk</p> <p>Concise talk on \"Type-Driven API Design in Rust\" by Will Crichton Building with types The Typestate Pattern in Rust. Let Get Rusty's video Improve your Rust APIs with the type state pattern. And No Boilerplate's Compiler-Driven Development in Rust video.</p> <p>List of Resources to learn Rust - Roadmap From Beginner to Advanced Level</p> <p>A Gentle Introduction To Rust</p> <p>Teach-rs is a university course for computer science students, introducing the Rust Programming Language, and is available for anyone who wants to teach Rust. Bart Massey: Embedded: Rust Education's Next Big Thing</p> <p>Effective Rust</p> <p>Parse, don\u2019t validate, Designing with types: Making illegal states unrepresentable and Make illegal states unrepresentable</p> <p>Moo-ving Data Efficiently: Exploring the Rust Cow 6 things you can do with the Cow \ud83d\udc04 in Rust \ud83e\udd80 Using Cow in Rust for efficient memory utilization</p> <p>You Should Really Know These Traits in Rust</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#error-handling","title":"Error Handling","text":"<ul> <li>For a general introduction to error handling see the book, see also the helpful Rust container cheat sheet for memory layouts.</li> <li>Details about the various <code>Result</code> error handling functions, including how to convert to and from various <code>Result</code> and <code>Error</code> combinations see Rust Error Handling Cheatsheet - Result handling functions</li> <li>For a detailed look at how Rust does io error handling see Study of std::Error, Error Handling in a Correctness-Critical Rust Project and library/std/src/io/error.rs with library/std/src/io/error/repr_unpacked.rs</li> <li>How Jeremy Chone does his Rust Error Handling - Best Practices</li> </ul>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#dyn-error","title":"dyn Error","text":"<p>The <code>dyn</code> keyword here is for Dynamic dispatch which \"is the process of selecting which implementation of a polymorphic operation (method or function) to call at run time\". Normally in rust we're trying to make everything static because it's quick and can be checked at compile time. In the case of errors, especially ones that are not going to be handled by the program itself, the runtime costs seem unimportant to me. Using Trait Objects That Allow for Values of Different Types and see Rust Powered Polymorphism \u26a1\ufe0f With Traits</p> <p>see this explanation from Jeremy</p> <p>To be able to use the <code>?</code> with for your functions requires that the returned error (say <code>MyOwnError</code>) <code>impl std::error::Error for MyOwnError {}</code>: that requires <code>Display</code> is implemented for <code>MyOwnError</code> and <code>Display</code> requires <code>Debug</code>. In practice, it is suggested that you use <code>Error</code> within your own module and not a custom name like <code>MyOwnError</code>. The function using <code>?</code> with your function will probably use <code>type Result&lt;T&gt; = core::result::Result&lt;T, Box&lt;dyn std::error::Error&gt;&gt;;</code> and thus itself return <code>Result&lt;T&gt;</code>.</p> <p>In addition, if you're converting errors to simple strings (using <code>map_err</code> for example) then you'll need to implement</p> <pre><code>impl From&lt;&amp;str&gt; for Error {\n    fn from(value: &amp;str) -&gt; Self {\n        Self::PassThrough(value.to_string())\n    }\n}\n</code></pre> <p>Where <code>PassThrough(String)</code> is one of <code>MyOwnError</code> enums.</p> <p>So at compile time, if I don't know the exact type but I do know that the type implements (a) specific trait(s) then I can use dynamic dispatch. Traits are boxed. If I do know the specific type(s) then I can implement generics or enums.</p> <p>How to manually return a Result&lt;(), Box&gt;? Help understanding return for Box \"For <code>Box&lt;dyn Error&gt;</code> (and its variants with <code>+ Send + Sync</code>), there are <code>From&lt;&amp;str&gt;</code> and <code>From&lt;String&gt;</code> implementations to convert strings into errors. And <code>v.into()</code> returns <code>From::from(v)</code> by default.\" dyn Trait Defining a Trait Using Trait Objects That Allow for Values of Different Types Trait objects What makes something a \"trait object\"? How do you actually use dynamically sized types in Rust? Trait Objects vs Generics in Rust","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#custom-error-static","title":"Custom Error, static","text":"<p>Green Tea Coding's video guide to make your custom errors fly!. He wrote a nice, broken, csv program to illustrate his video . How do you define custom <code>Error</code> types in Rust?</p> <p>For a concise example, see how the standard library does a custom error: std::str::FromStr along with how to implement a trait :-). Also A Simpler Way to See Results</p> <p>Insight into error handling Nom's error is referencing data owned by the calling function</p> <p>How hash.dev people were handing errors and why they wrote a blog describing their problems and announcing error-stack. See also Let's Get Rusty's video: Simple error handling in Rust</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#benchmarking-and-performance","title":"Benchmarking and Performance","text":"<p>The Rust Performance Book and a brief description of benchmarking.</p> <p>Memory allocations seems to be a bottleneck and algorithms can have a huge effect. Even allocating memory <code>with_capacity</code> can double system performance. Changing allocators definitely helps How to create a custom memory allocator in Rust but while it is less than the algorithm chosen, it measurably improves performance and is almost no effort, see this crate snmalloc-rs for bindings to <code>snmalloc</code>.</p> <p>\"changing various container arguments to slices, such as changing &amp;mut Vec arguments to &amp;mut [T]\" <p>For faster linking mold: A Modern Linker add this to <code>~/.cargo/config.toml</code>:</p> <pre><code>[build]\nrustflags = [\"-C\", \"link-arg=-fuse-ld=mold\"]\n</code></pre> <p>or set this environment variable <code>RUSTFLAGS=\"-C link-arg=-fuse-ld=mold\"</code>.Potentially <code>\"-C\", \"target-cpu=native\"</code> can help too.</p> <p><code>let r = o.ok_or_else(|| expensive()); // evaluates</code>expensive()<code>only when needed</code></p> <p>\"Iterator::collect converts an iterator into a collection such as Vec, which typically requires an allocation. You should avoid calling collect if the collection is then only iterated over again. For this reason, it is often better to return an iterator type like impl Iterator from a function than a Vec.\" <p>Are there better ways to do the same thing see String concatenations benchmarks (updated)</p> <p>Catch Performance Regressions in CI from bencher.dev which also has a benchmarking overview</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#some-specific-benchmarking-tools","title":"Some specific benchmarking tools","text":"<ul> <li>hyperfine is a command-line benchmarking tool.</li> <li>Criterion.rs is a statistics-driven micro-benchmarking tool. The most used benchmarking tool for rust - a haskell port. First released in 2017, most popular tool.</li> <li>Iai-Callgrind is a benchmarking framework/harness which uses Valgrind's Callgrind and other Valgrind tools like DHAT, Massif, ... to provide extremely accurate and consistent measurements of Rust code, making it perfectly suited to run in environments like a CI. Iai-Callgrind is integrated in Bencher.</li> <li>Divan is a Rust framework for quick comfy benchmarking. First released in 2023, #2 to Criterion on Lib.rs.</li> </ul> <p>For detailed profiling see My Current Pick of Rust Performance Optimization Tools</p> <p>For a good explanation of flame graphs see Flame Graphs Explained: Illuminate Performance Issues the Quick and Easy Way, python based but relevant for rust too.</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#newtype","title":"NewType","text":"<p>Newtype provides type safety and encapsulation through the use of a \"tuple struct\" with a single field.</p> <p>The data needs to be accessed either by indexing the tuple (i.e. <code>self.0</code>) or destructuring. See Rust By Example's New Type Idiom, repeated below.  </p> <pre><code>struct Years(i64);\n\nfn main() {\n    let years = Years(42);\n    let years_as_primitive_1: i64 = years.0; // Tuple\n    let Years(years_as_primitive_2) = years; // Destructuring\n}\n</code></pre> <p>See Tuple and tuple indexing expressions for tuple indexing. </p> <p>The Newtype Pattern in Rust Derive a bunch of traits on your own types, avoiding boilerplate code with derive_more From Rust Design Patterns' Newtype and also from Rust By Example's New Type Idiom</p> <p>See also: </p> <ul> <li>Using the Newtype Pattern to Implement External Traits on External Types </li> <li>Using Tuple Structs Without Named Fields to Create Different Types</li> <li>Using the Newtype Pattern for Type Safety and Abstraction</li> </ul> <p>\"If we wanted the new type to have every method the inner type has, implementing the Deref trait (discussed in Chapter 15 in the Treating Smart Pointers Like Regular References with the Deref Trait section) on the Wrapper to return the inner type would be a solution.\" from Using the Newtype Pattern to Implement External Traits on External Types</p> <p>But Is it considered a bad practice to implement Deref for newtypes? because everything of the underlying type will be visible. Perhaps not what you want. The answer has examples of good, bad and alternative implementation of traits of underlying types. See also \"Misuse the Deref trait to emulate inheritance between structs, and thus reuse methods\" Deref polymorphism</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#rust-based-system-tools","title":"Rust based System Tools","text":"<p>ripgrep is a line-oriented search tool diff - A syntax-highlighting pager for git, diff, grep, and blame output fd is a program to find entries in your filesystem.  bat - A cat(1) clone with wings.</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#introduction","title":"Introduction","text":"<ul> <li>currently This Week in Rust The Rustacean Station Podcast idiomatic-rust Idiomatic Rust: Resources And Learning Material</li> </ul> <p>Dioxus is a Rust library for building apps that run on ...</p> <p>rocket = A web framework for Rust</p> <p>Tokio is an asynchronous runtime for the Rust</p> <p>Pretty State Machine Patterns in Rust</p> <p>Fornjot is an early-stage CAD kernel, using boundary representation (b-rep), written in the Rust programming language.</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#gui-tui-command-line","title":"GUI, TUI, Command Line","text":"<p>Full Stack Rust with Leptos Using Rust and Leptos to build beautiful, declarative UIs</p> <p>egui - Rust - building a UI to plot a sensor value in real time egui (pronounced \"e-gooey\") is a simple, fast, and highly portable immediate mode GUI (IMGUI) library for Rust. The IMGUI paradigm Short video on IMGUI 15 Slide Presentation IMGUI Rusty_Art  based on nannou that uses egui. Via TimClicks' Pixelate an image in less than 50 lines of code - Learning Rust Creatively Building a GUI for my Tiling Window Manager in Pure Rust with egui and eframe | Part 1 Building cross-platform GUI apps in Rust using egui Ratatui is a Rust library for cooking up delicious text user interfaces Awesome Ratatui Command Line Argument Parser for Rust see also Command Line Applications in Rust</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#data-containers","title":"Data, Containers","text":"<p>Rust container cheat sheet</p> <p>Influx Monitoring Your Raspberry Pi System using InfluxDB Telegraf MQTT Producer Output Plugin Flight, DataFusion, Arrow, and Parquet: Using the FDAP Architecture to build InfluxDB 3.0 ZigBee@Linux: Getting Data from ZigBee Devices via MQTT to InfluxDB and Grafana</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#parsers","title":"Parsers","text":"<p>A tutorial on Winnow - The Winnow Way pest is a library for writing plain-text parsers in Rust. combine Fast parser combinator on arbitrary streams with zero-copy support Logos is a fast and easy to use lexer generator written in Rust.  LALRPOP is a parser generator Welcome to Nominomicon; a guide to using the Nom parser for great good. Nom Tutorial Parsing Text with Nom Parsing bitstreams with Nom Rust's nom as a streaming parser Parsing Text with Nom Implementing a Text-File Parser with nom Parsing in Rust with nom</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#concurrency","title":"Concurrency","text":"<p>tools for concurrent programming Rayon: data parallelism in Rust</p> <p>Grid Search on Large Language Models using Ollama and Rust</p>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-05-05-Rust-General/#unicode-strings-str-char-u8","title":"Unicode, Strings, str, char, u8","text":"<p>If you're trying to deal with individual characters, at some point a string (or &amp;str) will need to be decoded, iteratively, using either chars or char_indices. Lots of use of collections and note that the collection of characters is almost certainly going to be larger than the string (4 times larger for an UTF-8 encoded ASCII string).</p> <pre><code>#[allow(dead_code)]\nfn maskify(cc: &amp;str) -&gt; String {\n    let replace = cc.chars().count().saturating_sub(4);\n    if replace == 0 {\n        cc.to_string()\n    } else {\n        let (idx, _) = cc.char_indices().nth(replace).unwrap();\n        \"#\".repeat(replace) + &amp;cc[idx..]\n    }\n}\n\nmod tests {\n    use super::maskify;\n\n    #[test]\n    fn it_masks_example_strings() {\n        assert_eq!(maskify(\"4556364607935616\"), \"############5616\");\n        assert_eq!(maskify(\"1\"), \"1\");\n        assert_eq!(maskify(\"11111\"), \"#1111\");\n    }\n}\n</code></pre> <p>Why is capitalizing the first letter of a string so convoluted in Rust?</p> <p>For some examples of how this can handled see the source code of oh heck, a case conversion library and the archived, and mostly ascii based, Inflector</p> <p>Rust uses ut8 encoding for strings, etc, chars are u32 which is the size of Unicode Scalar Value. This isn't the same as a Code point: Any value in the Unicode codespace.. For some languages characters can be made up of several code points. Unicode\u00ae Standard Annex #29 </p> <p>\"A single Unicode code point is often, but not always the same as a basic unit of a writing system for a language, or what a typical user might think of as a \u201ccharacter\u201d. There are many cases where such a basic unit is made up of multiple Unicode code points. To avoid ambiguity with the term character as defined for encoding purposes, it can be useful to speak of a user-perceived character. For example, \u201cG\u201d + grave-accent is a user-perceived character: users think of it as a single character, yet is actually represented by two Unicode code points.\" Unicode\u00ae Standard Annex #29 </p> <p>Rust is going to try pretty hard to make sure that these are valid conversions. Strings convert to u8 (bytes) in very specific ways. Ways that include variable multi-byte encoding.</p> <p>How do I convert between String, &amp;str, Vec\\&lt;u8&gt; and &amp;[u8]</p> <pre><code>&amp;str    -&gt; String  | String::from(s) or s.to_string() or s.to_owned()\n&amp;str    -&gt; &amp;[u8]   | s.as_bytes()\n&amp;str    -&gt; Vec&lt;u8&gt; | s.as_bytes().to_vec() or s.as_bytes().to_owned()\nString  -&gt; &amp;str    | &amp;s if possible* else s.as_str()\nString  -&gt; &amp;[u8]   | s.as_bytes()\nString  -&gt; Vec&lt;u8&gt; | s.into_bytes()\n&amp;[u8]   -&gt; &amp;str    | s.to_vec() or s.to_owned()\n&amp;[u8]   -&gt; String  | std::str::from_utf8(s).unwrap(), but don't**\n&amp;[u8]   -&gt; Vec&lt;u8&gt; | String::from_utf8(s).unwrap(), but don't**\nVec&lt;u8&gt; -&gt; &amp;str    | &amp;s if possible* else s.as_slice()\nVec&lt;u8&gt; -&gt; String  | std::str::from_utf8(&amp;s).unwrap(), but don't**\nVec&lt;u8&gt; -&gt; &amp;[u8]   | String::from_utf8(s).unwrap(), but don't**\n</code></pre> <ul> <li>target should have explicit type (i.e., checker can't infer that) ** handle the error properly instead</li> </ul> <p>rust converting bytes chars and strings.</p> <pre><code>use std::str;\n\nfn main() {\n    // This is \"hello world\" as an array of bytes.\n    // You can also start from a byte string b\"hello world\" and debug print that to get the\n    // utf8 encoded decimal values\n    // b\"a string\" is only valid on ASCII\n    println!(\"hello byte string: {:?}\", b\"hello world\");\n\n    // OK so let's say you have an array of u8s\n    let array_of_u8 = [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100];\n\n    // [u8] to String (lossy)\n    // Any invalid bytes that are not utf8 will be replaced with\n    // the unicode replacement character '\\u{FFFD}'\n    // You get a Cow (Clone on Write) not exactly a String\n    let string_utf8_lossy = String::from_utf8_lossy(&amp;array_of_u8);\n    println!(\"string_utf8_lossy: {}\", string_utf8_lossy);\n\n    // [u8] to String (result)\n    // The non-lossy version needs a vec not an array\n    let mut vec_of_u8 = vec![];\n    vec_of_u8.extend_from_slice(&amp;array_of_u8);\n    let string_utf8_result = String::from_utf8(vec_of_u8).unwrap();\n    println!(\"string_utf8_result: {}\", string_utf8_result);\n\n    // [u8] to str (result)\n    let str_utf8_result = str::from_utf8(&amp;array_of_u8).unwrap();\n    println!(\"str_utf8_result: {}\", str_utf8_result);\n\n    // [u8] to str (lossy)\n    // There is no str::from_utf8_lossy. Have to use String::from_utf8_lossy\n    // [u8] to Vec&lt;char&gt;\n    // only valid for ASCII encodings?\n    let vec_of_chars: Vec&lt;char&gt; = array_of_u8.iter().map(|byte| *byte as char).collect();\n    println!(\"vec_of_chars: {:?}\", vec_of_chars);\n\n    // Vec&lt;char&gt; to Vec&lt;u8&gt;\n    let vec_of_u8s: Vec&lt;u8&gt; = vec_of_chars.iter().map(|c| *c as u8).collect();\n    println!(\"vec_of_u8s: {:?}\", vec_of_u8s);\n\n    // Vec&lt;char&gt; to String\n    let mut string_of_collected_chars: String = vec_of_chars.iter().collect();\n    println!(\"string_of_collected_chars: {}\", string_of_collected_chars);\n\n    // Now we have a mutable String. We can push chars\n    string_of_collected_chars.push('!');\n\n    // and we can push a str\n    string_of_collected_chars.push_str(\"!!\");\n\n    // String to str\n    let str_slice = &amp;string_of_collected_chars[..5];\n    println!(\"str_slice: {}\", &amp;str_slice);\n\n    // String to [u8]\n    let array_of_u8_from_string = string_of_collected_chars.as_bytes();\n    println!(\"array_of_u8_from_string: {:?}\", array_of_u8_from_string);\n\n    // String to Vec&lt;char&gt;\n    let vec_of_chars_to_string: Vec&lt;char&gt; = string_of_collected_chars.chars().collect();\n    println!(\"vec_of_chars: {:?}\", vec_of_chars_to_string);\n\n    // String from several Strings\n    let concat_strings = vec![\"abc\".to_string(), \"def\".to_string()].concat();\n    println!(\"concat_strings: {}\", concat_strings);\n    let joined_strings = vec![\"abc\".to_string(), \"def\".to_string()].join(\"---\");\n    println!(\"joined_strings: {}\", joined_strings);\n} \n</code></pre> <p>There are also these other functions, and probably more too.</p> <pre><code>std::str::from_utf8_unchecked\nstd::string::String::from_utf8\nString::from_utf8_lossy\n</code></pre> <p>Unicode support modules for Rust. unicode-rs this includes unicode-normalization, unicode-segmentation, unicode-width and unicode-xid</p> <p>use ripgrep to search a downloaded copy of the Unicode Character Database, the latest was 16 at the time of writing. There's a zip file of the complete database UCD.zip or an XML version ucd.all.flat.zip that should be extracted to use ripgrep on.</p> <ul> <li>https://example.com</li> </ul>","tags":["rust","programming","performance","error-handling","unicode"]},{"location":"2024-06-15-Open-Energy-Monitor-Emon/","title":"Open-Energy-Monitor-Emon","text":""},{"location":"2024-06-15-Open-Energy-Monitor-Emon/#open-energy-monitor-emon","title":"Open Energy Monitor Emon","text":""},{"location":"2024-06-15-Open-Energy-Monitor-Emon/#backup","title":"Backup","text":"<p>Python based Emoncms backup utility</p> <p>Download and install Python for Windows</p> <pre><code>cd \"$env:USERPROFILE\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\"\npip install requests\nz temp # zoxide\ncurl -L https://github.com/emoncms/usefulscripts/archive/refs/heads/master.zip -o master.zip\nmkdir useful\ncd useful\n7z x ..\\master.zip # 7-Zip\nhx .\\usefulscripts-master\\backup_py\\data_downloader.py # Helix editor\n# address is \"http://10.0.1.111\" # doesn't work with http://emonpi.local\n# change username and password\npython .\\usefulscripts-master\\backup_py\\data_downloader.py\nhx .\\usefulscripts-master\\backup_py\\convert_to_csv.py # change username\npython .\\usefulscripts-master\\backup_py\\convert_to_csv.py\n</code></pre> <p>Data file location: <code>/var/opt/emoncms</code></p> <p>files can be found in the \"username\" directory</p>"},{"location":"2024-06-15-Open-Energy-Monitor-Emon/#data-input-emonhub","title":"Data input, emonhub","text":"<p>The inspiration for some of emon's logging, from Jeelabs The logic of data logging</p> <p>EmonHubMqttInterfacer.py MQTT JSON Input with timestamp and suggestion to use in-built processing rather than input methods #788 Read smart meters (SML interface) with ESP and Tasmota and send data to emoncms Posting data - HTTP or MQTT API for MinimalModbus and EmonHubMinimalModbusInterfacer.py</p> <p>Interface to Vaillant Arotherm ebus via ESP ebus Receive zigbee sensor data on emonPi and MQTT JSON subscribe #198</p>"},{"location":"2024-06-15-Open-Energy-Monitor-Emon/#heat-monitor","title":"Heat Monitor","text":""},{"location":"2024-06-15-Open-Energy-Monitor-Emon/#heat-meter","title":"Heat Meter","text":"<p>Kamstrup temperature sensor \"TemperatureSensor 63\" data sheet and handbook are the most useful Kamstrup, Temperature Sensors Kamstrup, Nipples and Pockets Cheaper source of thermowells from automation24</p> <p>There are 2 kinds, pt100 and pt1000. pt1000 seems slightly cheaper.</p> <p>Adafruit PT1000 RTD Temperature Sensor Amplifier - MAX31865 Pt1000 immersion probe Compression fitting TiTEC KVG1/2-VA-VA-6.0 this is the 1/2 version, there's a 1/4 version ISO and IEC standards at reasonable prices</p>"},{"location":"2024-06-15-Open-Energy-Monitor-Emon/#firmware","title":"Firmware","text":"<p>AVR-DB Firmware</p>"},{"location":"2024-06-15-Open-Energy-Monitor-Emon/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul>"},{"location":"2024-08-04-Lathe-Milling/","title":"Lathe-Milling","text":""},{"location":"2024-08-04-Lathe-Milling/#lathe-milling","title":"Lathe-Milling","text":""},{"location":"2024-08-04-Lathe-Milling/#introduction","title":"Introduction","text":"<p>C3 Mini-Lathe Metalworking Beginners TouchDRO</p> <p>One source of cheaper tooling RDG Tools</p> <p>Working out change gear combinations Change Gears for Threading</p> <p>Lead screw upgrade Example for Warco Mini Lathe Threading Kits</p>"},{"location":"2024-08-04-Lathe-Milling/#materials","title":"Materials","text":"<p>Materials for use on hobby Mini-lathe</p>"},{"location":"2024-08-04-Lathe-Milling/#dro","title":"DRO","text":"<ul> <li>TouchDRO is the first of its kind tablet-based digital readout. Touch DRO</li> <li>Get sensors from here, you want the 5 micron ones \"M-DRO EH-05\" Machine DRO - M-DRO - Magnetic see Technical Information</li> </ul>"},{"location":"2024-08-04-Lathe-Milling/#levelling","title":"Levelling","text":"<p>DIY Laser levelling using webcam and laser level Machine to mill a flat surface on steel tube for mounting linear rails.</p>"},{"location":"2024-08-04-Lathe-Milling/#electronic-lead-screw","title":"Electronic Lead Screw","text":"<p>Clough42 Lathe Electronic Leadscrew Controller Wiring Everything Together</p> <ul> <li>Another version, explains why not Clough42 Arduino based Electronic leadscrew - First threads and Electronic Leadscrew v2 - for mini lathes</li> <li>STM32 - Electronic Leadscrew</li> <li>both of the above a variations of, or inspired by, Clough42 Lathe Electronic Leadscrew Controller which is mostly a turn key system.</li> <li>Didge - A Digital Gearbox</li> </ul> <p>Explanation of quadrature encoding, using the rotary encoder. Clough42 Electronic Leadscrew | First test . . . problems</p>"},{"location":"2024-08-04-Lathe-Milling/#toolpost-fixtures-drill-etc","title":"Toolpost fixtures, drill, etc","text":"<ul> <li> <p>Still being used now NewTool Post Drill Modification Use On Mini Lathe &amp; Myford Plus New Vice based on this one Home Made Toolpost Dremel Type Drill Myford/Mini Lathe Micro Milling note the use of a plate HOW TO REGRIND SPOT &amp; CENTER DRILLS PERFECTLY ON THE CHINESE MINI LATHE</p> </li> <li> <p>ER40 Collet Chuck Toolpost For Power Feed Drilling &amp; Slitting Saw Work manufacture of</p> </li> <li>with tapered roller bearings ER20 Collet Chuck Lathe Toolpost Drill With Tapered Roller Bearings updated with ER20 Lathe Toolpost Drill &amp; Mill Fixture. A Power Drill Milling Hack</li> <li>Preset Tools For Toolpost Drills &amp; Tailstock Myford &amp; Mini Lathe.</li> <li>My Toolpost Fixture Alignment Locking Screw Upgrade.</li> </ul>"},{"location":"2024-08-04-Lathe-Milling/#boring-head","title":"Boring Head","text":"<p>Using A Boring Head &amp; Angle Plate On The Lathe</p>"},{"location":"2024-08-04-Lathe-Milling/#suppliers","title":"Suppliers","text":"<p>Cheap plastics (Acetal) Sheet Plastics</p> <p>Smaller but well stocked Chronos Good selection RDG Tools Massive selection Cromwell</p> <p>UK Supplier of DRO Machine-DRO</p>"},{"location":"2024-08-04-Lathe-Milling/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"2024-08-17-Phase-Locked-Loop-PLL/","title":"Phase-Locked-Loop-PLL","text":""},{"location":"2024-08-17-Phase-Locked-Loop-PLL/#phase-locked-loop-pll","title":"Phase Locked Loop PLL","text":""},{"location":"2024-08-17-Phase-Locked-Loop-PLL/#introduction","title":"Introduction","text":"<p>Simplified Phase-locked Loop in C - previously Writing a Phase-locked Loop in Straight C</p> <p>PLL and FLL Designing and Simulating an Optimized Phase-Locked Loop Self-Tuning PLL: A New, Easy, Fast and Highly Efficient Phase-Locked Loop Algorithm Phase-Locked Loops: A Control Centric Tutorial Phase\u2010Locked Loops: System Perspectives and Circuit Design Aspects Frequency/Phase Detector - VHDL</p> <p>Phase Detector: digital, linear, mixer . . Simple and efficient algorithm to detect frequency and phase of a sine signal</p>"},{"location":"2024-08-17-Phase-Locked-Loop-PLL/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"2024-08-25-Arduino/","title":"Arduino","text":""},{"location":"2024-08-25-Arduino/#arduino","title":"Arduino","text":""},{"location":"2024-08-25-Arduino/#introduction","title":"Introduction","text":"<p>Arduino CLI provides all the features you can find in the Arduino IDE</p> <p>Examples</p> <pre><code>arduino-cli core update-index # udpate boards\narduino-cli board list # connected boards\n\narduino-cli core search leonardo # look for the leonardo board\narduino-cli core install arduino:avr # install the core for the leonardo based\n\narduino-cli config init # config file\narduino-cli config dump --verbose # find out where the file is\n</code></pre> <p>add this to the config file <pre><code>board_manager:\n  additional_urls:\n    - https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json\n</code></pre></p> <pre><code>git clone https://github.com/arduino/arduino-examples.git\narduino-examples/examples/01.Basics/Blink\narduino-cli compile --fqbn arduino:avr:micro Blink\n</code></pre> <p>Arduino ported to Raspberry Pi Pico Arduino core, for all RP2040 boards</p>"},{"location":"2024-08-25-Arduino/#links","title":"Links","text":""},{"location":"2024-08-26-LCD-1602-Pushbutton/","title":"LCD-1602-Pushbutton","text":""},{"location":"2024-08-26-LCD-1602-Pushbutton/#lcd-1602-pushbutton","title":"LCD 1602 Pushbutton","text":""},{"location":"2024-08-26-LCD-1602-Pushbutton/#introduction","title":"Introduction","text":"<p>I bought this Keypad Shield LCD 1602 Module Display Arduino ATMEGA328 ATMEGA2560 (E101) which references LCD1602KeyPad Github repository.</p> <p>It's based on \"HD44780 parallel interface chipset\" and this is Hitachi's datasheet</p> <p>Arduino has a tutorial for LCD displays like this and someone wrote a driver for the eBay item referenced above D1RobotLCDKeypadShieldArduinoUno. It appears to be a knock off of DF Robot's design</p> <p>Electropeak has a nice tutorial</p> <p>Someone wrote an Arduino library for the chipset and there's this recent rust embedded driver and an older rust library.</p> <p>For the Pi Pico the pin numbers are used as is (0, 1, etc) for A0..A3 reserved for analog.</p> <p>A sentence</p>"},{"location":"2024-08-26-LCD-1602-Pushbutton/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"2024-09-15-FreeCAD/","title":"FreeCAD","text":""},{"location":"2024-09-15-FreeCAD/#freecad","title":"FreeCAD","text":""},{"location":"2024-09-15-FreeCAD/#convert-pdf-to-image","title":"Convert pdf to image","text":"<p>inkscape for Linux and Windows</p> <pre><code>&amp; \"C:\\Program Files\\Inkscape\\bin\\inkscape.com\" --export-type=png --export-area-drawing -d 300 raspberry-pi-5-mechanical-drawing.pdf\n&amp; \"C:\\Program Files\\Inkscape\\bin\\inkscape.com\" --export-type=png -D -d 300 raspberry-pi-5-mechanical-drawing.pdf\n</code></pre> <p>Depending on the size of the object, might already be at 1:1 scale</p> <pre><code>--export-type=svg # svg gives the smallest most accurate conversion to vectors, assuming that it's not just a picture, but text is small, don't need dpi option\n-d 300 # 300 DPI is probably enough to be able to read text properly, without a massive file\n--export-background-opacity=0 # -y 0 # if there is a background, make it transparent\n-o only needed if you want a particular filename, otherwise it's the input filename with a different extension, doesn't work if the source is a PDF\n--export-overwrite\n--export-area-drawing # drawing area only\n--pages=1\n</code></pre>"},{"location":"2024-09-15-FreeCAD/#introduction","title":"Introduction","text":"<p>FreeCAD Electronic Enclosure Using Simple Parametric Design Techniques Use Macro EasyAlias to quickly and easily create aliases for cells in your spreadsheets.</p> <p>Useful videos RoadSide Maker FreeCAD Workflow - Model Reliability and the The Art of Overdoing It FreeCAD Link Branch and the Layout Sketch Workflow FreeCad - Modeling a Charger by tracing images</p>"},{"location":"2024-09-15-FreeCAD/#useful","title":"Useful","text":"<p>Adventures in creation FreeCAD for Beginners #1 - Download to First Model Quentin Plisson - Tutorials Basic Part Design Tutorial 019</p> <p>OffsetCAD FreeCAD 1.0.RC1 Step by step modelling part 2: STUDYCADCAM 3D model</p> <p>MangoJelly Solutions for FreeCAD</p>"},{"location":"2024-09-15-FreeCAD/#links","title":"Links","text":"<ul> <li>https://www.freecad.org/</li> <li>https://wiki.freecad.org/Main_Page</li> </ul>"},{"location":"2025-01-23-Miscellaneous-Links/","title":"Miscellaneous-Links","text":"","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#miscellaneous-links","title":"Miscellaneous Links","text":"","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#introduction","title":"Introduction","text":"<p>This document consolidates various links and resources that don't fit into specific technical categories. These are gathered from multiple link collections and organized by topic.</p>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#ai-and-machine-learning-services","title":"AI and Machine Learning Services","text":"<ul> <li>OpenAI</li> <li>Midjourney Documentation and User Guide</li> <li>Stability AI</li> <li>TLA+ Video Course - how to build correct computer systems</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#energy-and-home-monitoring","title":"Energy and Home Monitoring","text":"<ul> <li>Octopus Agile 2024</li> <li>UK wind, embedded wind, solar and demand forecast</li> <li>Energy Stats UK</li> <li>ELECTRIC INSIGHTS</li> <li>Power Monitor for Raspberry Pi</li> <li>6 Channel Energy Monitoring: emonTx V4 - Shop | OpenEnergyMonitor</li> <li>AppDaemon modules</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#home-improvement-and-construction","title":"Home Improvement and Construction","text":"","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#heat-pumps-and-heating","title":"Heat Pumps and Heating","text":"<ul> <li>Vaillant Arotherm Plus Heat Pump VRC720 SensoCOMFORT Settings</li> <li>Heat Pumps Cycling (switching on and off)</li> <li>Introduction to Open Source heat pump monitoring</li> <li>Heat Geek's Guide to Understanding Heat Loss Calculations</li> <li>Heat Pump Information</li> <li>Retrofitting Domestic Heat Pumps \u2013 methods and lessons from Ireland</li> <li>A mid terrace heat pump example (COP: 3.92)</li> <li>Energy Saving Tips \u2013 John Cantor Heat Pumps</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#waste-water-heat-recovery","title":"Waste Water Heat Recovery","text":"<ul> <li>Waste Water Heat Recovery Systems - Buy online</li> <li>Mira HeatCapture\u2122 | Heat Recovery System by Mira Showers</li> <li>Recoup Pipe HEX Installation Pack R-HEX-01 &amp; R-PA-02 heat exchanger and WWHR installation pack | Wolseley</li> <li>Power-Pipe X2-84</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#flooring-and-building-materials","title":"Flooring and Building Materials","text":"<ul> <li>Rapid Set DPM</li> <li>How To Waterproof A Garage | Tanking A Garage</li> <li>How to screed a floor - Insulation Superstore Help &amp; Advice</li> <li>Floor Screed: Types, Cost and How it's Applied | Homebuilding</li> <li>Double Glazed Units</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#roofing-and-solar","title":"Roofing and Solar","text":"<ul> <li>CS + solar panel mounting system for flat roofs - Renusol EN</li> <li>Renusol PV-Configurator</li> <li>Hampstead (Greater London) UK climate averages - Met Office</li> <li>Domestic roofs - Designing Buildings</li> <li>Engineered Wooden I Beam Joists Supplier | Harlow Bros</li> <li>Free UK Span Table for Rafters to BS 5268-7.5 (C16, 0.75 kN/m\u00b2 load, slope 15\u00b0 or more but less than 22.5\u00b0) - Timber Beam Calculator</li> <li>Rafter making and building a lean too roof</li> <li>Lean to type extension roof IN TIME LAPSE</li> <li>HOW TO MAKE A COMMON ROOF RAFTER | DIY Series | Build with A&amp;E</li> <li>Building the back lean-to roof (Self Build Extension Part 8)</li> <li>DIY Leka Insulated Conservatory Solid Tiled Roof DAY 1</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#timber-and-building-calculators","title":"Timber and Building Calculators","text":"<ul> <li>TIMBER BEAM CALCULATOR</li> <li>Span tables for roofing</li> <li>Timber Beam Calculator</li> <li>How to Design and Build a Flat Roof</li> <li>How to COST and BUDGET a house extension - Pricing document download EXPLAINED</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#thermal-imaging-and-diagnostics","title":"Thermal Imaging and Diagnostics","text":"<ul> <li>Thermal Imaging 101</li> <li>Thermal Imaging in HVAC: Theory &amp; Practice w/ Bill Spohn &amp; Eric Kaiser</li> <li>Delta T</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#workshop-and-making","title":"Workshop and Making","text":"","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#materials-and-supplies","title":"Materials and Supplies","text":"<ul> <li>Acetal Copolymer</li> <li>Acetal Rod | Direct Plastics Limited</li> <li>Aluminium Round Rod 50.8mm ( 2\" ) | metals4U</li> <li>How Much a Mill Weighs and How to Move it (+Videos) \u2013 Make It From Metal</li> <li>Bridgeport Milling Machines</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#tools-and-systems","title":"Tools and Systems","text":"<ul> <li>UJK Parf Mk II Guide System | Axminster Tools</li> <li>DRO Scale Selection Guide</li> <li>Magnetic Tape For Linear Measurement Applications</li> <li>Friction Loss Calculator | Line Loss Calculator</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#3d-printing","title":"3D Printing","text":"<ul> <li>Filament Spool Switcher &amp; Winder if you use AMS</li> <li>Bed sheet for 3D printers Garamond, EPOXY 4W/EP SHEET</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#maritime-and-sailing","title":"Maritime and Sailing","text":"","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#navigation-and-equipment","title":"Navigation and Equipment","text":"<ul> <li>Stellarium Astronomy Software</li> <li>Skyfield \u2014 documentation</li> <li>Travels in the Sahara - Navigation Equipment -</li> <li>David Burch Navigation Blog</li> <li>Starpath School of Navigation Title Page</li> <li>Instructions for the use of the Long Term Almanac</li> <li>Time and frequency GPS transfer service - NPL</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#surveying-and-levels","title":"Surveying and Levels","text":"<ul> <li>Step-by-Step Guide to Dumpy Level Survey</li> <li>Two-Peg Test: How to Determine the Accuracy of Your | Onsite Installer</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#racing-and-training","title":"Racing and Training","text":"<ul> <li>Jeff Stine Sailing - Sail2WIN Watch App</li> <li>Sailboat Race Analysis \u2013 Improve Performance with Data - SailZing</li> <li>RYA Yachtmaster Ocean Exam</li> <li>Arranging your exam | RYA Certificates of Competence</li> <li>STCW 95/10: 5-Day Basic Training Package (MCA Approved) | Seahaven Maritime Academy</li> <li>Thames Boat Training - RYA Diesel Engine Course</li> <li>raceQs | GETTING STARTED</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#mini-transat-racing","title":"Mini Transat Racing","text":"<ul> <li>Hire Structure Pogo 2 in La Rochelle - Click&amp;Boat</li> <li>Charter Structure Pogo 2 in La Rochelle - Click&amp;Boat</li> <li>The Pogo2 - a Production class</li> <li>Mini Fastnet | Organization Winches Club</li> <li>Individual boat histories</li> <li>Pogo 2 history</li> <li>Committee Members - SOLO Offshore Racing Club</li> <li>Mini Transat - where to start? | YBW Forum</li> <li>Boats for sale</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#boat-building-projects","title":"Boat Building Projects","text":"<ul> <li>Paperjet 15</li> <li>Building Shackleton (Scamp #268) | A landlocked Idaho boy attempts to build a sailboat</li> <li>Building Hagoth (#433) a 12' Proper Sailing Vessel \u2013 Page 23 \u2013 The Scamp Micro Cruiser from Small Craft Advisor</li> <li>The Building of Northern Cross, a Skiff America Design and other Cool Stuff | Family Adventures, Gear Reviews and the Musings of a Mad Man.</li> <li>Building A SCAMP Sailboat</li> <li>The Unlikely Boat Builder</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#sports-and-recreation","title":"Sports and Recreation","text":"","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#cross-country-skiing","title":"Cross Country Skiing","text":"<ul> <li>cross-country ski poles / roller ski poles from KV+, Leki &amp; Salomon</li> <li>rollerski spares - Marwe, Swenor, SkiSkett, PSI, Skirollo, KV+</li> <li>Ski Race Holidays</li> <li>Skisporet - Live preppestatus av skil\u00f8yper</li> <li>Sjusj\u00f8en Weather</li> <li>Series 2 Sportube Ski Case</li> <li>Calendar - Worldloppet</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#cycling","title":"Cycling","text":"<ul> <li>CC London - Independent cycling club</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#gaming","title":"Gaming","text":"","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#game-resources","title":"Game Resources","text":"<ul> <li>Astroneer Speedrun guide</li> <li>Defender</li> <li>Gaming Tutorials</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#capture-and-media","title":"Capture and Media","text":"<ul> <li>The best capture cards for 2023: Xbox, PlayStation, and PC | Digital Trends</li> <li>HDMI Capture on the Raspberry Pi \u2013 j2i.net</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#social-media-and-communication","title":"Social Media and Communication","text":"","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#fediverse","title":"Fediverse","text":"<ul> <li>How To Use Mastodon and the Fediverse: Basic Tips | Fedi.Tips \u2013 An Unofficial Guide to Mastodon and the Fediverse</li> <li>Pixelfed - Decentralized social media</li> <li>What is the Fediverse? | Grow Your Own Services</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#email-and-communication","title":"Email and Communication","text":"<ul> <li>The Mutt E-Mail Client</li> <li>GitHub - ork/mutt-office365: A mutt configuration file ready for Office 365</li> <li>Office365 Mutt configuration</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#development-and-productivity","title":"Development and Productivity","text":"","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#statistics-and-data","title":"Statistics and Data","text":"<ul> <li>Introductory Statistics</li> <li>How to Calculate &amp; Plot a CDF in Python</li> <li>Apache Arrow</li> <li>Data types in Arrow and R</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#shell-and-command-line","title":"Shell and Command Line","text":"<ul> <li>The Definitive Guide to Bash Command Line History</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#backup-and-storage","title":"Backup and Storage","text":"<ul> <li>Portable Photo Backup Options for Travelers</li> <li>Little Backup Box</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#git-and-version-control","title":"Git and Version Control","text":"<ul> <li>Git scraping: track changes over time by scraping to a Git repository</li> <li>Merging vs. Rebasing | Atlassian Git Tutorial</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#cad-and-graphics","title":"CAD and Graphics","text":"<ul> <li>CadQuery is an intuitive, easy-to-use Python module for building parametric 3D CAD models</li> <li>CadQuery GUI editor based on PyQT supports Linux, Windows and Mac.</li> <li>This repository contains utility classes and functions to extend the features and capabilities of the CadQuery python library</li> <li>View CadQuery objects in JupyterLab or in a standalone viewer for any IDE</li> <li>Learn Autodesk Fusion 360 in 30 Days for Complete Beginners!</li> <li>GitHub - bernhard-42/jupyter-cadquery: An extension to render cadquery objects in JupyterLab via pythreejs</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#electronics-projects","title":"Electronics Projects","text":"<ul> <li>Designing and Simulating EMC Filters with LTspice</li> <li>QDX - Digital Transceiver QRP Labs</li> <li>Overlay FS on Raspberry Pi</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#docker-and-containers","title":"Docker and Containers","text":"<ul> <li>Traefik &amp; Docker</li> <li>Pi-Hosted: hosting using Docker and Portainer on the Raspberry Pi.</li> <li>nginx reverse proxy</li> <li>Linux handbook nginx reverse proxy</li> <li>Automated Nginx Reverse Proxy for Docker</li> <li>nginx-proxy sets up a container running nginx</li> <li>docker-gen</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#legal-and-licensing","title":"Legal and Licensing","text":"<ul> <li>The MIT License, Line by Line \u2014 /dev/lawyer</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#books-and-educational-resources","title":"Books and Educational Resources","text":"<ul> <li>Green Tea Press \u2013 Free books by Allen B. Downey</li> <li>Browse Standard Ebooks - Standard Ebooks: Free and liberated ebooks, carefully produced for the true book lover.</li> <li>LET'S BUILD A COMPILER!</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#media-and-entertainment","title":"Media and Entertainment","text":"<ul> <li>The best Netflix sci-fi movies and TV shows 2023 | Stuff</li> <li>Strobist: On Assignment: Margo Seibert</li> <li>Wild Ambience Nature Sounds</li> <li>HINDENBURG PRO podcasting &amp; radio production</li> <li>Geek Out podcast</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#specialized-tools-and-apps","title":"Specialized Tools and Apps","text":"<ul> <li>PixelStick - Mac App To Measure Pixel, Angle, Color Onscreen</li> <li>libimobiledevice \u00b7 A cross-platform FOSS library written in C to communicate with iOS devices natively.</li> <li>Best practices for SSD removal from compatible Surface devices</li> <li>Surface Laptop 3 / Laptop 4 Service Guide</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#color-schemes-and-themes","title":"Color Schemes and Themes","text":"<ul> <li>Not a theme, but a framework for building themes using a base of sixteen colours</li> <li>base16-windows-terminal</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#health-and-wellness","title":"Health and Wellness","text":"<ul> <li>The Night Watchman Theory for ADHD Symptoms</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#clothing-and-fashion","title":"Clothing and Fashion","text":"<ul> <li>Slim-Fit 'A Suit To Travel In' Trousers</li> <li>Mens Alterations London - Men's Tailor - Alterations Boutique</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#shipping-and-logistics","title":"Shipping and Logistics","text":"<ul> <li>Pallet Delivery | Send pallets UK &amp; Europe | PalletOnline</li> <li>Size and Weight Allowances</li> <li>Home Page - Default Store View</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Miscellaneous-Links/#miscellaneous-equipment-and-parts","title":"Miscellaneous Equipment and Parts","text":"<ul> <li>Parts for my LifeCycle</li> <li>Everbuild Technique Hybriflex 480 - Joints &amp; Perimeters | Sika UK | Expansion Joints &amp; Perimeter Seals</li> <li>Shopping Cart | VEVOR UK</li> </ul>","tags":["links","resources","miscellaneous","tools","home-improvement","sailing","games","energy"]},{"location":"2025-01-23-Python-General-Resources/","title":"Python-General-Resources","text":"","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#python-general-resources","title":"Python General Resources","text":"","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#introduction","title":"Introduction","text":"<p>A comprehensive collection of Python resources covering various aspects of Python development, from testing and data visualization to web frameworks and scientific computing.</p> <p>For focused resources on testing frameworks and fake data generation, see Python Fake Data and Testing.</p>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#advanced-testing","title":"Advanced Testing","text":"<ul> <li>Quick start guide -- Hypothesis 6.70.0 documentation</li> <li>Mocks Aren't Stubs</li> <li>Test doubles - the difference between stubs and mocks</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#extended-fake-data-resources","title":"Extended Fake Data Resources","text":"<ul> <li>Welcome to Faker's documentation! -- Faker 17.6.0 documentation</li> <li>A Quick Guide to Generating Fake Data with Pandas | Caktus Group</li> <li>Generating fake data with pandas, very quickly</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#data-visualization","title":"Data Visualization","text":"<ul> <li>Effectively Using Matplotlib</li> <li>Users guide -- Matplotlib 3.7.1 documentation</li> <li>seaborn: statistical data visualization -- seaborn 0.12.2 documentation</li> <li>Matplotlib</li> <li>Seaborn</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#types-and-validation","title":"Types and Validation","text":"<ul> <li>Welcome to mypy documentation!</li> <li>Pydantic</li> <li>Getting started - mypy 1.1.1 documentation</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#performance","title":"Performance","text":"<ul> <li>Introduction to the Numba library</li> <li>Speed Up your Algorithms Part 2-- Numba</li> <li>Numba documentation -- Numba 0.56.4+0.g288a38bbd.dirty-py3.7-linux-x86_64.egg documentation</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#finance-and-monte-carlo","title":"Finance and Monte Carlo","text":"<ul> <li>Monte Carlo Tests</li> <li>Quantitative Economics with Python \u2013 QuantEcon</li> <li>Quantitative Economics with Python -- Quantitative Economics with Python</li> <li>Monte Carlo Simulation with Python - Practical Business Python</li> <li>Python for Finance: Risk and Return - Learn Python With Rune</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#development-tools","title":"Development Tools","text":"<ul> <li>How to set up a perfect Python project</li> <li>pipx -- Install and Run Python Applications in Isolated Environments</li> <li>GitHub - charliermarsh/ruff: An extremely fast Python linter, written in Rust.</li> <li>Practical Business Python -</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#web-frameworks","title":"Web Frameworks","text":"<ul> <li>FastAPI</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#documentation","title":"Documentation","text":"<ul> <li>MkDocs</li> <li>Material for MkDocs</li> <li>Blog support just landed - Material for MkDocs</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#scientific-computing","title":"Scientific Computing","text":"<ul> <li>1. Getting started with Python for science -- Scipy lecture notes</li> <li>Introduction -- SciPy v1.10.1 Manual</li> <li>Randomized Designs -- pyDOE 0.3.6 documentation</li> <li>pyDOE: The experimental design package for python -- pyDOE 0.3.6 documentation</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#astronomy","title":"Astronomy","text":"<ul> <li>Skyfield - Elegant Astronomy for Python</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#game-development","title":"Game Development","text":"<ul> <li>Creating Pac-Man clone in Python in 300 lines of code or less-- Part 1</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#machine-learning","title":"Machine Learning","text":"<ul> <li>GitHub - zotroneneis/machine_learning_basics: Plain python implementations of basic machine learning algorithms</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#parsing","title":"Parsing","text":"<ul> <li>Getting started - Arpeggio</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#educational-resources","title":"Educational Resources","text":"<ul> <li>learnbyexample - Python</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-01-23-Python-General-Resources/#embedded-python","title":"Embedded Python","text":"<ul> <li>GitHub - pfalcon/pycopy-lib: Standard library of the Pycopy project, minimalist and light-weight Python language implementation</li> </ul>","tags":["python","testing","fake-data","development","data-science","web-development"]},{"location":"2025-02-08-AI-Coding/","title":"AI-Coding","text":"","tags":["ai","coding","programming","tools"]},{"location":"2025-02-08-AI-Coding/#ai-coding","title":"AI Coding","text":"<p>new stuff - delete me</p>","tags":["ai","coding","programming","tools"]},{"location":"2025-02-08-AI-Coding/#introduction","title":"Introduction","text":"<p>The best video, as of the beginning of 2025, by an AI industry insider:  Deep Dive into LLMs like ChatGPT</p> <p>His links:</p> <ul> <li>FineWeb: decanting the web for the finest text data at scale</li> <li>Tiktokenizer</li> <li>Transformer Neural Net 3D visualizer</li> <li>llm.c Let's Reproduce GPT-2</li> <li>Llama 3 paper from Meta</li> <li>Hyperbolic, for inference of base model</li> <li>InstructGPT paper on SFT</li> <li>HuggingFace inference playground</li> <li>DeepSeek-R1 paper</li> <li>TogetherAI Playground for open model inference</li> <li>Mastering the Game of Go without Human Knowledge</li> <li>Lee Sedol vs AlphaGo Move 37 reactions and analysis</li> <li>Chatbot Arena (formerly LMSYS): Free AI Chat to Compare &amp; Test Best AI Chatbots</li> <li>AI News</li> <li>LM Studio</li> </ul> <p>The visualization UI I was using in the video The specific file of Excalidraw we built up Discord channel for Eureka Labs and this video:   / discord  </p> <ul> <li>Comparison of AI Models across Intelligence, Performance, Price | Artificial Analysis</li> <li>Here\u2019s how I use LLMs to help me write code</li> </ul>","tags":["ai","coding","programming","tools"]},{"location":"2025-02-08-AI-Coding/#web-scraping","title":"Web Scraping","text":"<ul> <li>Subscription Plans | Supadata for Web and YouTube Transcripts</li> </ul> <p>Apparently, it's best to convert sites to markdown. As of early 2025 Crawl4AI: Open-Source LLM-Friendly Web Crawler &amp; Scraper seems to be the most used tool.</p> <p>Web scraping \"Web scraping, web harvesting, or web data extraction is data scraping used for extracting data from websites.[1] Web scraping software may directly access the World Wide Web using the Hypertext Transfer Protocol or a web browser. While web scraping can be done manually by a software user, the term typically refers to automated processes implemented using a bot or web crawler. It is a form of copying in which specific data is gathered and copied from the web, typically into a central local database or spreadsheet, for later retrieval or analysis.\"</p> <p>Introduction to robots.txt</p> <p>\"A <code>robots.txt</code> file tells search engine crawlers which URLs the crawler can access on your site. This is used mainly to avoid overloading your site with requests; it is not a mechanism for keeping a web page out of Google. To keep a web page out of Google, block indexing with noindex or password-protect the page.\"</p> <p>Build and submit a sitemap <code>sitemap.xml</code> \"The XML sitemap format is the most versatile of the supported formats. Using the Google supported sitemap extensions, you can also provide additional information about your images, video, and news content, as well as the localized versions of your pages.\"</p> <p>What are Sitemaps \"What are Sitemaps? Sitemaps are an easy way for webmasters to inform search engines about pages on their sites that are available for crawling. In its simplest form, a Sitemap is an XML file that lists URLs for a site along with additional metadata about each URL (when it was last updated, how often it usually changes, and how important it is, relative to other URLs in the site) so that search engines can more intelligently crawl the site.</p> <p>Web crawlers usually discover pages from links within the site and from other sites. Sitemaps supplement this data to allow crawlers that support Sitemaps to pick up all URLs in the Sitemap and learn about those URLs using the associated metadata. Using the Sitemap protocol does not guarantee that web pages are included in search engines, but provides hints for web crawlers to do a better job of crawling your site.\"</p>","tags":["ai","coding","programming","tools"]},{"location":"2025-02-08-AI-Coding/#ai-assisted-programming","title":"AI Assisted Programming","text":"<ul> <li>Here\u2019s how I use LLMs to help me write code</li> <li>AI tools for software engineers, but without the hype \u2013 with Simon Willison (Co-Creator of Django) - YouTube</li> <li>Rob Shocks - YouTube</li> <li>Master Cursor AI App Development With These Simple Rules! - YouTube</li> <li>Github Copilot Agent vs Cursor AI Which is BEST for Coding - YouTube</li> <li>Full Stack App Build Claude 3.7 &amp; Cursor AI - YouTube</li> <li>Cursor AI &amp; Replit Connected - Build Anything - YouTube</li> <li>Cursor AI The Cheat Sheet Tutorial - YouTube</li> <li>Clone Any App Design Effortlessly with Cursor AI - YouTube</li> <li>Cursor Directory - Cursor Rules &amp; MCP Servers</li> <li>bilal77511/custom-models-in-cursor-IDE</li> <li>Cursor \u2013 Custom API Keys</li> <li>GitHub Copilot: The agent awakens - The GitHub Blog</li> <li> <p>Terminal Chat | Microsoft LearnMost popular languages:</p> </li> <li> <p>Income stream surfers - YouTube</p> </li> <li>Siraj Raval - YouTube</li> <li>Julian Goldie SEO - YouTube</li> </ul> <p>GitHut 2.0</p> <p>The RedMonk Programming Language Rankings: June 2024</p> <p>Based on the above, I'll be investing my \"AI\" programming effort into:</p> <ol> <li>Python</li> <li>JavaScript (including <code>css</code> and <code>html</code>), see w3schools. Probably Tailwind css</li> <li>shell (I assume that this is mostly <code>bash</code>)</li> <li>rust - because I like it</li> <li>Lisp (Steel) because there's loads of examples of people writing their own versions of these and my editor will use it.</li> </ol> <p>Advice on prompting \"These models perform best with straightforward prompts. Some prompt engineering techniques, like instructing the model to \"think step by step,\" may not enhance performance (and can sometimes hinder it). Here are some best practices:</p> <ul> <li>Developer messages are the new system messages: Starting with o1-2024-12-17, reasoning models support developer messages rather than system messages, to align with the chain of command behavior described in the model spec.</li> <li>Keep prompts simple and direct: The models excel at understanding and responding to brief, clear instructions.</li> <li>Avoid chain-of-thought prompts: Since these models perform reasoning internally, prompting them to \"think step by step\" or \"explain your reasoning\" is unnecessary.</li> <li>Use delimiters for clarity: Use delimiters like markdown, XML tags, and section titles to clearly indicate distinct parts of the input, helping the model interpret different sections appropriately.</li> <li>Try zero shot first, then few shot if needed: Reasoning models often don't need few-shot examples to produce good results, so try to write prompts without examples first. If you have more complex requirements for your desired output, it may help to include a few examples of inputs and desired outputs in your prompt. Just ensure that the examples align very closely with your prompt instructions, as discrepancies between the two may produce poor results.</li> <li>Provide specific guidelines: If there are ways you explicitly want to constrain the model's response (like \"propose a solution with a budget under $500\"), explicitly outline those constraints in the prompt.</li> <li>Be very specific about your end goal: In your instructions, try to give very specific parameters for a successful response, and encourage the model to keep reasoning and iterating until it matches your success criteria.</li> <li>Markdown formatting: Starting with o1-2024-12-17, reasoning models in the API will avoid generating responses with markdown formatting. To signal to the model when you do want markdown formatting in the response, include the string Formatting re-enabled on the first line of your developer message.\"</li> </ul> <p>The best AI for coding in 2025 (and what not to use - including DeepSeek R1) How to use ChatGPT to write code: What it does well and what it doesn't</p> <p>\" * ChatGPT can produce both useful and unusable code. For best results, provide clear and detailed prompts. * ChatGPT excels in assisting with specific coding tasks or routines, rather than building complete applications from scratch. * Use ChatGPT to find and choose the right coding libraries for specific purposes, and engage in an interactive discussion to narrow down options. * Be cautious about the ownership of AI-generated code and always verify the code's reliability. Don't blindly trust the generated output. * Treat interactions with ChatGPT as a conversation. Refine your questions based on the AI's responses to get closer to the desired output. \"</p> <p>How ChatGPT can rewrite and improve your existing code - explain the code, rewrite the code in another language, improve the code, \"make it as concise as possible\" How to use ChatGPT to create an app 25 AI tips to boost your programming productivity with ChatGPT</p> <p>awesome-chatgpt</p> <p>smartcat (sc) \"Puts a brain behind cat! CLI interface to bring language models into the Unix ecosystem and allow terminal power users to make the most out of LLMs while maintaining full control.\" What is Swiftide? \"Swiftide is a Rust library for building LLM applications. Large language models are amazing, but need context to solve real problems. Swiftide allows you to ingest, transform and index large amounts of data fast, and then query that data so it it can be injected into prompts.\" kwaak \"What is Kwaak? Always wanted to run a team of AI agents locally from your own machine? Write code, improve test coverage, update documentation, or improve code quality, while you focus on building the cool stuff? Kwaak enables you to run a team of autonomous AI agents right from your terminal, in parallel.\" Tenere - TUI interface for LLMs written in Rust aichat \"AIChat is an all-in-one LLM CLI tool featuring Shell Assistant, CMD &amp; REPL Mode, RAG, AI Tools &amp; Agents, and More.\" written in rust</p> <p>ShellGPT \"A python based command-line productivity tool powered by AI large language models (LLM).\" LangChain \"LangChain is a framework for developing applications powered by large language models (LLMs).\" also langchain_rust \"This is the Rust language implementation of LangChain.\"</p>","tags":["ai","coding","programming","tools"]},{"location":"2025-02-08-AI-Coding/#model-context-protocol-mcp","title":"Model Context Protocol (MCP)","text":"<ul> <li>LLM Function Calling - AI Tools Deep Dive - YouTube</li> <li>Introduction - Model Context Protocol</li> <li>Building Agents with Model Context Protocol - Full Workshop with Mahesh Murag of Anthropic - YouTube</li> <li>Copilot MCP - Visual Studio Marketplace</li> <li>server-filesystem not working on my wsl remote \u00b7 Issue #7 \u00b7 VikashLoomba/copilot-mcp</li> <li>A Single-File MCP Server, In TypeScript</li> </ul>","tags":["ai","coding","programming","tools"]},{"location":"2025-02-08-AI-Coding/#tools-functions-agents","title":"Tools, Functions, Agents","text":"<ul> <li>sigoden/llm-functions: Easily create LLM tools and agents using plain Bash/JavaScript/Python functions.</li> <li>Tavily</li> </ul>","tags":["ai","coding","programming","tools"]},{"location":"2025-02-08-AI-Coding/#links","title":"Links","text":"<ul> <li>Attention Is All You Need appears to be the source paper for much of LLMs.</li> <li>rust-bert \"Rust-native state-of-the-art Natural Language Processing models and pipelines. Port of Hugging Face's Transformers library, using tch-rs or onnx runtime bindings and pre-processing from rust-tokenizers.\"</li> <li>Hugging Face -  \"The AI community building the future.\"</li> <li>Hugging Face's Transformers \"Transformers: State-of-the-art Machine Learning for Pytorch, TensorFlow, and JAX.\"</li> <li>cursor \"Intelligent, fast, and familiar, Cursor is the best way to code with AI.\" from Effectively Using Cursor for 10x Coding \"Cursor is an advanced AI-driven code editor developed as a fork of Visual Studio Code (VS Code). This makes it highly accessible for developers already familiar with VS Code. It integrates generative AI to assist with various coding tasks, from code suggestions to editing and debugging.\"</li> <li>Developer quickstart - OpenAI API</li> <li>Optimizing RAG Through an Evaluation-Based Methodology - Qdrant</li> <li>openai/tiktoken: tiktoken is a fast BPE tokeniser for use with OpenAI's models.</li> <li>64bit/async-openai: Rust library for OpenAI</li> <li>Releasing Kwaak with Kwaak | Bosun</li> <li>Features | swiftide</li> <li>Home - Crawl4AI Documentation (v0.4.3bx)</li> <li>Quickstart \u2014 OpenRouter | Documentation</li> <li>Qdrant - Vector Database &amp; Search Engine - YouTube</li> <li>Anthropic Console</li> <li>Prompt Library - Anthropic</li> <li>o1 Mini vs DeepSeek-R1 - Detailed Performance &amp; Feature Comparison</li> <li>OpenAI o3-mini. o3-mini needs \"Tier 3 $100 paid and 7+ days since first successful payment\" see Rate limits - OpenAI API</li> <li>GroqCloud</li> <li>Playground - GroqCloud</li> <li>Andrej Karpathy</li> <li>Best AI Search Engines To Try Right Now</li> <li>Grok</li> <li>Private Search Engine - Brave Search</li> <li>Tavily</li> </ul>","tags":["ai","coding","programming","tools"]},{"location":"2025-02-08-AI-Coding/#more-links","title":"More Links","text":"<ul> <li>ALucek (Adam \u0141ucek)</li> <li>spider - Rust</li> <li>Spider Guides: Scrape &amp; Crawl Agent with Microsoft's Autogen</li> <li>AI \u2013 Lowry On Leadership</li> <li>AI \u2013 Lowry On Leadership</li> <li>The Power of Hybrid Graph RAG AI: Unlocking New Potential \u2013 Lowry On Leadership</li> <li>Automating Your AI Evaluation: A How-To Guide \u2013 Lowry On Leadership</li> <li>microsoft/graphrag: A modular graph-based Retrieval-Augmented Generation (RAG) system</li> <li>Debut of v1.0 of The Journey Sage Finder \u2013 Lowry On Leadership</li> <li>LlamaIndex - Build Knowledge Assistants over your Enterprise Data</li> <li>Streamlit \u2022 A faster way to build and share data apps</li> <li>Streamlit</li> <li>Rules for AI Prompting \u2013 Lowry On Leadership</li> <li>Troyusrex2/RAG-AI-Scaling</li> <li>baehyunsol/ragit: git-like rag pipeline</li> <li>YouTube</li> <li>LlamaIndex - LlamaIndex</li> <li>Animation demo</li> <li>[Basic concepts of Streamlit - Streamlit Docs](https://docs.streamlit.io/get-started/fundamentals/main-concepts</li> <li>Using Spider.rs in Rust</li> <li>llm-functions/mcp/server at main \u00b7 sigoden/llm-functions</li> <li>Introducing the Model Context Protocol  Anthropic</li> <li>octocrab - Rust</li> <li>Role Guide \u00b7 sigoden/aichat Wiki</li> </ul>","tags":["ai","coding","programming","tools"]},{"location":"2025-02-08-AI-Coding/#youtube-ai-and-coding","title":"YouTube - AI and Coding","text":"<p>Seems as if you need to know how to program the things correctly in the first place because you'll be troubleshooting.</p> <ul> <li>Adam Lucek - YouTube</li> <li>Codex Community</li> <li>Coding Comparison of DeepSeek R1 - o3-mini - Alibaba Qwen 2.5 Max another good comparison of various models from \"Codex Community\"</li> <li>Why Are Programmers Switching from ChatGPT to Claude 3.5 - YouTube from \"Codex Community\" uses Claude to program an app, at the end uses a Visual Studio plug in \"Cline\" to automate it.</li> <li>Andrej Karpathy - YouTube</li> <li>Neural Networks: Zero to Hero - YouTube</li> <li>karpathy/micrograd: A tiny scalar-valued autograd engine and a neural net library on top of it with PyTorch-like API</li> <li>prompt engineering - youtube</li> <li>aiwithbrandon - youtube</li> <li>Cole Medin - YouTube</li> <li>AI Jason - YouTube</li> <li>3blue1brown - youtube</li> <li>Turn ANY Website into LLM Knowledge in SECONDS - YouTube</li> <li>I tested DeepSeek vs. o3-mini for developers: Here\u2019s what I found. - YouTube yes, both will work.</li> <li>Can DeepSeek R1 Actually Write Good Code? - YouTube - yes, but it needs some hand-holding. He would use these tools in his work (25 year developer with a PhD). Cars.</li> <li>I ranked every AI Coder: Bolt vs. Cursor vs. Replit vs Lovable</li> <li>Chatbot with RAG, using LangChain, OpenAI, and Groq - YouTube</li> <li>Language Models For Software Developers in 17 Minutes - YouTube - programming an app a model on your own computer, using Python and Hugging Face. Here's the code</li> <li>\"\"Enhancing LLM Powered Development with Clojure's REPL\"\" by Colin Fleming - YouTube - LLMs can do useful small changes, from someone that implemented an editor for Closure.</li> <li>\"\"RDF and the future of LLMs\"\" by Luke VanderHart - YouTube final third includes some information about tools and agents.</li> <li>SWE-bench \"Can Language Models Resolve Real-World GitHub Issues?\", this is way to measure how good AI tools are. Here's the reference SWE-bench: Can Language Models Resolve Real-World GitHub Issues?</li> </ul>","tags":["ai","coding","programming","tools"]},{"location":"2025-02-08-AI-Coding/#automation-of-llms-agents-workflow-etc","title":"Automation of LLMs (Agents, Workflow, etc.)","text":"<ul> <li>Building effective agents, with a detailed walkthrough Building AI Agents in Pure Python - Beginner Course and and overview How to Build Effective AI Agents (without the hype)</li> <li> <p>17 Python Libraries Every AI Engineer Should Know</p> </li> <li> <p>Pydantic</p> </li> <li>Pydantic Settings</li> <li>Python Dotenv</li> <li>FastAPI</li> <li>Celery</li> <li>Databases</li> <li>SQLAlchemy</li> <li>Alembic</li> <li>Pandas</li> <li>LLM Model Providers</li> <li>Instructor</li> <li>LLM Frameworks</li> <li>Vector Databases</li> <li>Observability</li> <li>DSPy</li> <li>PDF Parsers</li> <li> <p>Jinja</p> </li> <li> <p>How to build a tool-using agent with LangChain</p> </li> <li>LangChain seems to be the main tool for AI stuff</li> <li>LangGraph \"is a library for building stateful, multi-actor applications with LLMs, used to create agent and multi-agent workflows\"</li> <li>LangSmith is a library for building stateful, multi-actor applications with LLMs, used to create agent and multi-agent workflows.</li> <li>I built an AI Agent in 43 min to automate my workflows (Zero Coding) talking about gumloop</li> </ul> <ul> <li>https://example.com</li> </ul>","tags":["ai","coding","programming","tools"]},{"location":"2025-02-23-Database_GraphQL/","title":"Database_GraphQL","text":"","tags":["database","postgresql","graphql","rust","docker"]},{"location":"2025-02-23-Database_GraphQL/#template","title":"Template","text":"","tags":["database","postgresql","graphql","rust","docker"]},{"location":"2025-02-23-Database_GraphQL/#introduction","title":"Introduction","text":"<p>Open source choices seem to be between MySQL, PostgresQL and SQLite. I am leaning twoards both SQLite and PostgresQL because they have vector extensions (useful for storing and searching LLM type data).</p> <p>There are plenty of database offerings for rust with sqlx and libsql / Turso being my currently preferred. Whist libsql / Turso support vector stuff that variant isn't supported by SQLx at the moment.</p> <p>For getting data from websites, it seems as if we have REST, GraphQL and gRPC, with REST and GraphQL being the most well used.</p>","tags":["database","postgresql","graphql","rust","docker"]},{"location":"2025-02-23-Database_GraphQL/#database","title":"Database","text":"<ul> <li>PostgreSQL SELECT</li> <li>PostgreSQL Primer for Busy People \u00b7 Zaiste Programming</li> <li>launchbadge/sqlx: \ud83e\uddf0 The Rust SQL Toolkit. An async, pure Rust SQL crate featuring compile-time checked queries without a DSL. Supports PostgreSQL, MySQL, and SQLite.</li> <li>Introduction - Turso</li> <li>libSQL | \ud83e\udd9c\ufe0f\ud83d\udd17 Langchain</li> <li>Getting unknown database public error while trying to convert PostgreSQL database backup to sqlite \u00b7 Issue #8 \u00b7 caiiiycuk/postgresql-to-sqlite</li> <li>Rust SQLx basics with SQLite: super easy how to - TMS DEV</li> </ul>","tags":["database","postgresql","graphql","rust","docker"]},{"location":"2025-02-23-Database_GraphQL/#graphql","title":"GraphQL","text":"<ul> <li>octocrab - Rust</li> <li>octocrab/examples/graphql_issues.rs at main \u00b7 XAMPPRocky/octocrab</li> <li>Forming calls with GraphQL - GitHub Docs</li> <li>graphql - Search</li> <li>Thinking in Graphs | GraphQL</li> <li>graphql and rust - Search</li> <li>Quickstart - Juniper Book</li> <li>How to create a GraphQL server in Rust - LogRocket Blog</li> <li>How To Build Powerful GraphQL Servers With Rust - ExpertBeacon</li> <li>How to Build a Powerful GraphQL API with Rust</li> </ul>","tags":["database","postgresql","graphql","rust","docker"]},{"location":"2025-02-23-Database_GraphQL/#postgresql-and-docker","title":"PostgresQL and Docker","text":"<ol> <li>Persist data using volumes (optional):</li> </ol> <p>If you want to persist data beyond the lifecycle of the container, you can mount a volume to the container. Here's how you can run a PostgreSQL container with a volume:</p> <pre><code>docker run --name my-postgres -e POSTGRES_PASSWORD=pass -p 5432:5432 -d -v my_pgdata:/var/lib/postgresql/data postgres:alpine \n</code></pre> <p>In this command:    - <code>-v my_pgdata:/var/lib/postgresql/data</code>: Mounts a volume named <code>my_pgdata</code> to the PG data directory, preventing data loss when the container stops.    - <code>--name my-postgres</code>: Names the container \"my-postgres\" for easy reference.    - <code>-e POSTGRES_PASSWORD=pass</code>: Sets an environment variable to define the password for the default <code>postgres</code> user.    - <code>-d</code>: Runs the container in detached mode, meaning it runs in the background.    - <code>postgres:alpine</code>: Specifies the image to use.    This maps port 5432 of your host to port 5432 of the container, allowing you to connect using a PostgreSQL client.</p> <p>If you haven't already specified a host port, find the container ID or name and inspect it:    <pre><code>docker inspect &lt;container_id_or_name&gt; | grep \"IPAddress\"\n</code></pre></p> <p>If you've mapped the container port to a host port, you can see the mapping with:    <pre><code>docker port &lt;container_id_or_name&gt;\n</code></pre></p> <ol> <li>Example:</li> </ol> <p>Suppose your PostgreSQL container name is <code>my_postgres_container</code>, running on default port <code>5432</code>, with a database named <code>mydatabase</code> and a user <code>myuser</code>. Also, assume you've mapped your container's port <code>5432</code> to host port <code>5432</code>, and the password for <code>myuser</code> is <code>mypassword</code>. The command would look like:</p> <pre><code>psql -h localhost -p 5432 -U myuser -d mydatabase\n</code></pre> <pre><code>export PGPASSWORD=pass\n</code></pre> <p>You would be prompted for <code>mypassword</code> unless you've set it with <code>PGPASSWORD</code>.    Alternatively, you can include the password in a <code>.pgpass</code> file for more convenience.</p> <ul> <li>PostgreSQL with Docker Setup</li> <li>Quick reference from the Docker Postgres Community for the official image</li> <li>PostgreSQL Tutorial</li> </ul> <pre><code>apk add postgresql17-client\napk add lazydocker\nwget https://neon.tech/postgresqltutorial/dvdrental.zip\nunzip ./dvdrental.zip \ncat &lt;&lt; EOF &gt; Dockerfile\nFROM postgres:alpine\nCOPY ./dvdrental.tar /\nCOPY ./init-user-db.sh /docker-entrypoint-initdb.d/init-user-db.sh\nEOF\ncat &lt;&lt; EOF &gt; init-user-db.sh\n#!/bin/sh\nset -e\n\npsql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" --dbname \"$POSTGRES_DB\" &lt;&lt;-EOSQL\n  CREATE DATABASE dvdrental;\nEOSQL\n\npg_restore -U postgres -d dvdrental /dvdrental.tar\nEOF\ncat &lt;&lt; EOF &gt; .ignore\ndata\nEOF\ndocker build . --tag pg\n# rm -rf data\ndocker run -itd -e POSTGRES_PASSWORD=jcc_pass -p 5432:5432 -v ./data:/var/lib/postgresql/data --name postgresql pg\ndocker exec -it postgresql /bin/sh\nlazydocker\nPGPASSWORD=jcc_pass psql -h localhost -p 5432 -U postgres -c '\\l'\nexport PGPASSWORD=jcc_pass \npsql -h localhost -p 5432 -U postgres -d dvdrental\ndocker pull dpage/pgadmin4:latest\ndocker run --name pgadmin-jcc -p 5051:80 -e \"PGADMIN_DEFAULT_EMAIL=jack@chidley.org\" -e \"PGADMIN_DEFAULT_PASSWORD=jack_pass\" -d dpage/pgadmin4\n# need to use this address with pg4admin\ndocker inspect postgresql | grep \"IPAddress\"\n</code></pre> <pre><code>&gt; convert postgres datatypes to rust sqlx\nWhen converting PostgreSQL data types to Rust using the `sqlx` library, you'll typically map PostgreSQL types to Rust types that `sqlx` supports. Below are some common PostgreSQL data types and how they can be mapped to Rust types with `sqlx`:\n\n1. **PostgreSQL `INTEGER`, `SMALLINT`, `BIGINT`**\n   - Rust: `i32`, `i16`, `i64`\n\n2. **PostgreSQL `SERIAL`, `SMALLSERIAL`, `BIGSERIAL`**\n   - Rust: These are normally mapped as `i32`, `i16`, `i64`.\n\n3. **PostgreSQL `REAL`, `DOUBLE PRECISION`**\n   - Rust: `f32`, `f64`\n\n4. **PostgreSQL `NUMERIC`, `DECIMAL`**\n   - Rust: `Decimal` from `rust_decimal` crate or through the `sqlx::types::BigDecimal`\n\n5. **PostgreSQL `BOOLEAN`**\n   - Rust: `bool`\n\n6. **PostgreSQL `CHAR`, `VARCHAR`, `TEXT`**\n   - Rust: `String`\n\n7. **PostgreSQL `BYTEA`**\n   - Rust: `Vec&lt;u8&gt;`\n\n8. **PostgreSQL `DATE`, `TIME`, `TIMESTAMP`, `TIMESTAMPTZ`**\n   - Rust: `chrono::NaiveDate`, `chrono::NaiveTime`, `chrono::NaiveDateTime`, `chrono::DateTime&lt;Utc&gt;`\n\n   Note: You need to include the `chrono` crate in your `Cargo.toml` to handle date and time types effectively.\n\n9. **PostgreSQL `UUID`**\n   - Rust: `uuid::Uuid`\n\n   Note: Ensure the `uuid` crate is added to your dependencies.\n\n10. **PostgreSQL `JSON`, `JSONB`**\n    - Rust: `serde_json::Value`\n\n    Note: Ensure the `serde` and `serde_json` crates are included in your project.\n\n11. **PostgreSQL `ARRAY`**\n    - Rust: `Vec&lt;T&gt;` where `T` is the Rust type equivalent of the PostgreSQL array element type.\n\n12. **PostgreSQL `ENUM`**\n    - Rust: You usually define an `enum` in Rust with `#[derive(sqlx::Type)]` to map it to/from a SQL ENUM.\n\nTo ensure proper mapping and use in your Rust application, you should include the necessary crate features and dependencies in your `Cargo.toml` file, such as `sqlx`, `chrono`, `serde`, `serde_json`, and `uuid`, if they are not already included.\n\nHere's a sample snippet for your `Cargo.toml` file:\n\n[dependencies]\nsqlx = { version = \"0.6\", features = [\"runtime-tokio-rustls\", \"postgres\", \"chrono\", \"uuid\", \"json\"] }\nchrono = { version = \"0.4\", features = [\"serde\"] }\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\nuuid = { version = \"1.0\", features = [\"serde\", \"v4\"] }\n\nThese mappings and configurations will help you work effectively with PostgreSQL data types in your Rust applications using `sqlx`.\n</code></pre>","tags":["database","postgresql","graphql","rust","docker"]},{"location":"2025-02-23-Database_GraphQL/#links","title":"Links","text":"<ul> <li>PostgreSQL: Tutorials &amp; Other Resources</li> <li>PostgreSQL SELECT</li> <li>PostgreSQL Primer for Busy People \u00b7 Zaiste Programming</li> <li>dhamaniasad/awesome-postgres: A curated list of awesome PostgreSQL software, libraries, tools and resources, inspired by awesome-mysql</li> <li>postgres - Rust</li> <li>PostgreSQL database with Rust: basic how to - TMS Developer Blog</li> <li>How to create a backend API with Rust and Postgres - LogRocket Blog</li> <li>Getting Started with Diesel</li> <li>launchbadge/sqlx: \ud83e\uddf0 The Rust SQL Toolkit. An async, pure Rust SQL crate featuring compile-time checked queries without a DSL. Supports PostgreSQL, MySQL, and SQLite.</li> <li>sqlx/sqlx-cli/README.md at main \u00b7 launchbadge/sqlx</li> <li>allan2/dotenvy: A well-maintained fork of the dotenv crate</li> <li>Choosing a Rust Database Crate in 2023: Diesel, SQLx, or Tokio-Postgres?</li> <li>Interacting with databases in Rust using Diesel vs. SQLx - LogRocket Blog</li> </ul>","tags":["database","postgresql","graphql","rust","docker"]},{"location":"2025-02-23-Database_GraphQL/#links_1","title":"Links","text":"<ul> <li>https://example.com</li> </ul>","tags":["database","postgresql","graphql","rust","docker"]},{"location":"2025-03-01-Testing/","title":"Testing","text":"","tags":["testing","rust","property-based-testing","unit-testing","fuzzing"]},{"location":"2025-03-01-Testing/#testing","title":"Testing","text":"","tags":["testing","rust","property-based-testing","unit-testing","fuzzing"]},{"location":"2025-03-01-Testing/#introduction","title":"Introduction","text":"<ul> <li>Software testing - Wikipedia- Testing \u2014 list of Rust libraries/crates // Lib.rs</li> <li>mockall - Rust</li> </ul>","tags":["testing","rust","property-based-testing","unit-testing","fuzzing"]},{"location":"2025-03-01-Testing/#property-based-testing","title":"Property Based Testing","text":"<ul> <li>Introduction - Proptest</li> <li>QuickCheck: Automatic testing of Haskell programs</li> </ul>","tags":["testing","rust","property-based-testing","unit-testing","fuzzing"]},{"location":"2025-03-01-Testing/#unit-testing","title":"Unit Testing","text":"","tags":["testing","rust","property-based-testing","unit-testing","fuzzing"]},{"location":"2025-03-01-Testing/#integration-testing","title":"Integration Testing","text":"","tags":["testing","rust","property-based-testing","unit-testing","fuzzing"]},{"location":"2025-03-01-Testing/#deterministic-simulation-testing","title":"Deterministic Simulation Testing","text":"<ul> <li>ivanyu/awesome-deterministic-simulation-testing: A curated list of awesome deterministic simulation testing resources \ud83d\ude0e</li> <li>\"\"Testing Distributed Systems w/ Deterministic Simulation\"\" by Will Wilson - YouTube</li> <li>What's the big deal about Deterministic Simulation Testing? | notes.eatonphil.com</li> <li>Deterministic Simulation: A New Era of Distributed System Testing (Part 1 of 2) - RisingWave: Open-Source Streaming Database</li> </ul>","tags":["testing","rust","property-based-testing","unit-testing","fuzzing"]},{"location":"2025-03-01-Testing/#fuzz-testing","title":"Fuzz Testing","text":"","tags":["testing","rust","property-based-testing","unit-testing","fuzzing"]},{"location":"2025-03-01-Testing/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>","tags":["testing","rust","property-based-testing","unit-testing","fuzzing"]},{"location":"2025-03-27-DaVinci-Resolve/","title":"DaVinci-Resolve","text":"","tags":["video-editing","davinci-resolve","media","software"]},{"location":"2025-03-27-DaVinci-Resolve/#davinci-resolve","title":"DaVinci-Resolve","text":"","tags":["video-editing","davinci-resolve","media","software"]},{"location":"2025-03-27-DaVinci-Resolve/#introduction","title":"Introduction","text":"<p>Everything About Proxies - YouTube</p>","tags":["video-editing","davinci-resolve","media","software"]},{"location":"2025-03-27-DaVinci-Resolve/#settings","title":"Settings","text":"<p>apper to be kept in</p> <p>\"C:\\Users\\jackc\\AppData\\Roaming\\Blackmagic Design\\DaVinci Resolve\"</p>","tags":["video-editing","davinci-resolve","media","software"]},{"location":"2025-03-27-DaVinci-Resolve/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>","tags":["video-editing","davinci-resolve","media","software"]},{"location":"2025-04-21-Web-Site-Information-and-Manipulation/","title":"Web-Site-Information-and-Manipulation","text":"","tags":["web","tools","markdown","url-extraction","web-scraping"]},{"location":"2025-04-21-Web-Site-Information-and-Manipulation/#web-site-information-and-manipulation","title":"Web Site Information and Manipulation","text":"","tags":["web","tools","markdown","url-extraction","web-scraping"]},{"location":"2025-04-21-Web-Site-Information-and-Manipulation/#introduction","title":"Introduction","text":"<ul> <li>md-url-extractor .\\2023-03-16-Links-iPad.md tonydub/md-url-extractor: A tool for extracting, cleaning, and exporting URLs from Markdown files.</li> <li>echo \"https://example.com\" | twars-url2md --stdin  --verbose twardoch/twars-url2md: Rust tool to fetch multiple URLs and save them into Markdown files</li> <li>monolith https://jchidley.github.io/blog -o %title%.%timestamp%.html Y2Z/monolith: \u2b1b\ufe0f CLI tool and library for saving complete web pages as a single HTML file</li> </ul>","tags":["web","tools","markdown","url-extraction","web-scraping"]},{"location":"2025-04-21-Web-Site-Information-and-Manipulation/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>","tags":["web","tools","markdown","url-extraction","web-scraping"]},{"location":"2099-12-23-Template/","title":"Template","text":""},{"location":"2099-12-23-Template/#template","title":"Template","text":""},{"location":"2099-12-23-Template/#introduction","title":"Introduction","text":"<p>A sentence</p>"},{"location":"2099-12-23-Template/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"404/","title":"Page Not Found","text":"<p>Sorry, but the page you were looking for doesn't exist or has been moved.</p>"},{"location":"404/#here-are-some-helpful-links","title":"Here are some helpful links:","text":"<ul> <li>Homepage - Return to the main page</li> <li>Programming - Explore programming topics</li> <li>Linux - Browse Linux guides</li> <li>Tools - Check out useful tools and software</li> </ul>"},{"location":"404/#looking-for-something-specific","title":"Looking for something specific?","text":"<p>Try using the search bar at the top of the page to find what you're looking for.</p> <p>If you believe this is an error with the site, please open an issue to report it.</p>"},{"location":"archive/","title":"Archive","text":"<p>This page provides a chronological listing of all content in the digital garden, organized by year and month.</p>"},{"location":"archive/#2099","title":"2099","text":""},{"location":"archive/#december","title":"December","text":"<ul> <li>Template - Template for new content</li> </ul>"},{"location":"archive/#2025","title":"2025","text":""},{"location":"archive/#april","title":"April","text":"<ul> <li>Web Site Information and Manipulation - Web information extraction and manipulation techniques</li> </ul>"},{"location":"archive/#march","title":"March","text":"<ul> <li>Testing - Software testing concepts and tools</li> <li>DaVinci Resolve - Working with DaVinci Resolve video editor</li> </ul>"},{"location":"archive/#february","title":"February","text":"<ul> <li>AI Coding - Using AI for coding assistance</li> <li>Database and GraphQL - Database systems and GraphQL APIs</li> </ul>"},{"location":"archive/#january","title":"January","text":"<ul> <li>Miscellaneous Links - Collection of miscellaneous links</li> <li>Python General Resources - General Python resources and links</li> </ul>"},{"location":"archive/#2024","title":"2024","text":""},{"location":"archive/#september","title":"September","text":"<ul> <li>FreeCAD - FreeCAD 3D modeling software</li> </ul>"},{"location":"archive/#august","title":"August","text":"<ul> <li>Arduino - Arduino microcontroller platform</li> <li>LCD 1602 Pushbutton - LCD and pushbutton interfacing with Arduino</li> <li>Lathe Milling - Lathe and milling machine techniques</li> <li>Phase-Locked Loop PLL - Phase-locked loop technology</li> </ul>"},{"location":"archive/#june","title":"June","text":"<ul> <li>Open Energy Monitor Emon - Energy monitoring systems</li> </ul>"},{"location":"archive/#may","title":"May","text":"<ul> <li>Rust Data - Working with data in Rust</li> <li>Rust Embedded - Embedded systems programming in Rust</li> <li>Rust General - General Rust programming concepts</li> </ul>"},{"location":"archive/#april_1","title":"April","text":"<ul> <li>Plumbing - Home plumbing systems and projects</li> </ul>"},{"location":"archive/#march_1","title":"March","text":"<ul> <li>How I Learned Rust - Personal journey of learning Rust</li> <li>Asbestos Roof Replacement - Guide to replacing asbestos roofing</li> <li>House Electrics - Home electrical systems and projects</li> </ul>"},{"location":"archive/#february_1","title":"February","text":"<ul> <li>chezmoi - Managing dotfiles with chezmoi</li> <li>Helix - Helix text editor</li> <li>NixOS - NixOS Linux distribution</li> </ul>"},{"location":"archive/#january_1","title":"January","text":"<ul> <li>Microsoft Surface Laptop 4 - Notes on Microsoft Surface Laptop</li> <li>Git - Git version control system</li> </ul>"},{"location":"archive/#2023","title":"2023","text":""},{"location":"archive/#november","title":"November","text":"<ul> <li>Pi Pico - Raspberry Pi Pico microcontroller</li> <li>Home Assistant ESPHome - Home automation with Home Assistant and ESPHome</li> </ul>"},{"location":"archive/#september_1","title":"September","text":"<ul> <li>Writing A Programming Language - Creating your own programming language</li> <li>Picocomputer - Pico microcontroller computing</li> </ul>"},{"location":"archive/#may_1","title":"May","text":"<ul> <li>VFD 3-Phase Converter - Variable frequency drive 3-phase power conversion</li> </ul>"},{"location":"archive/#april_2","title":"April","text":"<ul> <li>Julia Drawing - Creating graphics with Julia</li> <li>Neovim Lua - Neovim configuration with Lua</li> </ul>"},{"location":"archive/#march_2","title":"March","text":"<ul> <li>Python Fake Data and Testing - Generating fake data for Python testing</li> <li>Rust Beginnings - Getting started with Rust programming</li> <li>Julia - Julia programming language</li> </ul>"},{"location":"archive/#2022","title":"2022","text":""},{"location":"archive/#november_1","title":"November","text":"<ul> <li>Astroneer - Astroneer game</li> </ul>"},{"location":"archive/#october","title":"October","text":"<ul> <li>CADQuery - CADQuery 3D modeling</li> </ul>"},{"location":"archive/#august_1","title":"August","text":"<ul> <li>GitHub Pages Jekyll - Setting up GitHub Pages with Jekyll</li> <li>Alpine Image Build Raspberry Pi - Building Alpine Linux images for Pi</li> </ul>"},{"location":"archive/#july","title":"July","text":"<ul> <li>Rasbian X11 - X11 window system on Raspbian</li> <li>Vim - Vim text editor</li> <li>Pi Gen - Custom Raspberry Pi OS image creation</li> <li>Tmux - Tmux terminal multiplexer</li> <li>Pi Pico - Raspberry Pi Pico microcontroller</li> <li>Pi as iPad Development Machine - Using Pi for iPad development</li> </ul>"},{"location":"archive/#march_3","title":"March","text":"<ul> <li>FastAPI and JavaScript - Using FastAPI with JavaScript</li> <li>Radio and Electronics - Radio and electronics projects</li> </ul>"},{"location":"archive/#2021","title":"2021","text":""},{"location":"archive/#july_1","title":"July","text":"<ul> <li>Parsing Compilers - Parsing and compiler design</li> </ul>"},{"location":"archive/#june_1","title":"June","text":"<ul> <li>Python on Apple - Python on Apple devices</li> <li>Booting Linux and Other Operating Systems - Boot processes</li> <li>Arch Linux GUI VNC - Arch Linux with VNC</li> <li>Arch Linux Installation - Installing Arch Linux</li> <li>Mac Setup - Setting up Mac systems</li> </ul>"},{"location":"archive/#february_2","title":"February","text":"<ul> <li>Audio - Audio processing and equipment</li> </ul>"},{"location":"archive/#2020","title":"2020","text":""},{"location":"archive/#december_1","title":"December","text":"<ul> <li>Raku - Raku programming language</li> <li>Arch Linux Raspberry Pi - Arch Linux on Pi</li> </ul>"},{"location":"archive/#november_2","title":"November","text":"<ul> <li>Screen - Screen terminal multiplexer</li> <li>Links - Collection of useful links</li> <li>Alpine Linux Raspberry Pi Router - Pi router with Alpine</li> </ul>"},{"location":"archive/#october_1","title":"October","text":"<ul> <li>Klipper 3D - Klipper 3D printing firmware</li> </ul>"},{"location":"archive/#september_2","title":"September","text":"<ul> <li>Prusa 3D Printer - Prusa 3D printing</li> </ul>"},{"location":"archive/#april_3","title":"April","text":"<ul> <li>Signals - Signal processing</li> </ul>"},{"location":"archive/#march_4","title":"March","text":"<ul> <li>FPGA and Amaranth HDL - FPGA programming</li> </ul>"},{"location":"archive/#february_3","title":"February","text":"<ul> <li>DD - DD command usage</li> <li>URL Dump - Collection of URLs</li> <li>Alpine Linux Install - Installing Alpine Linux</li> <li>QEMU distcc Raspberry Pi - QEMU with Pi</li> </ul>"},{"location":"archive/#january_2","title":"January","text":"<ul> <li>Building A Raspberry Pi Home Router - Pi-based router</li> <li>Traffic Manager Not Firewall - Traffic management</li> <li>DNS Setup For DIY Home Router - DNS configuration</li> <li>Factorio - Factorio game</li> <li>Data with Python - Data analysis with Python</li> <li>SQLite Stuff - SQLite database</li> <li>Simplest Possible Linux Boot - Minimal Linux boot</li> <li>FileSystems - Linux filesystems</li> </ul>"},{"location":"archive/#2017","title":"2017","text":""},{"location":"archive/#october_2","title":"October","text":"<ul> <li>Testing With F# - Testing in F#</li> <li>Testing and FParsec - FParsec with F#</li> <li>Understanding and Using FsCheck - FsCheck property testing</li> <li>The Point of F# Computational Expressions AKA F# Monads - F# computational expressions</li> </ul>"},{"location":"archive/#july_2","title":"July","text":"<ul> <li>STM32 Toolchains and Developer Choice - STM32 toolchains</li> </ul>"},{"location":"archive/#may_2","title":"May","text":"<ul> <li>Git Epiphany - Git insights</li> <li>Git Epilogue - Advanced Git concepts</li> <li>STM32 Development - STM32 microcontroller development</li> </ul>"},{"location":"archive/#april_4","title":"April","text":"<ul> <li>Continuing to choose F# - Choosing F# for development</li> </ul>"},{"location":"tags/","title":"Tags","text":"<p>Browse content by tags to discover related topics across different sections of the digital garden.</p>"},{"location":"tags/#tag:ai","title":"ai","text":"<ul> <li>            AI Coding          </li> </ul>"},{"location":"tags/#tag:coding","title":"coding","text":"<ul> <li>            AI Coding          </li> </ul>"},{"location":"tags/#tag:data-science","title":"data-science","text":"<ul> <li>            General Resources          </li> </ul>"},{"location":"tags/#tag:database","title":"database","text":"<ul> <li>            Database and GraphQL          </li> </ul>"},{"location":"tags/#tag:davinci-resolve","title":"davinci-resolve","text":"<ul> <li>            DaVinci Resolve          </li> </ul>"},{"location":"tags/#tag:development","title":"development","text":"<ul> <li>            Fake Data and Testing          </li> <li>            General Resources          </li> </ul>"},{"location":"tags/#tag:docker","title":"docker","text":"<ul> <li>            Database and GraphQL          </li> </ul>"},{"location":"tags/#tag:editor","title":"editor","text":"<ul> <li>            Helix          </li> </ul>"},{"location":"tags/#tag:energy","title":"energy","text":"<ul> <li>            Miscellaneous          </li> </ul>"},{"location":"tags/#tag:error-handling","title":"error-handling","text":"<ul> <li>            General          </li> </ul>"},{"location":"tags/#tag:fake-data","title":"fake-data","text":"<ul> <li>            Fake Data and Testing          </li> <li>            General Resources          </li> </ul>"},{"location":"tags/#tag:fuzzing","title":"fuzzing","text":"<ul> <li>            Testing          </li> </ul>"},{"location":"tags/#tag:games","title":"games","text":"<ul> <li>            Miscellaneous          </li> </ul>"},{"location":"tags/#tag:graphql","title":"graphql","text":"<ul> <li>            Database and GraphQL          </li> </ul>"},{"location":"tags/#tag:home-improvement","title":"home-improvement","text":"<ul> <li>            Miscellaneous          </li> </ul>"},{"location":"tags/#tag:installation","title":"installation","text":"<ul> <li>            Getting Started          </li> </ul>"},{"location":"tags/#tag:learning","title":"learning","text":"<ul> <li>            How I Learned Rust          </li> </ul>"},{"location":"tags/#tag:links","title":"links","text":"<ul> <li>            Miscellaneous          </li> </ul>"},{"location":"tags/#tag:linux","title":"linux","text":"<ul> <li>            Helix          </li> </ul>"},{"location":"tags/#tag:markdown","title":"markdown","text":"<ul> <li>            Web Info          </li> </ul>"},{"location":"tags/#tag:media","title":"media","text":"<ul> <li>            DaVinci Resolve          </li> </ul>"},{"location":"tags/#tag:miscellaneous","title":"miscellaneous","text":"<ul> <li>            Miscellaneous          </li> </ul>"},{"location":"tags/#tag:performance","title":"performance","text":"<ul> <li>            General          </li> </ul>"},{"location":"tags/#tag:postgresql","title":"postgresql","text":"<ul> <li>            Database and GraphQL          </li> </ul>"},{"location":"tags/#tag:programming","title":"programming","text":"<ul> <li>            AI Coding          </li> <li>            General          </li> <li>            Getting Started          </li> <li>            Helix          </li> <li>            How I Learned Rust          </li> </ul>"},{"location":"tags/#tag:property-based-testing","title":"property-based-testing","text":"<ul> <li>            Testing          </li> </ul>"},{"location":"tags/#tag:python","title":"python","text":"<ul> <li>            Fake Data and Testing          </li> <li>            General Resources          </li> </ul>"},{"location":"tags/#tag:resources","title":"resources","text":"<ul> <li>            Getting Started          </li> <li>            Miscellaneous          </li> </ul>"},{"location":"tags/#tag:rust","title":"rust","text":"<ul> <li>            Database and GraphQL          </li> <li>            General          </li> <li>            Getting Started          </li> <li>            How I Learned Rust          </li> <li>            Testing          </li> </ul>"},{"location":"tags/#tag:sailing","title":"sailing","text":"<ul> <li>            Miscellaneous          </li> </ul>"},{"location":"tags/#tag:software","title":"software","text":"<ul> <li>            DaVinci Resolve          </li> </ul>"},{"location":"tags/#tag:terminal","title":"terminal","text":"<ul> <li>            Helix          </li> </ul>"},{"location":"tags/#tag:testing","title":"testing","text":"<ul> <li>            Fake Data and Testing          </li> <li>            General Resources          </li> <li>            Testing          </li> </ul>"},{"location":"tags/#tag:tools","title":"tools","text":"<ul> <li>            AI Coding          </li> <li>            Helix          </li> <li>            Miscellaneous          </li> <li>            Web Info          </li> </ul>"},{"location":"tags/#tag:unicode","title":"unicode","text":"<ul> <li>            General          </li> </ul>"},{"location":"tags/#tag:unit-testing","title":"unit-testing","text":"<ul> <li>            Testing          </li> </ul>"},{"location":"tags/#tag:url-extraction","title":"url-extraction","text":"<ul> <li>            Web Info          </li> </ul>"},{"location":"tags/#tag:video-editing","title":"video-editing","text":"<ul> <li>            DaVinci Resolve          </li> </ul>"},{"location":"tags/#tag:web","title":"web","text":"<ul> <li>            Web Info          </li> </ul>"},{"location":"tags/#tag:web-development","title":"web-development","text":"<ul> <li>            General Resources          </li> </ul>"},{"location":"tags/#tag:web-scraping","title":"web-scraping","text":"<ul> <li>            Web Info          </li> </ul>"},{"location":"Apple/","title":"Apple","text":""},{"location":"Apple/#apple","title":"Apple","text":""},{"location":"Apple/#introduction","title":"Introduction","text":"<p>This section contains documentation, guides, and resources related to Apple products and services. Topics include Python development on macOS, Mac setup instructions, and using Python on iPads.</p>"},{"location":"Apple/#contents","title":"Contents","text":"<ul> <li>Python Apple - Python setup and usage on Apple devices, including virtual environments, testing, and useful libraries.</li> <li>Mac Setup - Guide for setting up and configuring Mac systems.</li> </ul>"},{"location":"Apple/#topics-covered","title":"Topics Covered","text":"<ul> <li>Python development on macOS</li> <li>Virtual environments with pyenv, venv, and conda</li> <li>Mac configuration and package management</li> <li>Python IDEs and tools for iPad</li> <li>Development workflows for Apple devices</li> </ul>"},{"location":"Apple/2021-06-06-python-apple/","title":"Python Apple","text":""},{"location":"Apple/2021-06-06-python-apple/#python-apple","title":"Python Apple","text":""},{"location":"Apple/2021-06-06-python-apple/#python","title":"Python","text":"<p>pyenv</p> <p>Use <code>pyenv</code> to setup python separately from the system's python and create virtual python instances that automatically start when you <code>cd</code> to specific directories.</p>"},{"location":"Apple/2021-06-06-python-apple/#virtual-environments","title":"Virtual environments","text":"<p>Use conda (Mamba) separately from venv. Conda is a generalised package manager, venv is for python only.</p> <p>A Guide to Python\u2019s Virtual Environments The definitive guide to Python virtual environments with conda The Definitive Guide to Conda Environments</p>"},{"location":"Apple/2021-06-06-python-apple/#conda-mamba","title":"Conda (Mamba)","text":"<p>Try to install all the dependencies (perhaps using a <code>requirements.txt</code> generated from a environment like this <code>pip freeze &gt; requirements.txt</code>) at the same time. e.g. <code>conda create -n octopus requests numpy pandas</code></p> <p>Mamba Conda or Mamba for production? use Mambaforge download the latest from https://github.com/conda-forge/miniforge <code>bash Mambaforge-MacOSX-arm64.sh -b</code> This is based on conda. Use <code>conda activate base</code> then create a <code>conda env create [environment]</code> and activate it.</p>"},{"location":"Apple/2021-06-06-python-apple/#python-venv","title":"Python venv","text":"<p>venv \u2014 Creation of virtual environments</p> <p><code>python -m venv venv</code> inside each python project for a full isolated environment</p>"},{"location":"Apple/2021-06-06-python-apple/#testing","title":"Testing","text":"<p>don't forget that files need to be called <code>test_*.py</code> or <code>*_test.py</code></p> <ul> <li>pytest</li> <li>Effective Python Testing With Pytest</li> <li> <p>[Property based testing]https://hypothesis.readthedocs.io/en/latest/</p> </li> <li> <p>Manage Jupyter Notebook and JupyterLab with Systemd - Parametric Thoughts</p> </li> <li> <p>Python Programming And Numerical Methods: A Guide For Engineers And Scientists \u2014 Python Numerical Methods</p> </li> <li>Try/Except \u2014 Python Numerical Methods</li> <li>Study Guide: Intro to Computing with Finite Difference Methods</li> <li>StrictYAML - HitchDev</li> <li>Build a YAML document from scratch in code - HitchDev</li> </ul>"},{"location":"Apple/2021-06-06-python-apple/#visitors","title":"Visitors","text":""},{"location":"Apple/2021-06-06-python-apple/#python-cookbook","title":"Python Cookbook","text":"<p>All of this predates Python 3.4 when singledispatch-functools first appeared</p> <p>8.21.\u00a0Implementing the Visitor Pattern 8.22.\u00a0Implementing the Visitor Pattern Without Recursion 9.24.\u00a0Parsing and Analyzing Python Source</p> <ul> <li>Arpeggio/init.py at master \u00b7 textX/Arpeggio \u00b7 GitHub</li> <li> <p>Semantic analysis - Arpeggio</p> </li> <li> <p>WHY YOU DON\u2019T NEED DESIGN PATTERNS IN PYTHON?</p> </li> <li>Function overloading with singledispatch-functools - GeeksforGeeks</li> <li>functools \u2014 Higher-order functions and operations on callable objects \u2014 Python 3.9.5 documentation</li> <li>Built-in Functions \u2014 Python 3.9.5 documentation</li> <li>Glossary \u2014 Python 3.9.5 documentation</li> <li>PEP 614 \u2014 Relaxing Grammar Restrictions On Decorators | Python.org</li> <li>PEP 3119 \u2014 Introducing Abstract Base Classes | Python.org</li> <li>3. Data model \u2014 Python 3.9.5 documentation</li> <li>How can I use functools.singledispatch with instance methods? | Newbedev</li> <li>Generic Functions with Python\u2019s Singledispatch | Red\u2019s Digressions</li> <li>2.1. What is Data? \u2014 Python: From None to Machine Learning</li> <li>PEP 443 \u2014 Single-dispatch generic functions | Python.org</li> <li>PEP 318 \u2014 Decorators for Functions and Methods | Python.org</li> <li>Python Advanced: Easy Introduction into Decorators and Decoration</li> <li>Primer on Python Decorators \u2013 Real Python</li> <li> <p>Python Class Method Decorator @classmethod</p> </li> <li> <p>mypy - Optional Static Typing for Python</p> </li> <li>PyPy: Faster Python With Minimal Effort \u2013 Real Python</li> <li>PyPy</li> </ul>"},{"location":"Apple/2021-06-06-python-apple/#links","title":"Links","text":""},{"location":"Apple/2021-06-06-python-apple/#ipad","title":"iPad","text":"<ul> <li>Using an iPad for Data Science in 2021!</li> <li>My top Python IDEs for iPad</li> <li>Jupyter for iOS | Juno</li> <li>Carnets - Jupyter</li> <li>Pythonista-Tools/Utilities.md at master \u00b7 Pythonista-Tools/Pythonista-Tools \u00b7 GitHub</li> <li>GitHub - Pythonista-Tools/Pythonista-Tools: Gathering code and links to projects specially developed for Pythonista for iOS.</li> <li>Thoughts on iOS Python - All this</li> <li>GitHub - idcrook/awesome-pythonista: Collection of Pythonista 3 (iOS app) scripts and things</li> </ul>"},{"location":"Apple/2021-06-06-python-apple/#general","title":"General","text":"<ul> <li>Stupid Python Ideas: How do I make a recursive function iterative?</li> </ul>"},{"location":"Apple/2021-06-06-python-apple/#mac-setup","title":"Mac setup","text":"<ul> <li>Virtual Environments and Packages</li> <li>Simple Python Version Management: pyenv</li> <li>pyenv-virtualenv is a pyenv plugin that provides features to manage virtualenvs and conda environments for Python on UNIX-like systems.</li> <li>Python Development on macOS with pyenv</li> <li> <p>Python Development on macOS with pyenv-virtualenv</p> </li> <li> <p>The right and wrong way to set Python 3 as default on a Mac</p> </li> <li> <p>How to manage multiple Python versions and virtual environments</p> </li> <li>Python settings reference</li> <li>User and Workspace Settings</li> <li>Using Python Virtual Environment in VSCode</li> </ul>"},{"location":"Apple/2021-06-26-Mac-Setup/","title":"Mac Setup","text":""},{"location":"Apple/2021-06-26-Mac-Setup/#mac-setup","title":"Mac Setup","text":""},{"location":"Apple/2021-06-26-Mac-Setup/#introduction","title":"Introduction","text":"<p>My pithy guide to setup Mac Setup.</p>"},{"location":"Apple/2021-06-26-Mac-Setup/#python","title":"Python","text":"<p>See python apple</p>"},{"location":"Apple/2021-06-26-Mac-Setup/#links","title":"Links","text":"<ul> <li>A simple launcher for running ARM64 VM using QEMU on Apple silicon.</li> <li>How to run Windows 10 on ARM or Ubuntu for ARM64 in QEMU on Apple Silicon Mac</li> <li> <p>USB C MacBook Pro Docking Station Dual Monitor Adapter,12 in 1 USB C Hub Adapter to Dual HDMI 4K 60Hz VGA Ethernet AUX 2USB 2.0+2USB 3.0 SD/TF Card Reader 100W PD Charging MacBook Pro Air Dongle</p> </li> <li> <p>Homebrew The Missing Package Manager for macOS (or Linux)</p> </li> </ul>"},{"location":"Embedded/","title":"Embedded Systems","text":""},{"location":"Embedded/#embedded-systems","title":"Embedded Systems","text":""},{"location":"Embedded/#introduction","title":"Introduction","text":"<p>This section contains documentation and guides related to embedded systems development, with a focus on STM32 microcontrollers. Topics include development workflows, toolchains, and practical applications.</p>"},{"location":"Embedded/#contents","title":"Contents","text":"<ul> <li>STM32 Development - Guide to STM32 microcontroller development, covering tools, setup, and programming approaches.</li> <li>STM32 Toolchains and Developer Choice - Comparison of different toolchains and development environments for STM32.</li> </ul>"},{"location":"Embedded/#topics-covered","title":"Topics Covered","text":"<ul> <li>STM32 microcontroller development</li> <li>Development toolchains and environments</li> <li>Embedded C/C++ programming</li> <li>Hardware interfacing and peripherals</li> <li>Firmware development practices</li> </ul>"},{"location":"Embedded/2017-05-30-STM32-Development/","title":"STM32 Development","text":"<p>This online book, this excellent blog and this YouTube delivered \"Embedded Systems Programming Course\" are a little dated but still relevant. It\u2019s possible to follow along using current parts from ST. Today\u2019s best option seems to be the cheap and functional 32F072BDISCOVERY development board (the optional NUCLEO-F072RB board makes mbed simpler, if you go down that route) both of which are based on the STM32F072RB processor.</p> <p>The really useful STM32SnippetsF0 are written for the discovery board above and work for the Nucleo variant with minor modifications. The snippets use the registers directly which is good for their very small code size, clear understanding of how the software and hardware work together and direct relationship with the reference manual: RM0091: STM32F0x1/STM32F0x2/STM32F0x8 advanced ARM\u00ae-based 32-bit MCUs.</p> <p>I found an extremely cheap STM32F030F4P6 break-out board for experiments on eBay \u2013\\$1.69 / \u00a31.30 including headers, usb for power and an 8MHz clock search \u201cSTM32F030F4P6 Minimum System Board\u201d. The ST-Link on the Discovery or Nucleo can be used to program or debug it.</p> <p>The easiest way to program and debug is to use an IDE. Currently there is a free (as in beer) offer for the F0/L0 processors for ARM's Keil Embedded Development Tools (see this FAQ from ST). That IDE uses ARM\u2019s own excellent compiler, for free.</p> <p>The Nucleo variant of the development board is compatible with mbed\u2019s OS 5 and their free online compiler. It is possible to use mbed\u2019s system without their online compiler or tooling see David Welch's mbed samples on GitHub.</p> <p>ST\u2019s STM32CubeMX graphical \u201cinitialization code generator\u201d and stm32cubef0 provide example software, drivers and general development support which can then be used with a variety of toolchains (including GNU \u2013 Makefile). This is helpful from the point of view of samples and ideas but the generated code can be very long, with a lot of abstraction, making it difficult to follow and, according to some sources, can be buggy too.</p>"},{"location":"Embedded/2017-05-30-STM32-Development/#using-other-toolchains","title":"Using Other Toolchains","text":"<p>Integrated IDEs are great but they hide much of what is going on and can lead to bloated firmware. More control and a greater choice of editors and the toolchain require a lot more investment. More than just investment, it requires a choice about what sort of Embedded programmer to be.</p>"},{"location":"Embedded/2017-05-30-STM32-Development/#when-the-chip-hangs","title":"When the Chip hangs\u2026","text":"<p>This was really painful for me because I couldn\u2019t follow these instructions: use the ST supplied Windows ST-Link Utility. Select menu item Target, Settings. Then pick Connect Under Reset (probably currently showing Normal) in the Mode box.</p>"},{"location":"Embedded/2017-07-01-STM32-Toolchains-and-Developer-Choice/","title":"Toolchains and Developer Choice","text":"<p>When I first started down the Embedded developer route, I imagined that the choice of development tools would be easy. I was used to F# from Microsoft where you can make your life complicated but an IDE like Visual Studio is a sensible choice. I use VS Code (similar to Atom) but the truth is that it doesn\u2019t really matter one way or another.</p> <p>In the embedded world things are very different.</p> <p>There is the Arduino experience with one clear toolchain, one clear IDE and a consistent set of hardware with consistent hardware interfaces. (Much later I discovered that Arduino has simply hidden most things away but I digress.)</p> <p>mbed (now owned by ARM) is trying to do a similar thing for ARM Cortex based boards more broadly.</p> <p>There are complete IDEs like ARM's Keil which is currently free for ST F0 and F1 processors.</p> <p>All of the above hide a lot but you have to read and understand datasheets. That includes the microcontroller one (like this one from ST) and also for every part you attach to (like this EEPROM one). That means spending a lot of time looking at the various registers under the Peripherals -&gt; System Viewer menu.</p> <p>Given the need to understand the datasheets, the desire to understand what is going on when debugging, and the fact that ARM systems are designed around reading and writing to memory, David Welch\u2019s approach of working directly with memory addresses makes a lot of sense (e.g. <code>PUT32(GPIODBASE+0x18,0xE0001000);</code> where PUT32 is a tiny function written in assembly language.).</p> <p>Of course, you can actually write everything in just assembly language but that strikes me as going too far: compilers are designed for this. C is an incredibly versatile language, has stood the test of time, has a low overhead and is very close to the hardware. Why not use it?</p>"},{"location":"Embedded/2017-07-01-STM32-Toolchains-and-Developer-Choice/#my-preferences","title":"My Preferences","text":"<p>In my 30+ years of computing, I have always wanted to know what is actually going on under the covers. What is necessary, what is abstracted, what is obscured? Tracking down bugs, efficiency and building compact code is a whole lot easier when you understand these things \u2013 couple this with a comprehensive IDE and you increase your productivity. One without the other just isn\u2019t as good.</p> <p>The other factor, for me, is that you can buy a whole Linux system, including WiFi, BlueTooth etc for less than \u00a310. That means you can do all your high level programming and Internet connectivity using that device with the smaller ARMs giving you direct hardware access and without the complications of pre-emption. Interconnectivity between the Linux host and the ARM device can be provided by SPI, I2C or async. So, with the possible exception of some C++ drivers from the Arduino or similar, there is just no need for programming with a high-level language on the ARM.</p>"},{"location":"Embedded/2017-07-01-STM32-Toolchains-and-Developer-Choice/#toolchains","title":"Toolchains","text":"<p>I use the GNU Toolchain, ST ST-Link tool and VS Code.</p> <p>For GDB debugging use SEGGER\u2019s J-Link for ST-Link on board or this reverse engineered ST Link.</p> <p>With this setup, you can use pretty much anything for development (Notepad++, VS Code, Atom, for example) with a little command line fiddling.</p>"},{"location":"Embedded/2017-07-01-STM32-Toolchains-and-Developer-Choice/#toolchain-gnu-arm-rough-notes","title":"Toolchain \u2013 GNU ARM - Rough Notes","text":"<p>download Linux 64-bit version of GNU ARM GCC toolchain https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads</p> <p>open a bash on Windows prompt</p> <pre><code>mkdir arm &amp;&amp; cd arm\ntar -xvf # the downloaded file\nexport arm_bin=~/Downloads/arm/gcc-arm-none-eabi-6-2017-q1-update/bin`\nexport PATH=$PATH:$arm_bin\n</code></pre> <p>should be able to run <code>bash -c \"make\"</code> from a windows command prompt, from within the source directory.</p>"},{"location":"Embedded/2017-07-01-STM32-Toolchains-and-Developer-Choice/#using-stmcubemx","title":"Using STMCubeMX","text":"<p>Code Generator: copy only the necessary library files</p> <ul> <li>Install STMCubeMX</li> <li>run it, pick a board, config, adjust Project Settings</li> <li>Toolchain/IDE to Makefile</li> <li>Edit project makefile, adjust BINPATH like so: <code>BINPATH =     ~/Downloads/arm/gcc-arm-none-eabi-6-2017-q1-update/bin</code></li> <li>Edit the main.c as required.</li> <li>Remove all the extra source files that you don't need. The bare minimum</li> </ul> <pre><code>C_SOURCES =  \\\nSrc/system_stm32f0xx.c \\\nSrc/main.c \\\nSrc/morse.c\n</code></pre> <p>from the windows command prompt cd to generated source file directory, then compile with</p> <p><code>bash -c \"make\"</code></p> <p>You can use ST's GUI ST-Link Utility to Program &amp; Verify or the same utility from the command line the (the cli version). E.g.</p> <p><code>\"C:\\\\Program Files (x86)\\\\STMicroelectronics\\\\STM32 ST-LINK Utility\\\\ST-LINK Utility\\\\ST-Link\\_CLI.exe\" -me -p build\\\\try.hex -v -rst</code></p> <p>(-me = full chip erase, -p program the following file, -v verify, -rst reset the chip)</p>"},{"location":"Embedded/2017-07-01-STM32-Toolchains-and-Developer-Choice/#when-the-chip-hangs","title":"When the Chip hangs\u2026","text":"<p>This was really painful for me because I couldn\u2019t follow these instructions: use the ST supplied Windows ST-Link Utility. Select menu item Target, Settings. Then pick Connect Under Reset (probably currently showing Normal) in the Mode box.</p>"},{"location":"F%23/","title":"F# Programming","text":""},{"location":"F%23/#f-programming","title":"F# Programming","text":""},{"location":"F%23/#introduction","title":"Introduction","text":"<p>This section explores the F# programming language, a functional-first language for the .NET platform. Topics include reasons for choosing F#, testing strategies, parsing, and computational expressions (monads).</p>"},{"location":"F%23/#contents","title":"Contents","text":"<ul> <li>Continuing to choose F# - Rationale for choosing F# for software development projects.</li> <li>Testing With F# - Testing methodologies and practices with F#.</li> <li>Testing and FParsec - Using FParsec for parsing in F# projects.</li> <li>Understanding and Using FsCheck - Property-based testing with FsCheck in F#.</li> <li>The Point of F# Computational Expressions AKA F# Monads - Understanding F# computational expressions and monads.</li> </ul>"},{"location":"F%23/#topics-covered","title":"Topics Covered","text":"<ul> <li>Functional programming with F#</li> <li>Testing strategies and property-based testing</li> <li>Parsing with FParsec</li> <li>Computational expressions and monads</li> <li>F# for practical applications</li> </ul>"},{"location":"F%23/2017-04-28-Continuing-to-choose-F%23/","title":"Continuing to choose F#","text":"<p>One of my life-long passions is Information Technology (others include my wife, family, exercise, photography, food and drink). I love investigating and trying out new things. My 25 year career in IT hasn't included any significant programming but I\u2019ve dabbled in a few languages.</p> <p>I chose F# a while back as it seemed both interesting and logical to me but no language choice is permanent or exclusive. I wanted to see what alternatives there are now.</p> <p>After a long search and much reflection, I made two choices. Firstly, it had to be a functional language and secondly that language would be F#. Why those choices? I am glad you asked.</p>"},{"location":"F%23/2017-04-28-Continuing-to-choose-F%23/#why-a-functional-language","title":"Why a Functional Language","text":"<p>Functional languages generally, and F# in particular, feel right to me. Feel is this author\u2019s primary reason why he doesn't like F#.</p> <p>I don't like other languages because:</p> <ul> <li> <p>x = x + 1 is nonsense.</p> </li> <li> <p>Shared state, global variables and mutability make things hard to understand     and difficult to debug.</p> </li> <li> <p>While objects are easy to use, I find them difficult to understand and     construct.</p> </li> <li> <p>I understand things better by layout and not by {}; and other tokens.</p> </li> </ul> <p>My first \"real\" program project was modifying a FORTRAN77 application for identifying crystal structures from X-ray diffraction photographs. I changed the source to move from global mutable shared state to passing data between functions. I did this because I couldn't work out what was going on. The original application was probably faster but mine was easier to understand.</p> <p>Of course, immutability requires recursion. I still don't fully understand recursion but I can use it effectively. It's turtles all the way down.</p>"},{"location":"F%23/2017-04-28-Continuing-to-choose-F%23/#why-f","title":"Why F#","text":"<p>F# is functional first but still allows all the other programming models and styles. I love the fact that it is very strict about types and does type inference. It certainly makes you focus on types. My programs break early at compile time and then I can work out why. I love the REPL.</p> <p>My other language needs are that it has to have a future, to be industrial strength, to be highly functional, to have broad support, strong libraries and a good community. For me, F# is simply stronger in all of these things than the alternatives (e.g. Haskell, OCaml, Scala).</p> <p>For the foreseeable future, Microsoft Windows is a viable platform. Some kind of .net will always be a choice and they are, very slowly, moving .net to other platforms. Mono is being actively upgraded. F# is the only mainstream .net language that is fully functional. You can even program iPhone/iPad and Android devices in F# using Xamarin.</p> <p>As for community there are still a lot of .net developers out there and people are going to be maintaining .net systems for a long time to come. Many of the libraries used in F# programs are just ordinary .net ones. All of the advice for .net is transferable: C# has a huge community that is also relevant for F#.</p> <p>The F# community itself is a very friendly place full of scarily smart people. It has one of the larger communities on stackoverflow for a functional language. Because it is based on ML and OCaml basic language concepts are shared with those communities too.</p>"},{"location":"F%23/2017-04-28-Continuing-to-choose-F%23/#other-links","title":"Other Links","text":"<p>See why Colin Bull likes the language. If you\u2019re interested in learning F# then check Biarity log.</p>"},{"location":"F%23/2017-10-17-Testing-With-F%23/","title":"Testing with F#","text":"<p>TL;DR I now use xUnit and FsCheck which I run through Visual Studio's Test Explorer.  Setting-up and using this has been surprisingly straight-forward and a massive leap forward for my programming.</p>"},{"location":"F%23/2017-10-17-Testing-With-F%23/#introduction","title":"Introduction","text":"<p>I have been writing tests for a long time but these have been ad-hoc in-line additions to my programs.  Like adding <code>printfn \"This is the current value of variable f\"</code> statements.  This  has hurt the readability and thus maintainability of my programs.  There was no clear distinction between tests and working code.  </p> <p>I knew that I needed something more as I firmly believe in testing.  From my research a 'proper' system seemed difficult.</p> <p>I have been attracted to property testing since reading Scott Wlaschin's excellent blog and watching Kit Eason's illuminating web cast.  </p>"},{"location":"F%23/2017-10-17-Testing-With-F%23/#picking-fscheck-and-xunit","title":"Picking FsCheck and XUnit","text":"<p>Earlier this week, I took the plunge and invested time into learning FsCheck and, by extension, xUnit and nUnit. </p> <p>NCrunch is really attractive but \u00a3125.10 is a lot for a hobbyist like me but must be peanuts for a professional so I haven't decided.  I think I need to do more testing of testing before I can decide if the time saved will be worth it.</p> <p>FsCheck, which is based on Haskell's QuickCheck, is attractive to me as thinking up properties and testing with random data strikes me as a really good way to fix bugs and think deeply about the production code, leading to refactoring.  However, there are times when I just want to test a specific known cases and for that a unit testing framework is necessary.  </p> <p>I looked at NUnit and xUnit and both seem excellent.  Either would do as they're both well supported, work in similar ways and are extensively used.  I chose xUnit because if the slightly stronger support for FsCheck, its cleaner design and implementation and the fact it's newer.</p> <p>xUnit has a console runner - which I am sure I will use - but I like IDEs so I have gone for the Visual Studio integration.</p>"},{"location":"F%23/2017-10-17-Testing-With-F%23/#learning-how-to-test-properly","title":"Learning How to Test Properly","text":"<p>I just followed the Kit's and Scott's guidance, the specific instructions on the products' web sites and spent some time trying it out.  There were lot of extra web sites that I found useful: see the links below.  </p> <p>In all I spent several days on it.  Well worth the time as now I have a more effective testing system and my tests are clearly marked in the source code.</p>"},{"location":"F%23/2017-10-17-Testing-With-F%23/#useful-links","title":"Useful Links","text":"<ul> <li>FsCheck</li> <li>xUnit </li> <li>http://fsharpforfunandprofit.com/posts/property-based-testing/ Scott's blog about property testing.  Look at this entry too </li> <li>https://skillsmatter.com/skillscasts/9726-a-gazillion-ways-to-test-with-f-sharp Kit's webcast about testing in F#</li> <li>http://blog.ploeh.dk/tags/#F%23-ref There's an FsCheck section in these tags</li> <li>http://blog.mavnn.co.uk/fscheck-breaking-your-code-in-new-and-exciting-ways/ </li> <li>http://www.navision-blog.de/blog/2016/03/21/property-based-testing-in-the-real-world/ </li> <li>http://jackfoxy.com/gaining-fscheck-fluency-through-transparency/ </li> <li>https://stackoverflow.com/questions/38839721/how-do-i-implement-multiple-argument-generation-using-fscheck/38841255#38841255 stackoverflow has useful stuff</li> <li>https://fscheck.github.io/FsCheck/LearningResources.html </li> </ul>"},{"location":"F%23/2017-10-17-Testing-With-F%23/#more-links","title":"More Links","text":"<ul> <li>http://www.ncrunch.net/ Very interesting Visual Studio integration, potentially high productivity gains.</li> <li>https://github.com/haf/expecto A fully F#'d testing framework</li> <li>https://github.com/hedgehogqa/fsharp-hedgehog Another F# implementation of QuickCheck.</li> <li>http://smallcheck.codeplex.com/ Exhaustive small scale testing.</li> </ul>"},{"location":"F%23/2017-10-17-Testing-With-F%23/#quickcheck-links","title":"QuickCheck Links","text":"<p>There's a lot of information about QuickCheck.  QuickCheck has been around for a long time and FsCheck is based on it.  All of this is useful background * https://begriffs.com/posts/2017-01-14-design-use-quickcheck.html QuickCheck information * https://www.stackbuilders.com/news/a-quickcheck-tutorial-generators Generators are the core of property testing * https://www.stuartgunter.org/posts/intro-to-quickcheck/ QuickCheck</p>"},{"location":"F%23/2017-10-23-Testing-and-FParsec/","title":"Testing and FParsec","text":"<p>TL;DR Follow the FParsec Tutorial.</p>"},{"location":"F%23/2017-10-23-Testing-and-FParsec/#introduction","title":"Introduction","text":"<p>Parsing, it's one of those computer sciencey things.  I avoided Computer Science at University because I knew that I'd be doing computing for the rest of my life so I wanted to study something else.  It seems silly on the surface but I guess I didn't want to derail things, or be bored, by studying it too.  I think, on reflection, that I would have been bored out of my mind, judging by my reaction to reading CS textbooks or watching CS videos.  I have digressed.</p> <p>Anyway, I have always been in awe of parsing because that's the first step to writing your own compiler.  Compiling languages is  one foundations of modern computing.  If you can write a compiler, you're a god in my view.</p> <p>Once again, I've decided to make myself uncomfortable and do something that seems magical to me.  Parsing.</p>"},{"location":"F%23/2017-10-23-Testing-and-FParsec/#fparsec","title":"FParsec","text":"<p>If you're using F# then FParsec is the way to go.  Like many other libraries in F#, this one is based on a Haskell original: parsec.  That means that there's lots of material produced that will be easy to adapt to FParsec.</p>"},{"location":"F%23/2017-10-23-Testing-and-FParsec/#getting-started","title":"Getting Started","text":"<p>I just followed the tutorial.  Rather than download the tutorial's source code, I decided to follow along and write it all myself.</p>"},{"location":"F%23/2017-10-23-Testing-and-FParsec/#testing-testing","title":"Testing, testing","text":"<p>I recently discovered proper testing with xUnit and FsCheck so I wanted to use those tools instead of just printing out things to stdout.  But I couldn't, for the life of me, get the values out of the parser to test.  Fog Creek's FParsec blog entry came to the rescue.  I borrowed some of their code:</p> <pre><code>    exception ParseError of string\n    let parse parser input = \n        match run parser input with \n            | Success (result, _, _) -&gt; result \n            | Failure (error, _, _) -&gt; raise (ParseError error) \n</code></pre> <p>Then wrote my first test like this:</p> <pre><code>    [&lt;Fact&gt;]\n    let ``\"1.25\" is parsed as 1.25f`` () =\n        let r = parse pfloat \"1.25\"\n        Assert.Equal(1.25, r)\n</code></pre> <p>The very next test showed me that I had to handle expected failures.  Once again a couple of bloggers to the rescue:</p> <p>First up, Bj\u00f6rn Rochel's one liner:</p> <pre><code>    [&lt;Fact&gt;]\n    let ``pfloat \"1.25E 3\" fails`` () = \n        Assert.Throws&lt;ParseError&gt;(fun () -&gt; parse pfloat \"1.25E 3\" |&gt; ignore)\n</code></pre> <p>Note: pfloat normally return a float which needs to be ignored.</p> <p>Richard Banks suggests a different approach, one that's more AAA (that's Arrange-Act-Assert) like.</p> <pre><code>    [&lt;Fact&gt;]\n    let ``pfloat \"1.25E 3\" fails`` () = \n        let ex = Record.Exception(fun () -&gt; parse pfloat \"1.25E 3\" |&gt; ignore)\n        Assert.IsType&lt;ParseError&gt;(ex)\n</code></pre> <p>I like the terseness of Bj\u00f6rn's version but I also like the consistency of Richard's.  I can't decide which I prefer.</p> <p>Now my tests all work as I would like.  Kind of professional, in my view.</p>"},{"location":"F%23/2017-10-23-Testing-and-FParsec/#useful-links","title":"Useful Links","text":"<ul> <li>FParsec </li> <li>FParsec Tutorial</li> <li>Phil's practical and easy to understand example using turtles - turtles is a very computer science thing</li> <li>Fog Creek's interesting introduction to FParsec from people who use it in production</li> <li>Scott's entry on parsing theory</li> </ul>"},{"location":"F%23/2017-10-23-Testing-and-FParsec/#more-links","title":"More Links","text":"<ul> <li>FsCheck</li> <li>xUnit </li> </ul>"},{"location":"F%23/2017-10-23-Testing-and-FParsec/#parsec-links","title":"Parsec Links","text":"<ul> <li>Parsec Wiki</li> <li>Hackage entry for parsec</li> </ul>"},{"location":"F%23/2017-10-28-Understanding-and-Using-FsCheck/","title":"Understanding and Using FsCheck","text":"<p>TL;DR FsCheck documentation does cover what you need to know and is probably enough for experienced people. For those that need more detail, like me, read below.</p>"},{"location":"F%23/2017-10-28-Understanding-and-Using-FsCheck/#introduction","title":"Introduction","text":"<p>I really like FsCheck's property based testing, which is based on Haskell's QuickCheck, with its randomised inputs. But I have found it tricky to  understand and use it effectively.  I wrote these notes to help other novice F# and FsCheck users to get started.</p>"},{"location":"F%23/2017-10-28-Understanding-and-Using-FsCheck/#basic-principles","title":"Basic principles","text":"<p>In essence, the whole idea around FsCheck, and property based testing is this: find properties of your program that should always be true for all valid data.  The canonical property example is associativity for addition <code>(a + b) + c = a + (b + c)</code> i.e. brackets make no difference.  </p> <p>Testing is 2 parts:</p> <ol> <li>Build the test for the \"property\" (i.e. test) under question.</li> <li>Generate the right kind of data - FsCheck will try to do this automagically. </li> </ol> <p>The property, return type <code>&lt;'Testable&gt;</code>, must either return a Boolean or return unit ().  An exception is a test failure</p>"},{"location":"F%23/2017-10-28-Understanding-and-Using-FsCheck/#building-and-running-tests","title":"Building and Running Tests","text":"<p>The tutorial is good but I will stress a few things.</p> <p>Here the property under test is that a list, when reversed and reversed again should be identical to the original list.  Here's a function that does just that:</p> <pre><code>let revRevIsOrig (xs:list&lt;int&gt;) = List.rev(List.rev xs) = xs\n</code></pre> <p>To make this really explicit, I'm going to turn it into a AAA (Arrange, Act, Assert) pattern.  Arrange means initialising things, in this case getting the data.  Act means running the function (program) with the data.  Assert means verifying that the expected result matches the actual result. </p> <pre><code>// Arrange - partial, note the restriction of the list to &lt;int&gt;\nlet revRevIsOrig (xs:list&lt;int&gt;) = \n    // Act\n    let actual = List.rev(List.rev xs)\n    let expected = xs\n    // Assert\n    actual = expected // should be true\n</code></pre> <p>The other part of this pattern is to run the function with the data:</p> <pre><code>\\\\ The other part of Arrange, and the test execution.\nCheck.Quick revRevIsOrig\n</code></pre> <p>Which gives this result: <pre><code>Ok, passed 100 tests.\n</code></pre></p> <p>The magical or hidden bit is that <code>Check.Quick</code> has inspected the function, in particular looked at the argument's type, <code>xs:list&lt;int&gt;</code>, generated 100 random versions of the argument and then run the test for each version of the argument (i.e. 100 times).  To pass the test all 100 versions of this must have ended with true (i.e. expected  = actual).  More on the data generation later.</p> <p>You can use the above arrangement in your programs and just inspect the results on the output.  No test runner required.</p> <p>To turn this into a form suitable for the various testing frameworks, e.g. xUnit, is relatively easy.  You need to enclose the entire test above in another let binding that takes no arguments and change <code>Check.Quick revRevIsOrig</code> line to <code>Check.QuickThrowOnFailure revRevIsOrig</code>.  We're relying on the fact that the testing framework recognises an exception as a test fail. </p> <pre><code>[&lt;Fact&gt;]\n// normal xUnit stuff\nlet ``Reversing a reversed list is identical to the original list``() = \n    // All of this is the Arrange part now.\n    let revRevIsOrig (xs:list&lt;int&gt;) = \n        let actual = List.rev(List.rev xs)\n        let expected = xs\n        actual = expected\n    // Act and Assert together\n    Check.QuickThrowOnFailure revRevIsOrig\n</code></pre> <p>xUnit calls the function <code>``Reversing a reversed list is identical to the original list``()</code> when you run one of xUnit's test runners.  I like to use xUnit's one that integrates with Visual Studio's Test Explorer.</p> <p>FsCheck has also extended xUnit so we can can decorate the original form of the test with the <code>[&lt;Property&gt;]</code> and, behind the scenes, FsCheck now does something similar to the original <code>Check.Quick revRevIsOrig</code> line.  Although this means that  the original <code>Check.Quick revRevIsOrig</code> line is redundant, leaving it in isn't a huge problem, other than impacting performance and getting extra output.  </p> <p>Our revised test looks like this:</p> <pre><code>[&lt;Property&gt;]\nlet revRevIsOrig (xs:list&lt;int&gt;) = \n    let actual = List.rev(List.rev xs)\n    let expected = xs\n    actual = expected\n</code></pre> <p>Extra details of the results are produced.  With xUnit, these are sent to the output window.</p> <pre><code>[28/10/17 17:47:09 Informational] ------ Run test started ------\n[28/10/17 17:47:10 Informational] [xUnit.net 00:00:00.3866276] Received 1 results from 1 requests\n[28/10/17 17:47:10 Informational] [xUnit.net 00:00:00.3874000]   Starting:    Experiments\n[28/10/17 17:47:10 Informational] [xUnit.net 00:00:00.7217074]   Finished:    Experiments\n[28/10/17 17:47:10 Informational] ========== Run test finished: 1 run (0:00:00.7749113) ==========\n</code></pre> <p>So we have seen 3 ways to run the test:</p> <ol> <li>Inside the code printing to the standard output using <code>Quick.Check</code></li> <li>Using the standard method of your testing framework and including  <code>Check.QuickThrowOnFailure</code> as part of the test definition.</li> <li>Using the FsUnit's extension of the framework to simplyfy 2. above, if the extension exists (i.e. xUnit and FsUnit)</li> </ol>"},{"location":"F%23/2017-10-28-Understanding-and-Using-FsCheck/#standard-types-arent-enough","title":"Standard Types Aren't Enough","text":"<p>Remember the magic part where FsUnit figured out how to build 100 examples of data for your tests?  That works with standard primitive types (e.g. int, float, char) and will work on your types that are derived from those. </p> <p>I've been learning FParsec and using FsCheck at the same time to investigate some properties.  I wanted to check that that FParsec parses just like the standard parsing the .net framework.  Silly me.</p> <p>Firstly, here's some helpers for FParsec.</p> <pre><code>open FParsec\n\nexception ParseError of string\nlet parse parser input = \n    match run parser input with \n        | Success (result, _, _) -&gt; result\n        | Failure (error, _, _) -&gt; raise (ParseError error) \n</code></pre> <p>And I wrote this little function and ran it with quick check.</p> <p><pre><code>let ``FParsec correctly parses floats`` (x:float) = \n    let str = x.ToString()\n    let expected = System.Double.Parse(str)\n    let actual = parse pfloat str\n    expected = actual\n\nCheck.Quick ``FParsec correctly parses floats``\n</code></pre> This produces a successful result like this:</p> <pre><code>Falsifiable, after 8 tests (0 shrinks) (StdGen (1042719141,296369266)):\nOriginal:\n-infinity\nwith exception:\nFSI_0005+ParseError: Exception of type 'FSI_0005+ParseError' was thrown.\n   at FSI_0005.parse[a](FSharpFunc`2 parser, String input) in C:\\Users\\jackc\\Documents\\Git\\fsharpExperiments\\Experiments\\FsCheck.fs:line 31\n   at FSI_0006.FParsec correctly parses floats(Double x) in C:\\Users\\jackc\\Documents\\Git\\fsharpExperiments\\Experiments\\FsCheck.fs:line 169\n   at FSI_0006.it@171-1.Invoke(Double x) in C:\\Users\\jackc\\Documents\\Git\\fsharpExperiments\\Experiments\\FsCheck.fs:line 171\n   at FsCheck.Testable.evaluate[a,b](FSharpFunc`2 body, a a) in C:\\Users\\Kurt\\Projects\\FsCheck\\FsCheck\\src\\FsCheck\\Testable.fs:line 151\nval ( FParsec correctly parses floats ) : x:float -&gt; bool\nval it : unit = ()\n</code></pre> <p>Oh.</p> <p>Well then.</p> <p>First things first.  Let me turn this into an xUnit Fact:</p> <p><pre><code>[&lt;Fact&gt;]\nlet ``FParsec correctly parses floats - Fact``() =  \n    let floatParser (x:float) = \n        let str = x.ToString()\n        let expected = System.Double.Parse(str)\n        let actual = parse pfloat str\n        expected = actual\n    Check.QuickThrowOnFailure floatParser\n</code></pre> and turn that into an xUnit Property:</p> <p><pre><code>[&lt;Property&gt;]\nlet ``FParsec correctly parses floats - Property``(x:float) =  \n    let str = x.ToString()\n    let expected = System.Double.Parse(str)\n    let actual = parse pfloat str\n    expected = actual\n</code></pre> So now we have 3 versions of the same test: 1. ``FParsec correctly parses floats<code>(x:float) 2. \\</code>FParsec correctly parses floats - Fact<code>() 3. \\</code>FParsec correctly parses floats - Property``(x:float)</p> <p>All the test fail in the same way as pfloat is unable to parse <code>infinity</code> (also it can't handle <code>-infinity</code> or <code>nan</code>).  This is surprising to me.  This result alone will affect how I use <code>pfloat</code> in the future.  I would not have found this out using my previous testing techniques.</p> <p>Clearly I need to handle the above facts in any code I write.  But I also want to make sure that pfloat does handle all of the other kinds of floats.</p> <p>So the type <code>float</code> just isn't going to work for these tests.  I need a closely related type to work with, a custom one that doesn't produce infinities or things which aren't numbers.  This is where custom types and generators come in handy.  That I'll talk about in my next post.</p>"},{"location":"F%23/2017-10-28-Understanding-and-Using-FsCheck/#useful-links","title":"Useful Links","text":"<ul> <li>FsCheck</li> <li>http://blog.ploeh.dk/tags/#FsCheck-ref </li> <li>http://blog.mavnn.co.uk/fscheck-breaking-your-code-in-new-and-exciting-ways/ </li> <li>http://www.navision-blog.de/blog/2016/03/21/property-based-testing-in-the-real-world/ </li> <li>http://jackfoxy.com/gaining-fscheck-fluency-through-transparency/ </li> </ul>"},{"location":"F%23/2017-10-28-Understanding-and-Using-FsCheck/#more-links","title":"More Links","text":"<ul> <li>http://www.ncrunch.net/ Very interesting Visual Studio integration, potentially high productivity gains.</li> </ul>"},{"location":"F%23/2017-10-30-The-Point-of-F%23-Computational-Expressions-AKA-F%23-Monads/","title":"What's the Point of a F# Computational Expression AKA F# Monad?","text":"<p>TL;DR To make ugly, complex, repetitive code simpler and more elegant to write.  In this sense, it's like the reason why you'd write a function.</p> <p>e.g.  <pre><code>query {\n    for customer in db.Customers do\n        select customer\n}\n</code></pre> Looks like a SQL query to me.  </p>"},{"location":"F%23/2017-10-30-The-Point-of-F%23-Computational-Expressions-AKA-F%23-Monads/#introduction","title":"Introduction","text":"<p>I could not, for the life of me, understand the point of F# Computational Expressions (which can, as I understand it now, also be used to write a Monad).  I agree with what Scott wrote about monads. </p> <p>My current understanding is that you use a computational expression when you want to: 1. Express a solution to a problem in an elegant domain specific way. 2. Hide complex, repetitive, side-effect-ridden code into something easy to use.</p> <p>The examples that spring to mind are <code>async { expression }</code> or <code>seq { expression }</code>.  Both are simple to use and written as computational expressions.  They are all, effectively, mini domain specific languages (DSLs).</p> <p>Here's another, easy to understand, example from this post:</p> <p>Project Euler Problem 1: Find the sum of all the multiples of 3 or 5 below 1000.</p> <p>F# computational expression solution: <pre><code>let pe1 limit = eb2 { for x = 0 to limit - 1 do yield x }\n\nlet computationalSolution = pe1 1000\n</code></pre></p> <p>The original imperative solution looked like this:</p> <pre><code>let pe1_while limit =\n    let mutable acc = 0\n    let mutable x = 0\n    while x &lt; limit do\n        if x % 5 = 0 || x % 3 = 0 then acc &lt;- acc + x\n        x &lt;- x + 1\n    acc\n\nlet imperativeSolution = pe1_while 1000\n</code></pre>"},{"location":"F%23/2017-10-30-The-Point-of-F%23-Computational-Expressions-AKA-F%23-Monads/#simple-to-use-doesnt-mean-simple-to-write","title":"Simple to Use Doesn't Mean Simple to Write","text":"<p>It is straightforward to use a computational expression but it is not obvious, to me now, how to write one.  See below for the source for eb2 above.  I don't think that it'll be worth it for a one-off problem like Project Euler 1.</p> <pre><code>type Euler1Builder2() =\n    member b.Yield(x) = if x % 5 = 0 || x % 3 = 0 then x else 0\n    member b.For(generated, f) = generated |&gt; Seq.map (fun x -&gt; f x)\n    member b.Run(filtered: int seq) = filtered |&gt; Seq.sum \n\nlet eb2 = new Euler1Builder2()\n</code></pre> <p>Using <code>seq { 0 .. 10 .. 100 }</code> is simple enough to use everywhere.   I bet the source code for a sequence expression is a whole lot more complicated than that line of code implies.</p>"},{"location":"F%23/2017-10-30-The-Point-of-F%23-Computational-Expressions-AKA-F%23-Monads/#links","title":"Links","text":"<ul> <li>The Road to Functional Programming in F# \u2013 From Imperative to Computation Expressions</li> <li>Computation expressions: Introduction </li> <li>Monads as computation</li> </ul>"},{"location":"Games/","title":"Games","text":""},{"location":"Games/#games","title":"Games","text":""},{"location":"Games/#introduction","title":"Introduction","text":"<p>This section covers notes and resources related to video games, particularly focusing on simulation, strategy, and exploration games. Topics include gameplay mechanics, modding, and optimization strategies.</p>"},{"location":"Games/#contents","title":"Contents","text":"<ul> <li>Factorio - Notes on the factory building and automation game Factorio.</li> <li>Astroneer - Information about the space exploration and base-building game Astroneer.</li> </ul>"},{"location":"Games/#supporting-files","title":"Supporting Files","text":"<ul> <li>factorio.db - Database file related to Factorio game elements and mechanics.</li> <li>factorio.xlsx - Spreadsheet containing Factorio calculations and planning aids.</li> </ul>"},{"location":"Games/#topics-covered","title":"Topics Covered","text":"<ul> <li>Factory building and optimization in Factorio</li> <li>Space exploration in Astroneer</li> <li>Resource management and logistics</li> <li>Game mechanics and strategies</li> <li>Base design and planning</li> </ul>"},{"location":"Games/2020-01-15-Factorio/","title":"Factorio","text":""},{"location":"Games/2020-01-15-Factorio/#factorio","title":"Factorio","text":"<p>Factorio related stuff</p>"},{"location":"Games/2020-01-15-Factorio/#introduction","title":"Introduction","text":"<p>Map exchange string</p> <pre><code>&gt;&gt;&gt;eNpjYBBk8GeAAAcgtudgSc5PzGFgOOAAw1zJ+QUFqUW6+UWpy\nMKcyUWlKam6+ZmoilPzUnMrdZMSi4GKG+xhmCOzKD8P3QTW4pL8P\nLDI6lWr7EGYtaQoNbUYIqJlB9LIXVqUmJdZmgvSCxMD04znxbMuN\nrTIMYDw/3oGhf//QRjIegD0xgOol0A2MQLFoIBFIjk/r6QoP0e3O\nLWkJDMv3SqxtMIqKTOxmFPXQM/QAAQ0sClJK0otLE3NS660yi3NK\ncksyMlMLeIw1gNrMJBF15Gbn1lcUlqUCjfZwBSkThenOqzGG+oZg\nwFrck5mWhoDg4IjEDuBvMHIyAjzEZSh5wBlfLCHMA4kwUQ8YQw/B\n5xSKjCGCZI5ENs/IzGqRda5P6wqAVoBVcXhgGBAJFvAkoy9b7cu+\nH7sgh3jn5UfL/kmJdgzGrqKvPtgtM4OKMkOcjcTnJg1EwR22sP8B\nDPzgT1U6qY949kzIPDGnpEVpEMERDhYAIkD3swMjAJ8QNaCHiChI\nAMPETuYMSIOjGlg8A3mk8cwxmV7dH8AA8IGZLgciDgBIlgRgQx0G\nTTgHfodGB3kYbKSCCVA/UYMyG5IQfjwJMzaw0j2ozkEMyKQ/YEmo\nuKAJRq4QBamwIkXzHDXAMPzAjuM5zDfgZkBAT7YM2QK1p0BAMtI4\nhE=&lt;&lt;&lt;\n</code></pre>"},{"location":"Games/2020-01-15-Factorio/#lazy-bastard","title":"Lazy Bastard","text":"<p>Lazy Bastard, 0.17 Edition To disable crafting <code>/permissions</code> # turn off \"Craft\"</p> <ul> <li>1 coal 14 Cu smelted, 21 Cu mined</li> <li>1 coal just under 7 Fe mined burner miner</li> </ul> <p>Mine Huge Rock Place Burner miner, 2/3 fuel Place furnace 1/3 fuel Mine other huge rocks build 1 buner miner, 2 furnace For this run, you will need to mine 115 iron and 34 copper. I would suggest doing the iron first.</p> <p>Need:</p> <ul> <li>For 115 iron, you will need to put 18 coal in the burner miner, and 9 coal in the furnace.</li> <li>For 34 copper, you will need put 6 coal in the burner miner, and 3 coal in the furnace.</li> <li>Please also have 1 wood on hand.</li> </ul> <p>Then, pick up your starter furnace. You will be consuming this in making the boiler. * Pump (8 crafts total) = 1 craft + 1 pipe (1 craft) + 1 gear (1 craft) + 2 green boards (5 crafts = 2 crafts + 6 copper cables [3 crafts] + 2 iron [0 crafts]) * Boiler (5 craft total) = [added Arch5Shuttle2] 1 craft + Furnace (0 crafts) + 4 pipe (4 crafts) * Engine (14 crafts total) = 1 craft + 10 iron (0 crafts) + 8 gears (8 crafts) + 5 pipe (5 crafts) * Wooden pole (2 crafts total) = 1 craft + 1 wood (0 crafts) + 2 copper cables (1 craft) * 10 red science (20 crafts total) = 10 crafts + 10 copper (0 crafts) + 10 gears (10 crafts) * Lab (40 crafts total) = 1 craft + 10 gear (10 crafts) + 10 green boards (25 crafts = 10 crafts + 30 copper cables [15 crafts] + 10 iron [0 crafts]) + 4 yellow belts (4 crafts = 2 crafts + 2 gears [2 crafts] + 2 iron [0 crafts]) * Assembler (14 crafts total) = 1 craft + 9 iron (0 crafts) + 5 gears (5 crafts) + 3 green boards (8 crafts = 3 craft[iPad] 1 craft.  5 stone</p>"},{"location":"Games/2020-01-15-Factorio/#links","title":"Links","text":"<ul> <li>Nerfums Speedrun Planning</li> <li>(https://nilaus.atlassian.net/wiki/spaces/PM/pages/1151369217/Factorio+S33+-+100+Achievements)</li> <li>https://docs.google.com/spreadsheets/d/1Id_Q3cFLUHoTbn_XLZ2i65tgV30N-a_WXXLrmOzMuGU/edit#gid=301269558</li> <li>https://davemcw.com/factorio/tech-tree/</li> <li>https://wiki.factorio.com/Electronics_(research)</li> <li>http://xtvideos.net/factorio/blueprint/</li> </ul> <ul> <li>Console</li> <li>Keyboard Bindings</li> </ul>"},{"location":"Games/2022-11-09-Astroneer/","title":"Astroneer","text":""},{"location":"Games/2022-11-09-Astroneer/#astroneer","title":"Astroneer","text":""},{"location":"Games/2022-11-09-Astroneer/#introduction","title":"Introduction","text":""},{"location":"Games/2022-11-09-Astroneer/#sppedrun","title":"Sppedrun","text":"<p>Sylva: canister, large platform A, 3 generators (of 8 total), 250 bytes, smelter caverns for 3 laterite, 1 sphalerite, 5 quartz,  outside for 7 ammonium, 1 clay, 2250 bytes Al from laterite, Zn from sphalerite lg priner Launch to Glacio with 1 Zn Glacio: 1 hemaite, 12 graphite (9 packages) Desolo: 2 wolframite,  triptych (Zn) Sylva: 4u H, 1 Diamond, 1 Grahene Launch with Atmostpheric, medium platform B, mediuim printer, 5 generators, drill mod 2, 1u H, 2 resin, 2 quartz Atrox: large platform A, atmospheric, 1 methane, 1 S, 1 triptich (H) Sylva: gateway, 2 triptichs (quartz), 1 explosive poweder, 1 Si Glacio: triptych (diamond) Calidor: triptych (explosive powder) Vesania: triptych (graphene) Novus: triptych (Si) Satellite - 7 triptychs</p>"},{"location":"Games/2022-11-09-Astroneer/#links","title":"Links","text":"<ul> <li>https://docs.google.com/presentation/d/e/2PACX-1vRU9D4rIqXjCjSGcDCeVcWpKxcS1264fQPeP6bVbhwRdnj_ArMcks5BrLtVWXNqT3BkD9XgAqZBUloR/pub?start=false&amp;loop=false&amp;delayms=60000&amp;slide=id.p</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"Linux/","title":"Linux","text":""},{"location":"Linux/#linux","title":"Linux","text":""},{"location":"Linux/#introduction","title":"Introduction","text":"<p>This section contains documentation and guides related to Linux operating systems, administration, and tools. Topics include networking, system configuration, distributions like Alpine and Arch, and productivity tools such as Vim and Tmux.</p>"},{"location":"Linux/#contents","title":"Contents","text":"<ul> <li>Traffic Manager Not Firewall - Managing network traffic in Linux.</li> <li>DNS Setup For DIY Home Router - DNS configuration for Linux-based routers.</li> <li>Simplest possible Linux boot - Minimal bootable Linux setup.</li> <li>FileSystems - Linux filesystem options and management.</li> <li>DD - Using the dd command for disk operations.</li> <li>Alpine Linux Install - Guide to installing Alpine Linux.</li> <li>Booting Linux and Other Operating Systems - Boot processes and multi-boot setups.</li> <li>Arch Linux GUI VNC - Setting up VNC with Arch Linux.</li> <li>Arch Linux Installation - Guide to installing Arch Linux.</li> <li>Vim - Using and configuring the Vim text editor.</li> <li>Tmux - Terminal multiplexer setup and usage.</li> </ul>"},{"location":"Linux/#topics-covered","title":"Topics Covered","text":"<ul> <li>Linux installation and configuration</li> <li>Networking and DNS setup</li> <li>Filesystems and disk operations</li> <li>Alpine and Arch Linux distributions</li> <li>Terminal tools: Vim and Tmux</li> <li>Remote access with VNC</li> <li>Boot processes and systemd</li> </ul>"},{"location":"Linux/2020-01-07-Traffic-Manager-Not-Firewall/","title":"Traffic Manager Not Firewall","text":""},{"location":"Linux/2020-01-07-Traffic-Manager-Not-Firewall/#traffic-manager-not-firewall","title":"Traffic Manager Not Firewall","text":"<p>That thing called a \"Firewall\" really is just a traffic manager: every device must be individually secure.</p>"},{"location":"Linux/2020-01-07-Traffic-Manager-Not-Firewall/#introduction","title":"Introduction","text":"<p>I have had the privilege to work with large \"blue chip\" organisations and some astonishingly able IT people over my career.  One lesson was about the supposed security of private networks vs the Internet.  As one CSO (Chief Security Officer) said \"People imagine that their networks provide a hard protective shell.  That shell is riddled with holes and their private networks contain suspect devices\".</p> <p>DMZ, Firewall, etc are all words used to describe the points of contact between private, home or company, networks with the Internet.  They imply that these firewalls and related devices provide strong protection from the Internet whereas nothing could be further from the truth.  Firewalls provide traffic management, keeping inside traffic apart from outside, and this traffic management can certainly help with security.  The less prying eyes on the network the better.  </p> <p>The idea that security problems are \"out there\" on the Internet and other networks is wrong. Even in the best organisations, with well managed networks, there will be suspect device: devices that have been on other networks, guest devices, compromised devices and devices that cannot be made secure (old pinters, for example). Thus any network may contain devices that can attack other devices from within the \"secure\" network. It is possible, but not trivial, to secure networks but don't imagine that a \"firewall\" suddenly makes your network secure.</p> <p>So a private network isn't any safer than the Internet. It is exactly as safe as the Internet. Assume that your devices are exposed at all times people who are actively trying to break into them. Any smart device in a private network could be compromised and attack any and all other devices: that smart washing machine, or that printer, for example. A private network isn't secure but each device in it can be made more secure - and protected from other devices - through good practices on those devices: strong passwords, securely updated, etc.</p>"},{"location":"Linux/2020-01-07-Traffic-Manager-Not-Firewall/#simple-traffic-manager","title":"Simple Traffic Manager","text":"<p>This simple traffic manager allows all internal traffic to access and pass through the router but will only allow traffic in the reverse direction if it has been started from a device in the internal network.  It will drop all traffic from Martian IP addresses.</p> <pre><code>cat &gt; /etc/nftables.conf &lt;&lt; \"EOF\"\n#!/usr/sbin/nft -f\nflush ruleset\n\ndefine wan = eth0\ndefine lan = eth1\ndefine private_special_purpose = {10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.0.0.0/24, 192.168.0.0/16, 198.18.0.0/15}\ndefine documentation_special_purpose = {192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24}\ndefine internet_special_purpose = {192.88.99.0/24, 224.0.0.0/4, 240.0.0.0/4}\n\n# Martian packets \"contain a source or destination address that is reserved for special-use\" https://en.wikipedia.org/wiki/Martian_packet\ndefine martians = {$private_special_purpose, $documentation_special_purpose, $internet_special_purpose}\n\n# Add the \"log counter\" options to monitor policies \ntable ip filter {\n  chain input {\n    type filter hook input priority filter; policy drop;\n\n    meta if $wan ip saddr $martians drop\n\n    ct state invalid drop\n\n    meta if lo ct state new accept\n\n    meta if $lan ct state new accept\n\n    icmp type echo-request accept\n\n    ct state established,related accept\n  }\n\n  chain forward {\n    type filter hook forward priority filter; policy drop;\n\n    meta if $lan meta oif $wan accept\n\n    meta if $wan meta oif $lan ct state established,related accept\n  }\n\n# Output hook is accept by default \n\n}\n\n# first packets in a specific communiction touch the nat table \n# - the rest are then established, connected\ntable ip nat {\n  chain postrouting {\n    type nat hook postrouting priority srcnat;\n\n    oif $wan masquerade persistent\n  }\n}\nEOF\n</code></pre> <p>Followed by:</p> <pre><code>nft -f /etc/nftables.conf\nnft list ruleset # view result\n</code></pre>"},{"location":"Linux/2020-01-07-Traffic-Manager-Not-Firewall/#using-iptables-examples","title":"Using IPTABLES Examples","text":"<p>If you have an set of <code>iptables</code> rules that you would like to use in <code>nft</code> you can use the following commands to see what the ruleset looks like in <code>nftables</code>:</p> <p>Use the commands  <pre><code>iptables-save &gt; save.txt\niptables-restore-translate -f save.txt\n</code></pre></p>"},{"location":"Linux/2020-01-07-Traffic-Manager-Not-Firewall/#links","title":"Links","text":"<ul> <li>Moving from iptables to nftables</li> <li>Reserved IP addresses</li> <li>nftables wiki</li> <li>Quick reference-nftables in 10 minutes</li> <li>Alpine Linux Stateful Firewall - deadnull</li> </ul>"},{"location":"Linux/2020-01-08-DNS-Setup-For-DIY-Home-Router/","title":"DNS Setup For DIY Home Router","text":""},{"location":"Linux/2020-01-08-DNS-Setup-For-DIY-Home-Router/#dns-setup-for-diy-home-router","title":"DNS Setup For DIY Home Router","text":"<p>Modifying my DIY router to support my own DNS.  Now I can build the Upside-Down-Ternet</p>"},{"location":"Linux/2020-01-08-DNS-Setup-For-DIY-Home-Router/#introduction","title":"Introduction","text":"<p>Previously I built my own DIY router on a Raspberry Pi. Now I am building my own DNS server using BigDinosaur's notes. and the Arch Linux specific bind instructions. The aims are to implement DNS for my own domain and link DHCP to DNS.</p>"},{"location":"Linux/2020-01-08-DNS-Setup-For-DIY-Home-Router/#private-domains","title":"Private Domains","text":"<p>There are 2 sets of top level domains (tlds) that can be used in private networks:</p> <ul> <li>The IETF reserved <code>.test .example .invalid .localhost</code></li> <li>ICAN will never allocate <code>.corp .home .mail</code></li> </ul> <p>I am using chidley.test as the domain name here.</p>"},{"location":"Linux/2020-01-08-DNS-Setup-For-DIY-Home-Router/#installation","title":"Installation","text":"<p>For installation and configuration I just followed Arch Linux's instructions modified by BigDinosuar's article.</p> <pre><code>pacman -S wget bind #wget for the root.hint update\n</code></pre> <p>Executing <code>/usr/sbin/rndc-confgen -a</code> generates the <code>/etc/rndc.key</code> that is needed for secure updating of DHCP/DNS.  <code>named</code> needs to be able to read the key file.</p> <pre><code>chown named:named /etc/rndc.key\n</code></pre> <p>Here is the <code>/etc/dhcpd.conf</code> file that has been adjusted from the most basic one for dynamic updates of DNS.  See BigDinosaur's and semicomplete's notes for more explanations.</p> <p><pre><code>ddns-updates on;\nddns-update-style interim;\nddns-domainname \"chidley.test.\";\nddns-rev-domainname \"in-addr.arpa.\";\n\nupdate-static-leases on;\nauthoritative;\ninclude \"/etc/rndc.key\";\nallow unknown-clients;\n\noption domain-name \"chidley.test\";\noption domain-name-servers 10.1.0.1, 8.8.8.8;\noption subnet-mask 255.255.0.0;\noption routers 10.1.0.1;\n\nzone chidley.test. {\n    primary localhost; \n    key rndc-key; \n    }\n\nzone 1.10.in-addr.arpa. {\n    primary localhost;\n    key rndc-key; \n    }\n\nsubnet 10.1.0.0 netmask 255.255.0.0 {\n  range 10.1.1.1 10.1.200.250;\n}\n\n# No DHCP service in DMZ network (192.168.2.0/24)\nsubnet 192.168.2.0 netmask 255.255.255.0 {\n}\n</code></pre> The Arch Linx Wiki has concise information on BIND with the simplest of examples, this has been extended following the ISC recommendations.  I used BigDinosaur and semicomplete to adjust it for dynamic updates of DHCP and DNS</p> <pre><code>acl \"trusted\" {\n    10.1.0.0/16;\n    localhost;\n    localnets;\n    };\n\ninclude \"/etc/rndc.key\";\n\noptions {\n    directory \"/var/named\";\n    pid-file \"/run/named/named.pid\";\n\n    listen-on { any; };\n    forwarders { 10.1.0.1; 8.8.8.8; };\n\n    allow-query { any; };\n    allow-recursion { trusted; };\n    allow-query-cache { trusted; };\n    allow-transfer { trusted; };\n\n    version none;\n    hostname none;\n    server-id none;\n};\n\nzone \"chidley.test\" {\n    type master;\n    file \"chidley.test.zone\";\n    allow-update { key rndc-key; };\n};\n\nzone \"1.10.in-addr.arpa\" {\n    type master;\n    file \"1.10.rev\";\n    allow-update { key rndc-key; };\n};\n\nzone \".\" IN {\n    type hint;\n    file \"root.hint\";\n};\n</code></pre> <p><code>/var/named/chidley.test.zone</code> is based on Arch Linux example zone file:</p> <pre><code>$TTL 300    ; 5 mins for testing\n; chidley.test\n@   IN  SOA alampi.chidley.test. postmaster.chidley.test. (\n            1   ; Serial\n            28800   ; Refresh\n            1800    ; Retry\n            604800  ; Expire - 1 week\n            38400   ; minimum (10 hours 40 minutes)\n            )\n        IN  NS  alarmpi\nalarmpi     IN  A   0.0.0.0\nlocalhost   IN  A   127.0.0.1\n</code></pre> <p>An almost identical one for <code>/var/named/1.10.rev</code>:</p> <pre><code>$ORIGIN .\n$TTL 300    ; 5 mins for testing\n; 1.10.rev\n1.10.in-addr.arpa   IN SOA  alarmpi.chidley.test. webmaster.chidley.test. (\n            1   ; serial\n            10800   ; refresh (3 hours)\n            3600    ; retry (1 hour)\n            604800  ; expire (1 week)\n            38400   ; minimum (10 hours 40 minutes)\n                    )\n        NS  alarmpi.chidley.test.\n</code></pre> <p>BIND (named) needs read and write access to all of the files in <code>/var/named</code>: <code>chown named:named /var/named/*</code></p> <p>I created <code>roothintupdate.sh</code> helper file for updating root.hint</p> <pre><code>#!/bin/bash\n\nDATE=`date -u +%Y%m%d`\nmv /var/named/root.hint /var/named/root.hint-${DATE}\n\nwget https://www.internic.net/domain/named.root -O /var/named/root.hint\nchown named:named /var/named/root.hint\nchmod 644 /var/named/root.hint\nsystemctl restart named\n</code></pre>"},{"location":"Linux/2020-01-08-DNS-Setup-For-DIY-Home-Router/#testing-testing-testing","title":"Testing, testing, testing","text":"<p>These configuration files are very hard to get right, so testing is essential.  Here are some commands that I used for this:</p> <pre><code>journalctl -f #to view the log as you request DHCP addresses\nnamed-checkzone 1.10.in-addr.arpa 1.10.rev\nnamed-checkzone chidley.test. chidley.test.zone\nnamed-checkconf /etc/named.conf\nsystemctl status dhcpd4@ethusb0\nsystemctl status named\n</code></pre> <pre><code>% nsupdate\n&gt; server 10.1.0.1\n&gt; key rndc-key N8Hk2RUFO84bEVl3uGTD2A==\n&gt; zone test\n&gt; update add 20.20.1.10.in-addr.arpa 600 IN PTR deleteme.chidley.test.\n&gt; send\n&gt; update add deleteme.chidley.test. 600 IN A 10.1.20.20\n&gt; send\n</code></pre>"},{"location":"Linux/2020-01-08-DNS-Setup-For-DIY-Home-Router/#links","title":"Links","text":"<ul> <li>Upside-Down-Ternet</li> <li>BigDinosaur's notes</li> <li>The IETF </li> <li>test example invalid and localhost reserved tlds <code>.test .example .invalid .localhost</code></li> <li>ICAN </li> <li>Non allocation of corp home and mail tlds</li> <li>Arch Linux DHCPD instructions</li> <li>semicomplete's notes on dynamic update of DNS via DHCP</li> <li>Arch linux bind</li> <li>Talk:BIND</li> <li>Arch Linux example zone file</li> <li>ISC recommendations for trust</li> </ul>"},{"location":"Linux/2020-01-27-Simplest-possible-Linux-boot/","title":"Simplest possible Linux boot","text":""},{"location":"Linux/2020-01-27-Simplest-possible-Linux-boot/#simplest-possible-linux-boot","title":"Simplest possible Linux boot","text":""},{"location":"Linux/2020-01-27-Simplest-possible-Linux-boot/#introduction","title":"Introduction","text":"<p>All of this comes from Rob Landley's talk at the Linux Foundation Tutorial: Building the Simplest Possible Linux System - Rob Landley, se-instruments.com - YouTube</p> <p>For the simplest system required to build itself, there are 4 conceptual components required:</p> <ul> <li>Kernel - e.g, Linux</li> <li>C library - musl libc</li> <li>Toolchain - compiler, linker, etc</li> <li>Command-Line utilities - busybox, toybox</li> <li> <p>The Buildroot user manual</p> </li> <li> <p>Aboringinal Linux, and the actual 7 packages required GitHub source</p> </li> <li>Linux print statements, from anywhere at any time Writing to a real serial device (pl011 console putchar) anytime, even during boot, from Linux</li> <li>Cross compiling</li> <li>Simple main.c hello world as init</li> <li>Hello World, bare metal Freedom Embedded: Hello world for bare metal ARM using QEMU</li> <li>QEMU Explanation</li> <li>Linux Kernel booting mounting a root file system, cpio archive extracted into initramfs (ramfs/tmpfs) and looks * for <code>init</code> (previously <code>linuxrc</code>)</li> <li>Linux File Systems Explanations Block backed (as used on a disk, like ext2), pipe backed (it\u2019s a program providing data over a protocol like NFS and SAMBA do over a network), RAM backed file system (using a system like the disk cache e.g. ramfs, tmpfs), synthetic file system (proc, sys). <code>initrd</code> is a RAM disk is a block backed file system stored in RAM so this also needs a page cache - less efficient than ramfs.</li> <li>running <code>init</code> from top level directory </li> <li>linux/init/main.c <code>start_kernel</code> function and <code>kernel_init</code> function has a list of backup places to look fir init, including <code>/bin/sh</code>.</li> <li>what happens during Kernel booting Boot, mount Linux root file system, can use CPIO archive that is extracted to, say, initramfs or boot from a block device (root= option), run a program called \u201cinit\u201d vmLinux is an ELF format and then some transformatio (binary?) to get bzImage</li> <li><code>initrd</code> kernel parameter is designed for block devices but will use <code>cpio</code> and extract to <code>initramfs</code>.  Also * <code>rdinit</code> has been used in the past</li> <li>Linux kernel command line required <code>console=</code> serial console</li> <li>www.kernel.org Documentation</li> <li>The kernel\u2019s command-line parameters</li> <li>busybox addition to init and configuration of</li> <li>Defconfig is default configuration, <code>make help</code> will often tell you the various targets</li> <li> <p>kbuild - What exactly does Linux kernel\u2019s <code>make defconfig</code> do? - Stack Overflow</p> </li> <li> <p>Repackage a cpio as squashfs or ext2 using mksquashfs or mkfs.ext2 respectively</p> </li> <li>Loop back device will create a file that looks like a block device (i.e. a whole file system)</li> </ul> <pre><code>dd if=/dev/zero of=blah.img bs=1M count=256\nmke2fs blah.img\nmkdir blah_subdir\nmount -o loop blah.img blah_subdir\n# will show up as `/dev/loop` something\n# add files etc\ngzip blah.img # gzip image\n</code></pre> <ul> <li>usb flash file systems have problems and need special treatment to do with erase block size</li> <li>start of intro to mkroot</li> <li>mkroot walkthrough</li> <li>Standard Linux directories</li> <li>Start of discussion about <code>init</code></li> <li>PID 1 and <code>init</code>, why it's special</li> <li>\"oneit\" Rob oneit</li> <li>devtmpfs and devpts to populate the <code>/dev</code> directory with the devices and <code>/dev/pts</code> with pseudo terminals  (don't need udev or systemd as the kernel does it)</li> <li>more stuff about consoles, contolling ttys, signals and <code>oneit</code></li> <li>QEMU and inputting environmental variables from the its command line</li> <li><code>/etc/passwd</code> &amp; <code>/etc/group</code> discussion</li> <li>Miniconfig KCONFIG_ALLCONFIG=mini.conf</li> <li>Kernel building</li> <li>Linux kernel config</li> <li>Minimal config for kernel (e.g. ARM)</li> </ul>"},{"location":"Linux/2020-01-27-Simplest-possible-Linux-boot/#get-mkroot","title":"Get mkroot","text":"<pre><code>git clone https://github.com/landley/mkroot\nless mkroot/README # instructions\n</code></pre> <p>need to install suitable packages on the starter system</p> <pre><code>pacman -S qemu cpio bc # may not need base-devel musl\n</code></pre> <p>download native compiler from musl libc cross compiler for mkroot Extract the native compiler in a suitable directory</p> <pre><code>mkdir ccc\ncd ccc\nwget https://mkroot.musl.cc/latest/x86_64-linux-musl-native.tgz\nbsdtar xvf x86_64-linux-musl-native.tgz\nln -s ~/mkroot/mcm ~/ccc\n</code></pre> <p>if something's missing, like bc</p> <pre><code>pacman -S bc\nrm -rf airlock\n./cross.sh x86_64 ./mkroot.sh HOST_EXTRA='bc'\n</code></pre>"},{"location":"Linux/2020-01-27-Simplest-possible-Linux-boot/#skinny-distributions","title":"Skinny Distributions","text":""},{"location":"Linux/2020-01-27-Simplest-possible-Linux-boot/#probably-working","title":"Probably Working","text":"<ul> <li>Alpine Linux</li> <li>Welcome to Ad\u00e9lie Linux</li> <li>KISS - home</li> <li>Compare Ad\u00e9lie Linux to other distros</li> </ul>"},{"location":"Linux/2020-01-27-Simplest-possible-Linux-boot/#experimental","title":"Experimental","text":"<ul> <li>glaucus Linux - someone building a whole minimal distribution based on Toolbox and the ideas of LFS</li> <li>Musl-LFS: Linux From Scratch using Musl as Libc</li> <li>oasis is a small linux system</li> </ul>"},{"location":"Linux/2020-01-27-Simplest-possible-Linux-boot/#links","title":"Links","text":"<ul> <li>Introducing initramfs</li> <li>Tech Tip: How to use initramfs</li> <li> <p>Programming for Initramfs</p> </li> <li> <p>LinuxCommand.org: Learn The Linux Command Line. Write Shell Scripts.</p> </li> <li> <p>Bash scripting cheatsheet</p> </li> <li> <p>Rob\u2019s blog</p> </li> <li> <p>Stuff Rob's written.</p> </li> <li> <p>J-Core Open Processor</p> </li> <li>j-core mailing list</li> <li> <p>Dropbear SSH &amp; github for it</p> </li> <li> <p>mkroot - simple linux system builder, bootable under qemu for multiple architectures.</p> </li> <li>Blog about successor to Aboriginal Linux</li> <li> <p>beginnings of mkroot</p> </li> <li> <p>Firmware Linux history, predecessor to Aboriginal Linux, lots of useful stuff</p> </li> <li> <p>Using and internal workings of Aboriginal Linux</p> </li> <li>About Aboriginal Linux</li> <li> <p>Aboriginal Linux build stages</p> </li> <li> <p>Linux bootdisk howto</p> </li> <li> <p>User Mode Linux, run linux inside linux</p> </li> <li> <p>arch linux BusyBox</p> </li> <li>musl libc</li> <li>Write messages to stdout from anywhere, by modifying pl011_console_putchar</li> <li>Toybox vs BusyBox - Rob Landley, hobbyist</li> </ul> <ul> <li>(https://en.wikipedia.org/wiki/Linux_startup_process)</li> <li>(https://en.wikipedia.org/wiki/Initial_ramdisk)</li> <li>(https://wiki.archlinux.org/index.php/Arch_boot_process)</li> <li>(https://wiki.archlinux.org/index.php/EFISTUB)</li> <li>(https://wiki.archlinux.org/index.php/Microcode#EFISTUB)</li> <li>(https://glowingthumb.com/uefi-shell-scripts-3-of-3/)</li> </ul>"},{"location":"Linux/2020-01-28-FileSystems/","title":"File systems","text":""},{"location":"Linux/2020-01-28-FileSystems/#file-systems","title":"File systems","text":""},{"location":"Linux/2020-01-28-FileSystems/#introduction","title":"Introduction","text":""},{"location":"Linux/2020-01-28-FileSystems/#working-with-windows","title":"Working with Windows","text":"<p>Turn off faststart by:</p> <pre><code>powercfg /h off\n</code></pre> <p>Use NTFS-3G to share data with Windows and Linux.  Here is Arch Linux' information.</p> <pre><code>pacman -S ntfs-3g\nmkfs.ntfs # no need to be explicit in Arch Linux\nmount /dev/sda2 /mnt # Arch linux support\n</code></pre> <p>In <code>/etc/fstab</code>:</p> <pre><code># &lt;file system&gt;     &lt;dir&gt;       &lt;type&gt;  &lt;options&gt;   &lt;dump&gt;  &lt;pass&gt;\n/dev/NTFS-part      /mnt/windows    ntfs-3g defaults    0   0\n</code></pre>"},{"location":"Linux/2020-01-28-FileSystems/#raspberry-pi-overlay-fs","title":"Raspberry Pi Overlay FS","text":"<ul> <li>Overlay FS in Raspi-config under Advanced Options, Overlay FS</li> <li>Raspberry Pi Overlay Root Filesystem and OverlayFS based reliable filesystem who is a Raspberry Pi Engineer apparently <code>sudo raspi-config nonint enable_overlayfs</code> or <code>sudo raspi-config nonint disable_overlayfs</code> does the trick or <code>enable_overlayfs()</code> <code>disable_overlayfs()</code> according to Docker and Overlay FS</li> </ul>"},{"location":"Linux/2020-01-28-FileSystems/#links","title":"Links","text":"<ul> <li>Creating and using squashed file systems</li> <li>Overlay filesystem</li> <li>Overlay Filesystes</li> <li>Full system backup with SquashFS</li> <li>MBR file system identifiers</li> <li>Example OverlayFS Usage</li> <li>OverlayFS</li> <li>How do I use OverlayFS</li> <li>Playing with overlayfs</li> <li>a practical look into overlayfs</li> </ul> <ul> <li>https://askubuntu.com/questions/699565/example-overlayfs-usage https://www.thegeekstuff.com/2017/05/sfdisk-examples/ https://wiki.archlinux.org/index.php/Fdisk https://wiki.archlinux.org/index.php/GPT_fdisk#Convert_between_MBR_and_GPT</li> </ul>"},{"location":"Linux/2020-02-02-DD/","title":"DD","text":""},{"location":"Linux/2020-02-02-DD/#dd-for-backup-and-restore","title":"DD for Backup and Restore","text":""},{"location":"Linux/2020-02-02-DD/#fixme","title":"FixMe","text":"<p>Try everything out</p> <p>Have done this for Windows 10 and Raspberry pi.</p> <p>Need to name things better</p>"},{"location":"Linux/2020-02-02-DD/#introduction","title":"Introduction","text":"<p>Backup and restore using DD is relatively straightforward but DD is such a low level and powerful command it is extremely easy to erase your disks.</p> <p>In any case, the best method seems to be:</p> <ol> <li>Shrink your disks, for smaller backups and to fit on the smallest disks</li> <li>Zero out all of the unused disk space, to allow for compression of the remaining space</li> <li>Save the disk layout, partition table etc</li> <li>Compress the backup as you make it</li> </ol>"},{"location":"Linux/2020-02-02-DD/#zero-unuseddeleted-data","title":"Zero Unused/Deleted Data","text":""},{"location":"Linux/2020-02-02-DD/#windows","title":"Windows","text":"<p>use fsutil.exe to clear out free space.</p> <pre><code>fsutil volume diskfree f:\nfsutil file createnew F:\\clear 249899469856\nfsutil file setvaliddata F:\\clear 249899469856\nfsutil file setzerodata offset=0 length=249899469856 F:\\clear\ndel f:\\clear\n</code></pre> <p>The key is to specify a directory on the volume that you want to wipe the used data from.  Can be any directory (., .., c:\\Users) as the directory is just used to identify the drive.</p> <p>cipher does a secure wipe, probably not necessary and might leave random numbers behind.</p> <pre><code>cipher /W:c:\\\n</code></pre> <p>SDelete is a free download from Microsoft.  It is part of sysutils.</p> <pre><code>sdelete -z c:\\\n</code></pre>"},{"location":"Linux/2020-02-02-DD/#linux","title":"Linux","text":"<p><code>zerofree</code></p> <p>Other methods of doing this</p>"},{"location":"Linux/2020-02-02-DD/#archive-and-compress-linux","title":"Archive and Compress Linux","text":"<p><code>gzip</code> is available almost everywhere and is fast. <code>bzip2</code> and <code>xz</code> are also available everywhere and are slow with high compression. 7zip (<code>7z</code>) gets the highest overall compression.</p> <p>Zeroing used space</p>"},{"location":"Linux/2020-02-02-DD/#backup-disks","title":"Backup Disks","text":"<p>Backup drive uses NTFS, so need a driver for it.</p> <p><code>pacman -S ntfs-3g</code> Create a directory for the specific machine and then a folder with the time since unix epoch:</p> <p><code>mkdir $(date +%s)</code></p> <p>Using the hosted operated system, shrink the partitions (as they will only fit on the same size or larger ones) and zero free space (to aid compression).</p> <p>fdisk /dev/sda, option O for partition table</p> <p>work out correct input block size by testing using Tuning dd block size dd_obs_test.sh dd_ibs_test.sh</p> <p><code>./dd_ibs_test.sh ~/sde2/delete_me &gt; ~/sde2/dd_ibs_results.usb3</code></p> <p>backup partition tables of GPT disks using Rod Smith's GPT fdisk utility</p> <p><code>sudo sgdisk -b=sda.sgdisk.bak /dev/sda</code></p> <p>backup individual partitions.  Gzip is used because it is fast.</p> <p><code>dd if=/dev/sda2 bs=1M conv=noerror,sync status=progress | gzip -c &gt;./sda2.img.gz</code></p>"},{"location":"Linux/2020-02-02-DD/#restore-disks","title":"Restore Disks","text":"<ul> <li>Using the <code>sda.sgdisk.bak</code> file recreate the partitions using <code>fdisk</code> or similar</li> <li>Work out the correct block size for input and output <code>./dd_ibs_test.sh ~/sde2/delete_me &gt; ~/sde2/dd_ibs_results.usb3 # delete_me needs to be on the file system under test</code></li> <li><code>dd if=./sde1.img of=/dev/sde1 bs=1M conv=noerror,sync status=progress</code></li> <li><code>gzip -d ./sde2.img.gz | dd of=/dev/sde2 bs=1M conv=noerror,sync status=progress</code></li> </ul>"},{"location":"Linux/2020-02-02-DD/#links","title":"Links","text":"<ul> <li>Informative article on DD</li> <li>Disk partition CD</li> <li>Linux DD Command - 15 Examples with All Options</li> <li>Tuning dd block size</li> <li>Can also use compression</li> <li>Q&amp;A Style information</li> <li>DD manual</li> <li>DD disk bsckup and clone</li> <li>several handy examples and anti-examples</li> <li>Block sizes, count, buffering, piping etc explained</li> <li>the blocking behaviour of dd and controlling that behaviour</li> <li>truncating or writing to an arbitrary place in a file using dd</li> <li>more dd stuff including mounting and zeroing</li> <li>DD for windows disk cloning</li> <li>DD disk backup and clone</li> <li>Secure DD dcfldd</li> <li>DDrescue - recovery tool for failing drives</li> <li>7zip also known as p7zip in Arch Linux and others.</li> <li>gzip examples</li> </ul> <p>http://www.softpanorama.org/Tools/dd.shtml  https://serverfault.com/a/821235 https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-file https://www.techrepublic.com/blog/linux-and-open-source/drive-and-partition-backups-with-dd/</p>"},{"location":"Linux/2020-02-09-Alpine-Linux-Install/","title":"Alpine Install","text":""},{"location":"Linux/2020-02-09-Alpine-Linux-Install/#-","title":"---","text":""},{"location":"Linux/2020-02-09-Alpine-Linux-Install/#alpine-linux-install","title":"Alpine Linux Install","text":""},{"location":"Linux/2020-02-09-Alpine-Linux-Install/#introduction","title":"Introduction","text":"<p>What makes Alpine Linux interesting? It is an extremely lightweight and easy to configure system. To really appreaciate just what it offers an administrator look at these system backup instructions. To build a new system, based on an existing one, take a backup (or use a vanilla installation file), edit or write the configuration file - AKA apkvol and add the necessary packages to both the local cache and the <code>/etc/apk/world</code> file. <code>lbu commit</code> and you are done.</p> <p>This guide describes how Alpine Linux boots. Finally, if you're missing a favourite command then <code>akp search [faviourite missing command]</code> is what you need before you <code>apk add [found package name]</code>.</p> <p>For more detailed information see the Alpine User Handbook and the Developer Documentation.</p> <p>This is the Linux that I have been waiting for.</p>"},{"location":"Linux/2020-02-09-Alpine-Linux-Install/#from-scratch-install-intel-desktop","title":"From Scratch Install - Intel Desktop","text":"<p>boot USB (or other prepared) boot device and run the setup program</p> <pre><code>setup-alpine\n</code></pre> <p>I manually configured the partitions because I'm running an EFI system.</p>"},{"location":"Linux/2020-02-09-Alpine-Linux-Install/#efi-boot","title":"EFI boot","text":"<p>create <code>.nsh</code> file like this:</p> <pre><code>fs0:\ncd /alpine1shuttle1\nvmlinux ... root... modules... initrd=/alpine1shuttle1/initramfs-lts\n</code></pre> <p>The boot line is modified from the extlinux.cfg file. Note the initrd comes at the end and includes the full path on the EFI system drive.</p>"},{"location":"Linux/2020-02-09-Alpine-Linux-Install/#xfce4-desktop","title":"xfce4 desktop","text":"<pre><code>setup-xorg-base xfce4 xfce4-terminal lightdm-gtk-greeter xfce-polkit xfce4-screensaver consolekit2 dbus-x11 sudo\nvi /etc/apk/repositories\n</code></pre> <p>uncomment http://dl-cdn.alpinelinux.org/alpine/edge/community or similar</p> <pre><code>apk update\napk add xf86-video-intel # already added\napk add xf86-input-mouse xf86-input-keyboard\nsetxkbmap gb\nadduser -g 'jack' jack\naddgroup jack wheel\nvisudo\nlbu include /home\nrc-service dbus start # temp\nrc-service lightdm start # temp\nrc-update add dbus # rebooted\nrc-update add lightdm # rebooted\n</code></pre>"},{"location":"Linux/2020-02-09-Alpine-Linux-Install/#firefox","title":"Firefox","text":"<pre><code>apk add firefox-esr\n</code></pre>"},{"location":"Linux/2020-02-09-Alpine-Linux-Install/#the-end","title":"The End","text":"<p>This is enough to get a normal desktop in under 2G of disk space.</p>"},{"location":"Linux/2020-02-09-Alpine-Linux-Install/#links","title":"Links","text":"<ul> <li>Running glibc programs</li> <li>XFCE Setup</li> <li>Enable Community Repository</li> </ul> <p>https://serverfault.com/a/821235</p>"},{"location":"Linux/2020-02-09-Alpine-Linux-Install/#make-your-own-iso","title":"Make your own ISO","text":"<p>How to make a custom ISO image with mkimage - note that the architecture has to be the same as the host.</p> <pre><code>apk add alpine-sdk build-base apk-tools alpine-conf busybox fakeroot xorriso squashfs-tools sudo mtools dosfstools\nadduser build -G abuild\necho \"%abuild ALL=(ALL) NOPASSWD: ALL\" &gt; /etc/sudoers.d/abuild\nabuild-keygen -i -a\ngit clone https://gitlab.alpinelinux.org/alpine/aports.git\nsudo apk update\nexport PROFILENAME=minimal\n\ncat &lt;&lt; EOF &gt; ~/aports/scripts/mkimg.$PROFILENAME.sh\nprofile_$PROFILENAME() {\n        profile_standard\n        kernel_cmdline=\"unionfs_size=512M console=tty0 console=ttyS0,115200\"\n        syslinux_serial=\"0 115200\"\n        kernel_addons=\"\"\n        apks=\"\\$apks mdadm mkinitfs mtools rsync sfdisk \n                util-linux dosfstools ntfs-3g\"\n        local _k _a\n        for _k in \\$kernel_flavors; do\n                apks=\"\\$apks linux-\\$_k\"\n                for _a in \\$kernel_addons; do\n                        apks=\"\\$apks \\$_a-\\$_k\"\n                done\n        done\n        apks=\"\\$apks linux-firmware\"\n}\nEOF\n\ncd ~/aports/scripts\nchmod +x mkimg.$PROFILENAME.sh\nmkdir -p ~/iso\n\nsh mkimage.sh --tag edge \\\n  --outdir ~/iso \\\n  --arch armv7 \\\n  --repository http://dl-cdn.alpinelinux.org/alpine/edge/main \\\n  --profile $PROFILENAME\n</code></pre> <p>Pro Terminal Commands: Using diskutil</p> <pre><code>diskutil listFilesystems\ndiskutil list\ndiskutil eraseDisk MS-DOS ALPINE disk\u00a7\ndiskutil partitionDisk disk\u00a7 2 MBR MS-DOS ALPINE 512MB MS-DOS DATA R\n</code></pre> <p>Notes about apk cache Alpine local backup</p> <p>Back Up a Flash Memory Installation Manually editing a existing apkovl Local APK cache Alpine Source Map by boot sequence</p> <p>Alpine Linux APK off-line overlay builder Automated provisioning using apkovl Create a bootable SDHC from a Mac</p> <p>Semi-Automatic Installation Alpine Linux Install How to make a custom ISO image with mkimage Directly booting an ISO file QEMU 10 Alpine Linux apk Command Examples How to get regular stuff working</p>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/","title":"Booting Linux and Other Operating Systems","text":""},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#booting-linux-and-other-operating-systems","title":"Booting Linux and Other Operating Systems","text":""},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#introduction","title":"Introduction","text":"<p>I want to install multiple operating systems (mostly Linux and Windows) on my computer and choose which one to boot with the without any fuss. I had thought that this was a solved problem. How wrong I was.</p> <p>I have converted my computers, even the old ones, to UEFI to make things consistent. At a pinch, I can boot MBR disks.</p> <p>Booting a single operating system isn't trivial - just try to discover, in detail, how it's done for your favourite and you'll see what I mean (for example Linux bootdisk). It's best to use programs that are designed to run in the UEFI environment directly and not things provided by any operating system. Because booting is a critical part of an operating systems, every single system is very particular how they do it and, generally, assumes that they have complete control over every part of the process and usually use a bootloader to do it. This means that operating systems usually interfere with other operating system's ability to boot successfully. GRUB is a popular choice for bootloader and I've found that Ubuntu's version of GRUB will not boot Arch Linux successfully - giving \"Authentication Errors\" when I tried to login.</p>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#booting-sequence","title":"Booting Sequence","text":"<p>Keeping things simple, I use only UEFI capable hardware.  The process is:</p> <ol> <li>Hardware boots, checks its boot order list (kept in NVRAM - non-volatile RAM) and runs the first item.  If that doesn't work, it progresses down the list.</li> <li>If it's an EFI bootable operating system, you're done.</li> <li>If it is a \"boot manager\" - they're generally not good managers - or \"boot loader\" - ditto - then this runs and gives its choices.  This process repeats until an operating system is booted.</li> </ol>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#advice","title":"Advice","text":"<p>The steps below will ensure that the computer will always boot and that mistakes can be fixed. It requires manually copying files from each operating system's normal boot localion to the EFI system partition. A small price to pay for predictability.</p> <ol> <li>Boot from a Linux live or installation USB of some sort</li> <li>Create a 1GB EFI system partition formatted to fat32</li> <li>Install the UEFI shell</li> <li>Install rEFInd</li> <li>Create a startup.nsh script that boots rEFInd</li> <li>Set the boot sequence to the shell first, rEFInd second</li> <li>Copy all operating systems boot files into the system partition</li> <li>Create a UEFI script for the operating system and a startup.nsh for rEFInd</li> <li>Make all copies of Windows UEFI bootable (not a simple process)</li> </ol>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#hardware-uefi-configuration","title":"Hardware UEFI Configuration","text":"<p>On older systems, the boot order in the BIOS / UEFI might override any settings applied in software.  For the Shuttle boxes that I use, I had to change the boot to \"Windows 8.1/10\" from \"Windows 7\" this disabled a lot of boot choices in the firmware settings.</p>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#efi-operating-system-boot","title":"EFI Operating System Boot","text":"<p>Find and follow the operating system specific way to boot from EFI directly.  This is the fail safe way to do things.  The information for Arch linux is here.  Windows and Linux have their own utilities for this: efibootmgr and bcdedit.</p>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#efibootmgr-linux","title":"efibootmgr (Linux)","text":"<p>Copy all of the required boot files to their own directory, say <code>Arch5</code>, in the EFI system drive and create an EFI shell script to boot it.  </p> <p>To boot this directly from hardware add an entry to the EFI NVRAM like this:</p> <pre><code>efibootmgr -v # check the current boot order\nefibootmgr --disk /dev/sda --part 1 --create --label \"nuc3arch1\" --loader /nuc3arch1/vmlinuz-linux --unicode 'root=UUID=761edd1d-27d0-406a-8033-45c5654dcbc9 rw initrd=/nuc3arch1/intel-ucode.img initrd=/nuc3arch1/initramfs-linux.img' --verbose\nefibootmgr -o 0,1 # reset the boot order back to what it was originally\nefibootmgr -n 2 # to run the newly added item at next boot\n</code></pre>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#eif-booting-windows-bcdedit","title":"EIF Booting Windows (bcdedit)","text":"<p>MBR2GPT command to convert system drive to EFI.  Move partition to EFI drives by using DD (Linux) or back tool for Windows.</p> <pre><code>bcdedit /v\n</code></pre>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#uefi-shell","title":"UEFI Shell","text":"<p>I have found that EFI shells, and other pre-opeating system utilities/environments like boot managers, need to be installed from the original sources to work properly.</p> <p>TianoCore provides \"an open source implementation of the Unified Extensible Firmware Interface\". Releases can be downloaded here but these are now source code only. Feb 2020 is the most recent binary release.</p> <pre><code>cd ~/Downloads\nwget https://github.com/tianocore/edk2/releases/download/edk2-stable202002/ShellBinPkg.zip # The most recent binary version\nunzip ShellBinPkg.zip\nsudo rsync -r ShellBinPkg/UefiShell /boot/efi/\ncd /boot/efi\nefibootmgr --disk /dev/sda --part 1 --create --label \"TianoCore UEFI Shell\" --loader /UefiShell/X64/Shell.efi --verbose\n</code></pre> <p>Here are some useful EFI commands:</p> <ol> <li><code>help -b</code> the -b is for output pagination.</li> <li><code>mode</code> to view and change the number of lines and columns displayed.</li> <li><code>map</code> displays some of the devices available.  On my system there's a series of drives labelled <code>FS0</code> (for UEFI known file systems), <code>BLK1</code> (block devices), etc.</li> <li><code>FS0:</code> to change to a file system.</li> <li><code>ls</code> to list files, directories.  <code>cd</code> change directories</li> </ol> <p>To actually boot things requires that:</p> <ol> <li>You know the EFI command to run your operating system.  The command needs to be a single line e.g. [ <code>vmlinuz-linux root=UUID=761edd1d-27d0-406a-8033-45c5654dcbc9 rw initrd=/nuc3arch1/intel-ucode.img initrd=/nuc3arch1/initramfs-linux.img</code> ]. The directories are relative the root of the EFI System Partition</li> <li>Create an <code>nsh</code> script file in the root directory, like <code>Arch5.nsh</code>, to select the right directory and run the boot command.  This can be created using your operating system or using <code>edit</code> from the shell itself. Using the EFI shell's <code>edit</code> is slow and error prone.</li> <li>Run the script to boot your operating system.  It is possible to type the whole boot command at the EFI prompt.  Up to you.</li> <li>This is enough to run the everything.  But a Boot manager might be nice.</li> <li><code>startup.nsh</code> in the root of the EFI system drive will be booted by default.  See Arch's description.</li> </ol> <p>Any UEFI specific program can be run within the UEFI shell, say device drivers and the like.</p>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#boot-managers","title":"Boot Managers","text":"<p>Just like for the UEFI shell, you should get these direct from the original providers. It's a small price to pay to have to manually update them. If it's installed by an operating system, then you lose control over the boot process - who knows what will happen when the operating system updates itself.</p>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#refind","title":"rEFInd","text":"<p>rEFInd can be downloaded here. Once <code>unzip</code>ed it needs to be moved to the refind directory on the EFI partition. Linux quickstart configuration.</p> <pre><code>cd ~/Downloads\nwget https://sourceforge.net/projects/refind/files/latest/download # it is possible to download it directly like this but not recommended\nunzip download # the filename as used by wget (last part)\n~/Downloads/refind-bin-0.12.0/mkrlconf # will make a refind_linux.conf in the /boot directory\nsudo rsync -r ~/Downloads/refind-bin-0.12.0/refind/* /boot/efi/refind # 12.0 is the current version\nefibootmgr --disk /dev/sda --part 1 --create --label \"rEFInd\" --loader /refind/refind_x64.efi --verbose\n</code></pre> <p>edit /boot/refind_linux.conf and add <code>initrd=boot\\intel-ucode.img initrd=boot\\initramfs-linux.img</code> to each of the lines.</p> <p>Might also want to add sample menu items to refind.conf, copied from <code>refind.conf-sample</code>, at the bottom of the file.</p> <pre><code>menuentry \"nuc3arch1\" {\n    icon     /refind/icons/os_arch.png\n    loader   /nuc3arch1/vmlinuz-linux\n    initrd   /nuc3arch1/intel-ucode.img\n    initrd   /nuc3arch1/initramfs-linux.img\n    options  \"root=UUID=761edd1d-27d0-406a-8033-45c5654dcbc9 rw\"\n}\n\nmenuentry \"nuc3arch1 - just options\" {\n    icon     /refind/icons/os_arch.png\n    loader   /nuc3arch1/vmlinuz-linux\n    options  \"root=UUID=761edd1d-27d0-406a-8033-45c5654dcbc9 rw initrd=/nuc3arch1/intel-ucode.img initrd=/nuc3arch1/initramfs-linux.img\"\n}\n\nmenuentry \"TianoCore UEFI Shell\" {\n    icon    /refind/icons/tool_shell.png\n    loader  /UefiShell/X64/Shell.efi\n}\n</code></pre> <p>Change the boot order back to the original state boot <code>efibootmgr -o</code> and refind on the next boot <code>efibootmgr -n</code> for testing.</p> <p>If Arch Linux boots into an emergency shell because it cannot find the root partition, then:</p> <pre><code>mount /dev/sda2 new_root # or /dev/disk/by-id/...\nexit\n</code></pre> <ul> <li>(https://en.wikipedia.org/wiki/Linux_startup_process)</li> <li>(https://en.wikipedia.org/wiki/Initial_ramdisk)</li> <li>(https://wiki.archlinux.org/index.php/Arch_boot_process)</li> <li>(https://wiki.archlinux.org/index.php/EFISTUB)</li> <li>(https://wiki.archlinux.org/index.php/Microcode#EFISTUB)</li> <li>(https://glowingthumb.com/uefi-shell-scripts-3-of-3/)</li> </ul>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#operating-systems","title":"Operating Systems","text":"<ul> <li>Arch Linux - minimal initial install binary distribution with a good package manager</li> <li>Gentoo linux Source based minimal install</li> <li>Linux From Scratch LFS Documentation only installation.  Requires a Linux system.</li> <li>PiLFS Pi Linux From Scratch</li> <li>Pi Gentoo</li> </ul>"},{"location":"Linux/2021-06-14-Booting-Linux-and-Other-Operating-Systems/#links","title":"Links","text":"<ul> <li>Inside the Linux boot process</li> <li>Inspecting the content of an initrd file</li> <li>The Kernel Newbie Corner: \"Initrd\" And \"Initramfs\"\u2013What\u2019s Up With That?</li> <li>The BIOS/MBR Boot Process</li> <li>Shim and secure boot - fedora</li> <li>Secure Boot - ubuntu</li> <li>uefi drivers for various file systems</li> <li>tianocore releases</li> <li>Detecting EFI files and Booting them from GRUB</li> <li>Official GNU GRUB Manual</li> <li>GRUB - Arch</li> <li>UEFI startup.nsh script - Arch</li> <li>systemd boot - formerly Gummiboot</li> <li>Arch systemd-boot</li> <li>Arch boot process</li> <li>Early Userspace in Arch Linux</li> <li>Editing GRUB boot entries on startup - press e</li> <li>BIOS/MBR Booting</li> <li>UEFI - Arch</li> <li>UEFI Shell - Arch</li> <li>Official UEFI Specification, including commands</li> <li>Using the UEFI Shell - PDF</li> <li>Binary Release of the UEFI Shell</li> <li>rEFInd - official site including lots of useful UEFI, secure boot and related information</li> </ul>"},{"location":"Linux/2021-06-15-Arch-Linux-GUI-VNC/","title":"Arch Linux GUI VNC","text":""},{"location":"Linux/2021-06-15-Arch-Linux-GUI-VNC/#arch-linux-installation","title":"Arch Linux Installation","text":""},{"location":"Linux/2021-06-15-Arch-Linux-GUI-VNC/#introduction","title":"Introduction","text":"<p>My pithy guide to setup Arch Linux. The official Arch installation instructions are on the Wiki.</p>"},{"location":"Linux/2021-06-15-Arch-Linux-GUI-VNC/#gui","title":"GUI","text":"<p>pacman -S base-devel</p> <pre><code>pacman -S xorg-server xfce4\npacman -S xf86-video-intel # card specific video drivers\npacman -S nvidia-390xx # legacy driver front room\npacman -S xorg-xinit # startx\nlocalectl --no-convert set-x11-keymap gb # UK keyboard layout\nsetxkbmap gb # X11 current session only\n</code></pre> <p>sara - lightweight tiling window manager</p> <pre><code>pacman -S libxft libxinerama # and for dmenu\ngit clone https://github.com/gitluin/sara.git\ncd sara\ncp config.def.h config.h\nsed -i -E 's/barpx\\s+=\\s+18/barpx\\t\\t\\t= 0/g' config.h # set top bar to 0\ngrep barpx config.h # check\nmake\nsudo make install\n</code></pre> <p>st - fork of suckless' simple terminal as there would be no terminal otherwise</p> <pre><code>pacman -S libxext ncurses # from sara install libxft\ngit clone https://github.com/LukeSmithxyz/st.git\n</code></pre> <p>dmenu - \"super+d\" for mini menu</p> <pre><code># same requirement as sara\ngit clone https://git.suckless.org/dmenu\n</code></pre> <p>sxhkd - X daemon for input events - keyboard, mouse</p> <pre><code>pacman -S libxcb xcb-util-keysyms xcb-util\ngit clone https://github.com/baskerville/sxhkd.git\ncd sxhkd\nmake\nsudo make install\nmkdir -p ~/.config/sxhkd\ncp ~/sara/examples/sxhkdrc ~/.config/sxhkd/sxhkdrc\n</code></pre> <p><code>~/.xinitrc</code></p> <pre><code>setxkbmap -layout gb\nsxhkd -c &amp; # enable keys e.g. 'super-d' for dmenu\nst &amp; # start with a terminal on screen\nexec sara # or another display manager\n</code></pre> <p>If you don't load the correct drivers, you get an unhelpful set of errors including <code>xinit: unable to connect to X server: Connection refused</code>. Also, don\u2019t run X as root.</p> <pre><code>pacman -S firefox # web browser\n</code></pre>"},{"location":"Linux/2021-06-15-Arch-Linux-GUI-VNC/#bash-config","title":"bash config","text":"<p>Things to add to <code>~/.bash_profile</code>, which ones on first login:</p> <pre><code>tbsm # needs to be last\n</code></pre> <p><code>~/.bashrc</code> which runs on every interactive shell</p> <pre><code>source ~/basic-env/bin/activate # enable a default Python environment to avoid polluting everything\n</code></pre>"},{"location":"Linux/2021-06-15-Arch-Linux-GUI-VNC/#vnc","title":"VNC","text":"<p>If you use localhost in your VNC config then you will have to use ssh as a tunnel or VNC will not work remotely. Or turn off localhost and transmit in clear.</p> <ul> <li>TigerVNC - ArchWiki</li> <li>CustomXSession - Ubuntu Wiki</li> <li>gdm - How do I replace the desktop by an application? - Ask Ubuntu</li> <li>Display manager - ArchWiki</li> <li>xinit - ArchWiki</li> <li>Xorg - ArchWiki</li> <li>GitHub - evertiro/cdm: Console Display Manager</li> <li>AUR (en) - udm</li> </ul>"},{"location":"Linux/2021-06-15-Arch-Linux-GUI-VNC/#links","title":"Links","text":"<ul> <li>Intel Graphics</li> <li>AUR - Arch User Repository</li> <li>tbsm - minimal display manager</li> <li>st - simple terminal</li> <li>GitHub - gitluin/sara: Originally a fork of catwm, now an offspring of dwm with a streamlined featureset, plus some bspwm.</li> <li>Alacritty - graphics accelerated terminal</li> <li>st fonts</li> <li>Symbol fonts for linux terminals</li> <li>Fonts - Arch Linux</li> </ul>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/","title":"Arch Linux Installation","text":""},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#arch-linux-installation","title":"Arch Linux Installation","text":""},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#introduction","title":"Introduction","text":"<p>My pithy guide to setup Arch Linux. The official Arch installation instructions are on the Wiki.</p>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#booting","title":"Booting","text":"<p>Boot from a USB media or run <code>pacman -S arch-install-scripts</code> to get the standard Linux installation scripts.</p> <pre><code>timedatectl set-ntp true\n</code></pre>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#disk-sizing-and-setup","title":"Disk sizing and setup","text":"<p>Get the block size of disks <code>blockdev --getsz /dev/sda</code> the smallest 2GB SD card that I own has 3840000 512 byte blocks.</p> <p>To get progress of <code>sync</code> run <code>watch -d grep -e Dirty: -e Writeback: /proc/meminfo</code></p> <p>I use a single disk for the whole operating system and a 1GB partition at the beginning of the disk as the EFI partition. In my view, operating systems should be disposable, so the more self-contained they are the better. Data, and  possibly user settings, should be very carefully looked after. I avoid using any swapfiles by installing lots of RAM in the first place and building a minimal system.</p>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#pacstrap","title":"pacstrap","text":"<p>Mount the correct drives and install a minimal system. Enough to chroot and setup pacman properly.</p> <pre><code>mount /dev/sda2 /mnt # substitute /dev/sda2 as needed\ndhcpcd # ethernet\npacstrap /mnt base linux linux-firmware vi # vi for editing, plus any other required pacmages to get started\ngenfstab -U /mnt &gt;&gt; /mnt/etc/fstab # for the fstab.  Don't add EFI so that it's harder for the operating system to muck about with it\nmkdir /mnt/boot/efi # needed for EFI\nmount /dev/sda1 /mnt/boot/efi # so that we can do EFI partition stuff later\narch-chroot /mnt\n</code></pre>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#language","title":"Language","text":"<p>Needs to be moved to after booting for the first time</p> <pre><code>vi /etc/locale.gen\n# uncomment the line \"en_GB.UTF-8 UTF-8\"\nlocale-gen\nlocalectl set-locale LANG=en_GB.UTF-8\nlocalectl set-keymap uk\nlocalectl # check\n</code></pre>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#adjust-pacman-to-run-faster","title":"Adjust pacman to run faster","text":"<pre><code>pacman -S reflector rsync curl\ncp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak # just in case\nreflector --verbose --country 'United Kingdom' -l 10 --sort rate --save /etc/pacman.d/mirrorlist\n</code></pre> <p>Arch comes with almost nothing by default.</p> <pre><code>pacman -S unzip sudo nano vim dhcpcd efibootmgr openssh git ntp\n</code></pre> <ul> <li>unzip - unziping EFI Shell and rEFInd</li> <li>sudo - run commands as superuser</li> <li>nano - minimal visual editor</li> <li>vim - keystroke driven editor</li> <li>dhcpcd - request IP address from servers</li> <li>efibootmgr - manage system boot</li> <li>openssh - allow ssh into this machine</li> <li>git - for software management</li> <li>ntp - synchronise time</li> </ul>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#users","title":"Users","text":"<p>Change root password, create a new user and add it to the appropriate groups.</p> <pre><code>passwd # for root\nuseradd -m -G wheel,audio,uucp jack -s /bin/bash\npasswd jack\nvisudo # uncomment \"%wheel ALL=(ALL) NOPASSWD: ALL\"\nsu jack\ncd\npwd # should be /home/jack\ngit clone https://github.com/jchidley/jchidley.github.io.git # instructions\nexit # back to root\n</code></pre>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#minimal-setup","title":"Minimal Setup","text":"<pre><code>localectl # check language\nsystemctl enable dhcpcd.service # so that we have networking on restart\nln -sf /usr/share/zoneinfo/Europe/London /etc/localtime\nhwclock --systohc\nvi /etc/hostname # add hostname\nsystemctl enable sshd\n</code></pre> <p>Language settings</p>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#boot","title":"Boot","text":"<p>Getting the thing to boot the raw EFI way.</p> <pre><code>pacman -S intel-ucode\nmkdir /boot/efi/nuc3arch1 # In the EFI boot partition\nrsync /boot/* /boot/efi/nuc3arch1/ # copy all of the boot files across\n</code></pre> <p>Create an EFI shell script to boot the new operating system.</p> <p>Tabbing for completion speeds this up and avoids errors</p> <pre><code>ls /boot/efi/nuc3arch1 &gt; nuc3arch1.nsh\nls /boot/efi/vmlinuz-linux &gt;&gt; nuc3arch1.nsh\nlsblk -o NAME,UUID | grep sda2 &gt;&gt; /boot/efi/nuc3arch1.nsh # assuming /dev/sda2 is operating system partition\nls /boot/efi/intel-ucode.img &gt;&gt; nuc3arch1.nsh\nls /boot/efi/initramfs-linux.img &gt;&gt; nuc3arch1.nsh\nvi /boot/efi/nuc3arch1.nsh\n</code></pre> <p>contents of /boot/efi/nuc3arch1.nsh</p> <pre><code>cd nuc3arch1\nvmlinuz-linux root=UUID=761edd1d-27d0-406a-8033-45c5654dcbc9 rw initrd=/nuc3arch1/intel-ucode.img initrd=/nuc3arch1/initramfs-linux.img\n</code></pre> <p>Only need to do this if you're direct booting Arch, otherwise do the EFI shell/rEFInd process.</p> <pre><code>lsblk -o NAME,UUID # use the right UUID below\nefibootmgr --disk /dev/sda --part 1 --create --label \"nuc3arch1\" --loader /nuc3arch1/vmlinuz-linux --unicode 'root=UUID=761edd1d-27d0-406a-8033-45c5654dcbc9 rw initrd=/nuc3arch1/intel-ucode.img initrd=/nuc3arch1/initramfs-linux.img' --verbose\nefibootmgr -v # check to see what number it is, say 0004\nefibootmgr -n 4 # try the next boot without committing to it\n</code></pre> <p>If it boots correctly, then...</p> <pre><code>efibootmgr -o 4,1,2 # reorder the boot once it has worked\n</code></pre> <p>As a fail safe, can create a <code>startup.nsh</code> file containing this single long line</p> <pre><code>\\vmlinuz-linux root=/dev/sda2 rw initrd=\\initramfs-linux.img\n</code></pre>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#gui","title":"GUI","text":"<p>See 2021-06-15-Arch-Linux-GUI-VNC</p>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#extras","title":"Extras","text":"<p>Create a Python environment <code>python3 -m venv ~/basic-env</code> and enable it <code>source ~/basic-env/bin/activate</code> Visual Studio Code (AUR), Gitlens, markdownlint, python, Git History Anaconda nMigen</p>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#bash-config","title":"bash config","text":"<p>Things to add to <code>~/.bash_profile</code>, which ones on first login:</p> <pre><code>tbsm # needs to be last\n</code></pre> <p><code>~/.bashrc</code> which runs on every interactive shell</p> <pre><code>source ~/basic-env/bin/activate # enable a default Python environment to avoid polluting everything\n</code></pre>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#installed-packages","title":"Installed Packages","text":"<p>pacman/Tips and tricks</p> <p>Remove orphans</p> <pre><code>pacman -Qtdq | pacman -Rns - # remove orphans\npacman -S pacman-contrib # paccache\npaccache -rk1 -ruk0 # clean the cache\n</code></pre> <p>List explicitly installed packages not in the base meta package, base-devel package groups:</p> <pre><code>expac -H M \"%011m\\t%-20n\\t%10d\" $(comm -23 &lt;(pacman -Qqen | sort) &lt;({ pacman -Qqg base-devel; expac -l '\\n' '%E' base; cat pacman_install.txt;} | sort | uniq)) | sort -n\n</code></pre> <pre><code>cat &lt;&lt; EOF &gt; pacman_install.txt\narch-install-scripts\nbase\ncurl\nfirefox\ngit\nintel-ucode\nlibftdi\nlinux\nlinux-firmware\nnano\nntfs-3g\nntp\nnvidia-390xx\nopenssh\npython-pip\nreflector\nrsync\nsudo\nunzip\nusbutils\nvi\nvisual-studio-code-bin\nwget\nxf86-video-intel\nEOF\n</code></pre> <p><code>cat pacman_install.txt | sort | uniq</code></p>"},{"location":"Linux/2021-06-17-Arch-Linux-Installation/#links","title":"Links","text":"<ul> <li>Arch Installation \"Method B: Using the LiveCD image\" files here, for example</li> <li>Intel Graphics</li> <li>AUR - Arch User Repository</li> <li>Symbol fonts for linux terminals</li> <li>Fonts - Arch Linux</li> <li>Pacman Tip and Tricks</li> <li>Unified Extensible Firmware Interface</li> </ul>"},{"location":"Linux/2022-07-14-Vim/","title":"Vim","text":""},{"location":"Linux/2022-07-14-Vim/#vim","title":"Vim","text":"<p>Vim</p>"},{"location":"Linux/2022-07-14-Vim/#introduction","title":"Introduction","text":"<p>vim is the ubiquitous editor on Linux. On rasbian, at least, <code>vi</code> is actually <code>vim.tiny</code> run in compatibility mode.</p> <p>Your problem with Vim is that you don't grok vi</p> <p>What features does vim-tiny have? - Ask Ubuntu</p> <p>What is compatible mode in Vim? - Super User</p> <pre><code>echo \"set -o vi\" &gt;&gt; .bashrc \n</code></pre> <p>Using vi-mode in your shell | Opensource.com</p> <p>in <code>bash</code> will add vi editing to the command line, set up in insert mode by default, press  to get command mode."},{"location":"Linux/2022-07-14-Vim/#vimrc","title":".vimrc","text":"<pre><code>cat &gt; ~/.vimrc &lt;&lt; \"EOF\"\ninoremap jk &lt;ESC&gt;\n\nsyntax on # highlight syntax\nset hlsearch    \" highlight all search results\nset ignorecase  \" do case insensitive search \nset incsearch   \" show incremental search results as you type\nset number      \" display line number\nset noswapfile  \" disable swap file\nset term=xterm-256color\n\nlet python_highlight_all=1\nEOF\n</code></pre> <p>\u200eSSH Client - Secure ShellFish on the App Store</p> <p>iPad: remap \u00a7 to ESC key</p> <pre><code>cat &gt;&gt; ~/.ssh/authorized_keys &lt;&lt; \"EOF\"\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJStmBtE+gjd8kFbFVj4En5+i630G0Mn3Pv4+p5sQyde\necdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFfwuj1qjlmAbsw4PjCeZrYxtYlXzH1KZi+dMIsB7QjI7wD3pB56aJebgYBC0HlnEqupKucrK5NkhFD6n5i668I= ShellFish@Jack-iPad-14072022\nEOF\n</code></pre>"},{"location":"Linux/2022-07-14-Vim/#bash_profile","title":".bash_profile","text":"<pre><code>export EDITOR=vim\nexport VISUAL=vim\n</code></pre>"},{"location":"Linux/2022-07-14-Vim/#install-bash-from-source","title":"install bash from source","text":"<p>https://www.vim.org/git.php</p> <pre><code>cd ~\ngit clone https://github.com/vim/vim.git\ncd vim\ngit pull\n</code></pre> <p>Change config <pre><code>sudo apt install -y libpython3-dev\nsudo apt install -y libncurses-dev\n\nexport VIMSRC=~/vim/src\ncd $VIMSRC\nsed -E -i 's/(^#\\s*)(.*--enable-python3interp\\s*$)/\\2/p' $VIMSRC/Makefile\nsed -E -i 's/(^#\\s*)(CONF_OPT_GUI.*--disable-gui.*$)/\\2/p' $VIMSRC/Makefile\nsed -E -i 's/(^#\\s*)(CONF_OPT_X.*--without-x\\s*$)/\\2/p' $VIMSRC/Makefile\nsed -E -i 's/(^#\\s*)(CONF_OPT_FEAT.*--with-features=normal\\s*$)/\\2/p' $VIMSRC/Makefile\n\nmake\nsudo make install\n</code></pre></p> <pre><code>sudo apt autoremove -y\nsudo apt remove vim-tiny \nsudo ln -s $(which vim) /usr/bin/vi\n</code></pre>"},{"location":"Linux/2022-07-14-Vim/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Vim - Full Stack Python</li> <li>YBlog - Learn Vim Progressively</li> <li>Learn Vim For the Last Time: A Tutorial and Primer - Daniel Miessler</li> <li>How to manage Vim plugins natively - Linux Tutorials - Learn Linux Configuration</li> <li>10 essential Vim plugins</li> <li>Vim Awesome</li> <li>5 Must-Have Vim Plugins That Will Change Your Workflow</li> <li>VIM and Python \u2013 A Match Made in Heaven \u2013 Real Python</li> <li>Setup VIM for Python Development</li> <li>Vim from GitHub : vim online</li> <li>Vim for Python in 2020 | Vim From Scratch</li> <li>Editor Wars: VIM as a perfect Python IDE - DEV Community</li> <li>Install Vim for Local User | LanternD's Castle</li> <li>Example</li> </ul>"},{"location":"Linux/2022-07-16-Tmux/","title":"Tmux","text":""},{"location":"Linux/2022-07-16-Tmux/#tmux","title":"Tmux","text":"<p>Vim</p>"},{"location":"Linux/2022-07-16-Tmux/#introduction","title":"Introduction","text":"<p>Tmux works well with iPad app ShellFish.</p>"},{"location":"Linux/2022-07-16-Tmux/#vimrc","title":".vimrc","text":"<p>touch ~/.tmux.conf</p> <p>standard PREFIX is Ctrl-b PREFIX : is command mode</p> <pre><code>source-file ~/.tmux.conf # reload conf\n</code></pre> <pre><code>cat &gt; ~/.tmux.conf &lt;&lt; \"EOF\"\nset -s escape-time 1\nset -g base-index 1\nsetw -g pane-base-index 1\nset -g default-terminal \"xterm-256color\"\nsetw -g mode-keys vi\nset -g history-limit 3000\nEOF\n</code></pre> <p>\u200eSSH Client - Secure ShellFish on the App Store</p> <p>iPad: remap \u00a7 to ESC key</p> <pre><code>cat &gt;&gt; ~/.ssh/authorized_keys &lt;&lt; \"EOF\"\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJStmBtE+gjd8kFbFVj4En5+i630G0Mn3Pv4+p5sQyde\necdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFfwuj1qjlmAbsw4PjCeZrYxtYlXzH1KZi+dMIsB7QjI7wD3pB56aJebgYBC0HlnEqupKucrK5NkhFD6n5i668I= ShellFish@Jack-iPad-14072022\nEOF\n</code></pre>"},{"location":"Linux/2022-07-16-Tmux/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"Other/","title":"Other Topics","text":""},{"location":"Other/#other-topics","title":"Other Topics","text":""},{"location":"Other/#introduction","title":"Introduction","text":"<p>This section contains a diverse collection of documentation and guides on miscellaneous technical topics that don't fit neatly into other categories. Subjects include Git, data science, electronics, parsing and compilers, and various programming technologies.</p>"},{"location":"Other/#contents","title":"Contents","text":""},{"location":"Other/#git","title":"Git","text":"<ul> <li>Git Epiphany - Insights and realizations about Git version control.</li> <li>Git Epilogue - Follow-up thoughts and advanced Git concepts.</li> </ul>"},{"location":"Other/#data-and-databases","title":"Data and Databases","text":"<ul> <li>Data with Python - Using Python for data analysis.</li> <li>SQLite Stuff - Working with SQLite databases.</li> </ul>"},{"location":"Other/#electronics-and-hardware","title":"Electronics and Hardware","text":"<ul> <li>FPGA and Amaranth HDL - FPGA programming with Amaranth HDL.</li> <li>Signals - Working with electronic signals.</li> <li>Prusa 3d printer - Notes on Prusa 3D printing.</li> <li>Klipper 3D - Using Klipper firmware for 3D printing.</li> <li>Radio and Electronics - Radio and electronic projects.</li> </ul>"},{"location":"Other/#programming-and-development","title":"Programming and Development","text":"<ul> <li>Parsing Compilers - Concepts in parsing and compiler design.</li> <li>FastAPI and JavaScript - Using FastAPI with JavaScript.</li> <li>Risc-V - Notes on RISC-V architecture.</li> <li>Systems on Systems - Integrating multiple systems.</li> <li>awk sed bash - Working with awk, sed, and bash.</li> </ul>"},{"location":"Other/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>URL Dump - Collection of useful URLs.</li> <li>Links - Assorted useful links.</li> <li>Screen - Using the Screen terminal multiplexer.</li> <li>Links - Additional useful links.</li> <li>Raku - Notes on the Raku programming language.</li> <li>Audio - Audio processing and equipment.</li> <li>Link Dump iPad Transfer - Links transferred from iPad.</li> <li>GitHub Pages Jekyll - Setting up GitHub Pages with Jekyll.</li> <li>cadquery - Working with CADQuery.</li> <li>Links - More useful links.</li> </ul>"},{"location":"Other/#templates-and-reference","title":"Templates and Reference","text":"<ul> <li>Template - Template for new documentation files.</li> <li>awk.cheat.sheet.txt - Quick reference for AWK commands.</li> <li>project-words.txt - Project-specific vocabulary and terminology.</li> <li>sed.stream.editor.cheat.sheet.txt - Quick reference for SED commands.</li> </ul>"},{"location":"Other/#topics-covered","title":"Topics Covered","text":"<ul> <li>Version control with Git</li> <li>Data analysis and databases</li> <li>Hardware projects and 3D printing</li> <li>FPGA and electronics</li> <li>Programming languages and tools</li> <li>System integration and architecture</li> <li>Command-line utilities (awk, sed, bash)</li> </ul>"},{"location":"Other/2017-05-08-Git-Epiphany/","title":"Git Epiphany","text":""},{"location":"Other/2017-05-08-Git-Epiphany/#git-epiphany","title":"Git Epiphany","text":"<p>I only started to use Git because I was using GitHub. My journey started with GitHub\u2019s Windows software and the git bash shell. I followed the tutorials and read the whole of the Pro Git Book. I was confident that I understood things.</p> <p>In reality, I understood almost nothing and I was frightened all the time.</p> <p>Today I understand things better. I don\u2019t think that I will ever understand it completely but I can use it effectively. Below you\u2019ll see how I learned to love git and stop worrying.</p>"},{"location":"Other/2017-05-08-Git-Epiphany/#git-started-dont-worry-use-git","title":"Git Started: Don\u2019t Worry, Use Git","text":"<p>The best thing I can tell you is this: git doesn\u2019t lose stuff and you can recover from almost anything. Just follow the everyday advice and you\u2019ll be fine.</p> <p>This sounds wrong but you are far safer using git without understanding it than not using git because you don\u2019t understand.</p>"},{"location":"Other/2017-05-08-Git-Epiphany/#losing-photographs","title":"Losing Photographs","text":"<p>My attempts to manage my photographs led me to build a system that is based on the same principles as Git. That experience, combined with this article, were the keys that unlocked git for me.</p> <p>I have taken thousands of photographs over the years, most of which, even the actual film ones, are now files on my various home computers. I have managed them using normal file system tools (e.g file manager and command-line tools) and Lightroom. I have tried to protect them as best as I can. You would think that because I am an IT professional this would be no problem.</p> <p>Sadly I have lost images, sometimes over a thousand at a time, along the way. Each loss still hurts today and each took a long time to mostly recover from. Memorably one took about a year fix.</p> <p>My losses have fallen into 2 categories:</p> <ol> <li> <p>Hardware. Either disk failure or loss of a disk.</p> </li> <li> <p>User error.</p> </li> <li> <p>Both of the above.</p> </li> </ol> <p>I have tried several systems to cope with this. Multiple disks, RAIDs, batch files, various little utilities, procedures, specialized applications etc. Over the years I grew a system that would protect my images and, as an interesting by product, helped me understand git.</p>"},{"location":"Other/2017-05-08-Git-Epiphany/#core-design","title":"Core Design","text":"<p>Hardware failures are the easiest to solve. I use multiple disks and keep copies of those disks in separate locations. Each disk has a complete snapshot of my files which are in various states of synchronicity.</p> <p>Hard disks are increasing in size faster than the growth of my files so trading up to the newest disks is always a great idea. I get more space, better performance and an as new service life (for those that don\u2019t know, every disk will eventually wear out and fail. If you\u2019re not using it, switch it off).</p> <p>User and software errors are harder to fix. What I needed was:</p> <ol> <li> <p>Uniquely identify files</p> </li> <li> <p>Ensure that files remained uncorrupted</p> </li> <li> <p>Track changes over time, so that when I discovered that I\u2019d done something     stupid, I could revert things.</p> </li> </ol> <p>Eventually I realised that a hash of the file would be perfect for both 1 and 2. The hash had to be complex enough to make duplicate file names nearly impossible, short enough to be quick to calculate and a public standard for longevity. Cryptographic security is an irrelevance as I am unworried about malicious intent. SHA1 fitted the bill.</p> <p>For 3 I needed a small human-readable file with the status of all of the files that would be timestamped: a census of the files. I could then look through my censuses and find a known state to recover from.</p> <p>With both of the above it is easy to track files over time, including name and location changes. Spotting a corrupted file is trivial because its hash will change \u2013 same name, different hash = corruption.</p> <p>With this in place, I knew that I would never lose a file again. What I needed to develop was a bunch of utilities to manage the process. This is hard. This is where Git comes in.</p>"},{"location":"Other/2017-05-08-Git-Epiphany/#git-to-the-rescue","title":"Git to the Rescue","text":"<p>It turns out, my core design is exactly how Git works. When I realized that, I stopped worrying and started to use git aggressively. Git has a wealth of utilities to help you manage your files.</p> <p>So, this is how I manage my photography sources today:</p> <ol> <li> <p>Create a top level directory for all of my images.</p> </li> <li> <p>Run git init on this directory.</p> </li> <li> <p>Copy my files into the directory.</p> </li> <li> <p>Use git to manage it.</p> </li> <li> <p>Copy the whole repository to additional disks.</p> </li> <li> <p>No longer worry.</p> </li> </ol> <p>The joy and curse of git is that its utilities have grown organically over time. They can, and do, have bizarre names, conflicting and duplicating functionality and use different names for the same basic idea (cache, stage).</p> <p>The main differences with a programming source control vs a photographic source control are that you need to track changes within text files and manage multiple authors. Git has a lot of functionality for those things.</p>"},{"location":"Other/2017-05-08-Git-Epiphany/#selected-links","title":"Selected Links","text":"<p>Git Is Simpler Than You Think is the source of my epiphany</p> <p>Blogging Like a Hacker by the guy that created GitHub and Jekyll</p> <p>Git Magic is my current favourite academic style explanation</p> <p>just a simple guide for getting started with git. no deep shit ;) is a friendlier version of the git everyday documentation</p> <p>When I read Think Like (a) Git I no longer felt like an idiot</p> <p>Git for Ages 4 and Up - Video is git illustrated with a physical model</p> <p>I love the pictures in A Visual Git Reference</p> <p>I especially like The Tangled Working Copy Problem in The Thing About Git</p> <p>Getting Started is an attractive and helpful site from bitbucket.</p>"},{"location":"Other/2017-05-18-Git-Epilogue/","title":"Git Epilogue","text":""},{"location":"Other/2017-05-18-Git-Epilogue/#git-epilogue","title":"Git Epilogue","text":"<p>I reread the Pro Git book and actually understood it.</p>"},{"location":"Other/2017-05-18-Git-Epilogue/#fixing-problems","title":"Fixing Problems","text":"<p>I messed up my git log during a rebase: I orphaned a branch and then merged it back into the master. If you\u2019ve done this, you\u2019ll know how ugly the history becomes.</p> <p>In frustration, I \u201cfixed\u201d the dirty history by deleting .git and starting fresh. The good news is that my data was completely unaffected. The bad news was I lost my git history. What I have learnt since then would have allowed me to fix things properly without losing my history.</p>"},{"location":"Other/2017-05-18-Git-Epilogue/#rewriting-history","title":"Rewriting History","text":"<p>To clean up my public history, I just did a</p> <p><code>git commit --amend</code></p> <p>on a branch, followed by a</p> <p><code>git reset</code></p> <p>on the master and finished with a</p> <p><code>git push -f</code></p> <p>I knew the pitfalls with public commits and I knew that it was no problem!</p>"},{"location":"Other/2017-05-18-Git-Epilogue/#line-ending-wrinkles","title":"Line Ending Wrinkles","text":"<p>When using bash on ubuntu on Windows all of my files appeared to have changed. This is owing to the different way that line endings are handled in Linux and Windows. The solution was to run this command:</p> <p><code>git config --global core.autocrlf true</code></p>"},{"location":"Other/2017-05-18-Git-Epilogue/#ssh-usage","title":"ssh usage","text":"<p>Connecting to GitHub with SSH</p> <pre><code>ssh-keygen -t ed25519 -C \"name@example.com\"\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\ncat ~.ssh/id_ed25519.pub # copy to clipboard\nssh -T git@github.com\ncd jchidley.github.io/\ngit remote --verbose\ngit remote set-url  --push origin git@github.com:jchidley/jchidley.github.io.git\ngit config pull.rebase true\ngit pull\ngit config --global user.name \"Jack Chidley\"\ngit config --global user.email 7399749+jchidley@users.noreply.github.com # account settings in GitHub, no reply email\n</code></pre> <p>Git everyday</p> <p>Git with GitHub</p>"},{"location":"Other/2020-01-17-Data-with-Python/","title":"Data With Python","text":""},{"location":"Other/2020-01-17-Data-with-Python/#data-with-python","title":"Data With Python","text":""},{"location":"Other/2020-01-17-Data-with-Python/#links","title":"Links","text":"<ul> <li>Pandas</li> <li>Pandas DataFrame to SQL (with examples)</li> <li>Working with SQLite Databases using Python and Pandas</li> <li>Series about Pandas and Data</li> <li>A Dirty Way of Cleaning Data (ft. Pandas &amp; SQL)</li> <li>Translating SQL to pandas</li> <li>Using Python Pandas dataframe to read and insert data to Microsoft SQL Server</li> <li>What the pandas Python data analysis library and SQL taught me about taking an average</li> <li>Core tools for working with streams - including StringIO</li> <li>SQLAlchemy and SQLite</li> <li>SQLcipher can be used</li> <li>pathlib: The easy way to deal with file paths on Windows, Mac and Linux</li> <li>SQLAlchemey for faster queries</li> </ul>"},{"location":"Other/2020-01-23-SQLite-Stuff/","title":"SQLite Stuff","text":""},{"location":"Other/2020-01-23-SQLite-Stuff/#sqlite-stuff","title":"SQLite Stuff","text":""},{"location":"Other/2020-01-23-SQLite-Stuff/#links","title":"Links","text":"<p>https://docs.sqlalchemy.org/en/13/dialects/sqlite.html https://docs.sqlalchemy.org/en/13/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlite http://www.ch-werner.de/sqliteodbc/ http://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki https://yourbusiness.azcentral.com/connecting-excel-sqlite-12971.html</p>"},{"location":"Other/2020-02-09-URL-Dump/","title":"URL Dump","text":""},{"location":"Other/2020-02-09-URL-Dump/#url-dump","title":"URL Dump","text":""},{"location":"Other/2020-02-09-URL-Dump/#introduction","title":"Introduction","text":""},{"location":"Other/2020-02-09-URL-Dump/#tiny-linux","title":"Tiny Linux","text":"<p>layers-linux-distribution-source http://distro.ibiblio.org/tinycorelinux/downloads.html https://voidlinux.org/download/ https://alpinelinux.org/about/ https://www.adelielinux.org/about-qa.html http://www.slitaz.org/en/</p>"},{"location":"Other/2020-02-09-URL-Dump/#gitlab","title":"GitLab","text":"<p>https://about.gitlab.com/direction/ https://gitlab.com/gitlab-org/gitlab-foss/issues/32638 https://about.gitlab.com/blog/2017/10/04/devops-strategy/ https://about.gitlab.com/blog/2017/10/09/gitlab-raises-20-million-to-complete-devops/ https://usersnap.com/blog/gitlab-github/</p>"},{"location":"Other/2020-02-09-URL-Dump/#windows-10","title":"Windows 10","text":"<p>https://support.thinkcritical.com/kb/articles/switch-windows-10-from-raid-ide-to-ahci https://answers.microsoft.com/en-us/windows/forum/windows_10-performance/windows-10-performance-and-install-integrity/75529fd4-fac7-4653-893a-dd8cd4b4db00</p>"},{"location":"Other/2020-02-09-URL-Dump/#uefi","title":"UEFI","text":"<p>https://blog.uncooperative.org/blog/2014/02/06/the-efi-system-partition http://www.rodsbooks.com/efi-bootloaders/csm-good-bad-ugly.html http://rodsbooks.com/bios2uefi/ https://docstore.mik.ua//manuals/hp-ux/en/5991-1247B/ch05s23.html https://docs.mellanox.com/display/BlueFieldSWv12010639/UEFI+Boot+Option+Management https://superuser.com/questions/1035522/how-to-add-booting-parameters-to-the-kernel-with-bcfg-from-the-efi-shell https://techlibrary.hpe.com/docs/iss/proliant_uefi/UEFI_TM_030617/GUID-D7147C7F-2016-0901-0A6D-0000000005DF.html https://www.tianocore.org/docs/</p>"},{"location":"Other/2020-02-09-URL-Dump/#unifi","title":"UniFi","text":"<p>https://lazyadmin.nl/home-network/installing-unifi-controller-on-a-raspberry-pi-in-5-min/ https://community.ui.com/questions/Step-By-Step-Tutorial-Guide-Raspberry-Pi-with-UniFi-Controller-and-Pi-hole-from-scratch-headless/e8a24143-bfb8-4a61-973d-0b55320101dc</p>"},{"location":"Other/2020-02-09-URL-Dump/#misc","title":"Misc","text":"<p>https://learn.adafruit.com/read-only-raspberry-pi https://wiki.gentoo.org/wiki/Raspberry_Pi/Minimal_musl%2Bbusybox_cross_building https://github.com/armtux/gentoo-rpi3b-radio/releases/tag/0.1-beta1 https://github.com/enclustra-bsp/busybox-rootfs/tree/master/board/raspberrypi https://buildroot.org/downloads/manual/manual.html#_getting_started https://blog.jayway.com/2013/01/20/linux-from-scratch-on-raspberry-pi/ http://ghdl.free.fr/</p>"},{"location":"Other/2020-02-09-URL-Dump/#2020-04-16-dump","title":"2020-04-16 Dump","text":"<p>https://www.atlassian.com/git/tutorials/undoing-changes http://www.clifford.at/yosys/files/yosys_manual.pdf https://www.electronics-notes.com/articles/analogue_circuits/transistor/transistor-common-collector-emitter-follower.php https://www.electronics-tutorials.ws/oscillator/crystal.html https://www.eleccircuit.com/ic-4049-clock-pulse-generator/ https://www.westfloridacomponents.com/mm5/graphics/F10/CSA358MG300DETF.pdf https://medium.com/@krembo/command-history-in-interactive-python-interpreter-44977aadc617 https://makezine.com/2009/02/20/breakout-smd-chips-on-stripboard/ https://hackaday.com/2018/01/09/improved-perfboard-for-surface-mount-parts/ Advanced protoboard layout with 1.27mm pitch for smd parts BML 50mil (0.050\u2033 , 1.27mm) Proto Boards for Rapid Surface Mount Prototyping https://wiki.alpinelinux.org/wiki/Alpine_Linux:FAQ https://github.com/electron/electron/issues/9662 https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud#create-the-repository https://wiki.python.org/moin/BitManipulation https://docs.python.org/3/library/ctypes.html https://pypi.org/project/bitarray/</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/","title":"FPGA-and-Amaranth-HDL","text":""},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#fpga-and-amaranth-hdl","title":"FPGA and Amaranth HDL","text":""},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#introduction","title":"Introduction","text":"<p>For a whole stack of reasons, mostly gleaned from this playlist and earlier reading (prior to 2023) it seems like this is the way to go:</p> <ul> <li>Verilog</li> <li>Simulation, not physical hardware</li> <li>ICE40 HX 4K</li> <li>Icestorm</li> <li>Risc-V</li> <li>6502</li> </ul> <p>John uses Z80 as it was his first computer, 6502 is, arguably, easier to understand and implement. There will also be a number of soft-cores of the 6502 and a lot of assembly examples - this is what people programmed in.</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#projects","title":"Projects","text":"<ul> <li>BUILDING AN 8-BIT CPU ON AN FPGA</li> <li>BUILDING AN FPGA COMPUTER: SAP-1</li> <li>BUILDING AN FPGA COMPUTER: SAP-2</li> <li>BUILDING AN FPGA COMPUTER: SAP-3</li> <li>BUILDING AN FPGA COMPUTER: VGA</li> <li>BUILDING AN 8-BIT CPU ON A GAME BOY</li> <li>BUILDING AN 8-BIT CPU ON A BREADBOARD</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#stuff","title":"stuff","text":"<ul> <li>Catherine @whitequark - developer of Amaranth HDL</li> <li>#nmigen on 2020-07-31 \u2014 irc logs at freenode.irclog.whitequark.org</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#todo","title":"TODO","text":"<ul> <li>FPGA Verilog \u2013 Chu, Pong</li> <li>Web Resources Relevant to FPGA Oberon System see Oberon</li> <li>Simple-As-Possible computer - Wikipedia</li> <li>SAP-1-FPGA: Implementation of the SAP-1 processor (Simple As Possible) in Icestudio</li> <li>Designing and Implementing a SAP-1 Computer</li> <li>Implementation of simple microprocessor using verilog</li> <li>About the ZipCPU</li> <li>Verilog, Formal Verification and Verilator Beginner's Tutorial</li> <li>The 100 MHz 6502 \u00b7 e-basteln</li> <li>fpga_101: FPGA 101 lessons/labs</li> <li>migen_litex_tutorials</li> <li>VHDL Article - Hardware Design for Software Engineers</li> <li>FPGA Tutorial - LED Blinker for Beginners, VHDL and Verilog</li> <li>Designing a CPU in VHDL, Part 4: The ALU, Comparisons and Branching</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#amaranth-todo","title":"Amaranth - TODO","text":"<ul> <li>GitHub - amaranth-lang/amaranth: A modern hardware definition language and toolchain based on Python</li> <li>GitHub - psychogenic/neptune: Flexible digital logic hardware frequency discriminator used as an extreeeeeme guitar tuner.</li> <li>Implementing a UART in Verilog and Migen -- whitequark's lab notebook</li> <li>Amaranth HDL toolchain</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#amaranth-hdl-installation-setup","title":"Amaranth HDL Installation, Setup","text":"<ul> <li>pip install amaranth-yosys The Amaranth HDL Yosys wheels provide a specialized WebAssembly based build of Yosys that runs via wasmtime-py if there is no system-wide Yosys installation, or if that installation is too old.</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#hdls","title":"HDLs","text":"<ul> <li>HDLs</li> <li>Amaranth - Python - a few hours ago</li> <li>Silice is an open source language that simplifies prototyping and writing algorithms on FPGA architectures.</li> <li>SpinalHDL \u00b7 GitHub - Scala - updated 2 days ago</li> <li>Check for Spinal HDL here</li> <li>Demo - Litex Development Enviroment - Public Docs - Trenz Electronic Wiki</li> <li>Chisel/FIRRTL: Home - Scala - updated yesterday</li> <li>Chisel pdf book</li> <li>Migen - still getting updates</li> <li>nMigen - last update 2022</li> <li>MyHDL - 31-May-2019 MyHDL 0.11.0 released</li> <li>FOSS Flows For FPGA \u2014 F4PGA documentation</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#amaranth-migen-nmigen","title":"Amaranth, Migen, nMigen","text":"<ul> <li>ChipFlow alpha documentation</li> <li>amaranth: A modern hardware definition language and toolchain based on Python see the documentation for Amaranth's Language &amp; toolchain</li> <li>Implementing a UART in Verilog and Migen \u2014 whitequark's lab notebook and Implementing a simple SoC in Migen -- whitequark's lab notebook</li> <li>A (Very) Quick Tour of nMigen as of May 25th, 2021</li> <li>FPGA Pong! with some useful explanations</li> <li>amaranth-template-fpga</li> <li>Building FPGA Gateware with Verilog and Amaranth: A Tutorial \u2014 CFU-Playground documentation</li> <li>Migen Litex tutorial with several PDFs</li> <li>Notes on nMigen</li> <li>iCEBreaker amaranth examples</li> <li>Learning FPGA Design with nMigen and github and ice40 flash reader</li> <li>Let\u2019s Write a Minimal RISC-V CPU in nMigen \u2013 Vivonomicon's Blog and github</li> <li>How I went from blinker to RSIC-V in 3 months</li> <li>bl0x/learn-fpga-amaranth: Code for Bruno Levy's learn-fpga tutorial written in Amaranth HDL</li> <li>amaranth | Open Research Institute with source code for maia sdr</li> <li>Python to HDL: full Amaranth walkthrough to FPGA and ASIC GDS with neptune: Flexible digital logic hardware frequency discriminator used as an extreeeeeme guitar tuner. and asic Tiny Tapeout :: Documentation in English</li> <li>learning nmigen</li> <li>Stuff about luna and nmigen / amaranth</li> <li>nmigen-examples: I want to learn nMigen</li> <li>Graded exercises for Amaranth HDL and Tutorial</li> <li>learning nmigen</li> <li>Libre-soc-dev nmigen tutorials etc.</li> <li>ULX3S nMigen examples</li> <li>Amaranth HDL examples for the Ulx4m FPGA board</li> <li>blackicemx_nmigen_examples</li> <li>hdl_ldpc_encoder</li> <li>A simple RISC V CPU built with nMigen</li> <li>Assorted library of utility cores for amaranth HDL</li> <li>mtkCPU is a simple, clear, hackable and very inefficient implementation of RiscV ISA in Amaranth HDL</li> <li>dsp_nmigen</li> <li>Experimental DSP cores in Amaranth HDL</li> <li>naps - The Relaxed Amaranth Packages Collection and FPGA Image Processing and this poster from apertus\u00b0</li> <li>amaranth examples</li> <li>amgen command line tool for frequent amgen HDL tasks (generate sources, show design)</li> <li>in progress 6502 core</li> <li>doing audio/DSP things with nMigen</li> <li>nMigen WISHBONE Examples</li> <li>Icebreaker nMigen Life</li> <li>Projects to learn nMigen and Amaranth</li> <li>Bellatrix is a CPU core that implements the RISC-V RV32I Instruction Set, based on Minerva</li> <li>Altair is a CPU core that implements the RISC-V RV32I Instruction Set.</li> <li>nmigen-beginner from ZipCPU's site</li> <li>Misato RISC-V RV32I CPU</li> <li>amaranth-farm ... where users of amaranth HDL share cores and code with each other</li> <li>Use amaranth-to-litex to simply import Amaranth code into a Litex project</li> <li>An Amaranth implementation of Voja Antonic's 4bit CPU and BADGE FOR SUPERCON.6 / November 2022</li> <li>RISC-V processor implemented in Amaranth</li> <li>A simple fixed-point FFT module with amaranth</li> <li>Streams library for Amaranth</li> <li>Implementation of CORDIC (COordinate Rotation DIgital Computer)in Amaranth</li> <li>based on icebreaker-amaranth-examples</li> <li>It's a UART... written in Amaranth!</li> <li>MCH2022 badge amaranth examples</li> <li>A collection of experimentations using the amaranth HDL framework</li> <li>A curated collection of code written using the amaranth hdl</li> <li>simple risc-v cpu and soc in amaranth-lang</li> <li>An implementation of \"the cradle\" for the ECP5-based colorlight i9 written with the Amaranth HDL</li> <li>Small, FPGA soft-cores for multiplication, division (eventually), and other arithmetic</li> <li>An FPGA project that implements the memory map of the computer known as Atari STe</li> <li>Standard HyperRAM core for ECP5</li> <li>Fiddling with FPGAs, Migen, LiteX and stuffs including ULX3S</li> <li>learn-migen: migen tutorials, etc</li> <li>(WIP) FSM generator for Migen based on Python generators</li> <li>nMigen for 6800 CPU with source code</li> <li>Monitor signals MyHDL/nMigen simulation and display as waveforms in a Jupyter notebook</li> <li>serialcommander is a small nmigen tool that executes various 'tasks' when sent various characters over a serial port/UART</li> <li>Amaranth-HDL built movement engine hexastorm uses amaranth elsewhere and the movement is based on this paper</li> <li>More Amaranth HDL stuff with <code>*.v</code> files, Klipper too</li> </ul> <ul> <li>Introduction -- LUNA documentation</li> <li>GitHub - greatscottgadgets/luna: a USB multitool + Amaranth HDL framework for monitoring, hacking, and developing USB devices</li> <li>Cynthion - Great Scott Gadgets</li> </ul> <p>search for Amaranth / nMigen / Migen with language Python at GitHub</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#tutorials-examples","title":"Tutorials, Examples","text":"<ul> <li>FPGA Introduction</li> <li>FPGA-101: Introduction to FPGAs, Learn the Basics</li> <li>Getting Started with FPGAs | No Starch Press</li> <li>Introductory Digital Systems Laboratory</li> <li>HDL workflow</li> <li>fpgacpu.org - FPGA CPU News</li> <li>assembly - Implementation of simple microprocessor using verilog - Stack Overflow</li> <li>GitHub - BrunoLevy/learn-fpga: Learning FPGA, yosys, nextpnr, and RISC-V</li> <li>Yosys Headquarters \u00b7 GitHub</li> <li>YosysHQ Documentation Library</li> <li> <p>oss-cad-suite-build: Multi-platform nightly builds of open source digital design and verification tools</p> </li> <li> <p>Circuit Simulator Applet</p> </li> <li>FPGA Bootcamp #0 | Hackaday.io</li> <li>Implementing a UART in Verilog and Migen \u2014 whitequark's lab notebook</li> <li>Designing a RISC-V CPU, Part 1: Learning hardware design as a software engineer</li> <li>migen:tutorial</li> <li>Including non-Amaranth Instances in Amaranth - kate's lab notebook</li> <li>fpga4fun.com - where FPGAs are fun</li> <li>litex FPGA 101 lessons/labs</li> <li>Reuse a (System)Verilog, VHDL, (n)Migen, Spinal HDL, Chisel coreVerilog,-VHDL,-(n)Migen,-Spinal-HDL,-Chisel-core)</li> <li>GitHub - osresearch/up5k: Upduino v2 with the ice40 up5k FPGA demos</li> <li>\ud83c\udfb2 A Tiny and Platform-Independent True Random Number Generator for any FPGA.</li> <li>learn-fpga: Learning FPGA, yosys, nextpnr, and RISC-V</li> <li>Building risc on FPGA</li> <li>Icestudio Documentation</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#verilog","title":"Verilog","text":"<ul> <li>GitHub - johnwinans/Verilog-Examples Github for the video</li> <li>FPGA #7 - FPGA Project Big Picture/Overview</li> <li>Learning how to FPGA with \u2018Neopixel\u2019 LEDs \u2013 Vivonomicon's Blog</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#old-but-useful","title":"old but useful","text":"<ul> <li>Porting a New Board To Migen</li> <li>Migen Tutorial</li> <li>Migen manual \u2014 Migen 0.8.dev0 documentation</li> <li>Migen | M-Labs</li> </ul> <p>probably worth looking up Migen documentation</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#hardware","title":"Hardware","text":"<ul> <li>A Student\u2019s Guide to the Digital World</li> <li>nextpnr</li> <li>Exploring Open-Toolchain FPGA HW, part 1</li> </ul> <p>Zero to ASIC Course | Zero to ASIC Course ChipFlow alpha documentation</p> <p>Boards that I own:</p> <ul> <li>TinyFPGA BX ICE40LP8K 128 KBit RAM, 6000 KBit flash</li> <li>TinyFPGA A2 XO2-1200 64 KBit RAM 64 KBit flash</li> <li>iceFUN iCE40-HX8K</li> <li>XLX3S Lattice ECP5 LFE5U-85F-6BG381C 32MB SDRAM, 4-16 MB Quad-SPI Flash</li> <li>upduino 2.1 Lattice UltraPlus ICE40UP5K FPGA with 5.3K LUTs, 1Mb SPRAM, 120Kb DPRAM, 8 Multipliers</li> </ul> <p>All supported by Apio (pronounced [\u02c8a.pjo]) is a multiplatform toolbox ULX3S, TinyFPGA BX supported by Litex ULX3S, Upduino</p> <ul> <li>UPduino Documentation \u2014 UPduino 0.1 documentation</li> <li>TinyFPGA</li> <li>ULX3S and ulx3s</li> <li>GitHub - devantech/iceFUN and Datasheet pdf and programmer</li> <li>First steps with openFPGALoader</li> <li>deprecated in favor of openFPGALoader</li> </ul> <p>2057-ICE40HX4K-TQ144-breakout: Minimal Raspberry PI breakout board for ICE40HX4K FPGA and this video ICE40 HX 4k appears to be an 8K with different packaging, under \u00a38 each</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#other","title":"Other","text":"<p>create top.v</p> <pre><code>module top (\n    input BIN1,\n    input BIN2,\n    output LED1,\n);\n\n    assign LED1 = BIN1 &amp; BIN2;\n\nendmodule\n</code></pre> <p>No breaks between the commands, treat as one block</p> <pre><code>read_verilog top.v # to convert Verilog\nopt # optimise the optput\nshow # generate a visual representation in a dot file\nsynth_ice40 # synthesize the design\nshow # another diagram of the result\ncd top # 'cd' into the top module\ndump $67 # to view a representation of the design\nexit # leave yosys, say before working on another verilog file\nwrite_json top.json # generate json file for the place and route tool, nextpnr\n</code></pre>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#nextpnr","title":"nextpnr","text":"<p>Follow the vcpkg installation instructions</p> <p>then:</p> <p><code>vcpkg install boost-filesystem:x64-windows boost-program-options:x64-windows boost-thread:x64-windows boost-python:x64-windows qt5-base:x64-windows eigen3:x64-windows</code></p> <p>Download the Embeddable python zip file for the version compatible with vcpkg from Python 3.6.4</p> <p>C:/Users/jackc/git/vcpkg and not c:/vcpkg</p> <p>cmake -DARCH=ice40 -DICEBOX_ROOT=C:/ProgramData/icestorm/share/icebox -DCMAKE_TOOLCHAIN_FILE=C:/Users/jackc/git/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows -G \"Visual Studio 15 2017 Win64\" -DPYTHON_EXECUTABLE=C:/Python364/python.exe -DPYTHON_LIBRARY=C:/Users/jackc/git/vcpkg/packages/python3_x64-windows/lib/python36.lib -DPYTHON_INCLUDE_DIR=C:/Users/jackc/git/vcpkg/packages/python3_x64-windows/include/python3.6 cmake --build . --config Release</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#nmigen","title":"nMigen","text":"<p>I created a specific Python environment in Anaconda for my nMigen installation.</p> <p>How to Manually Install Python Packages - ActiveState</p> <p>How to Install and Import Modules in Python 3 | Linode Docs</p> <pre><code>pip install git+https://github.com/m-labs/nmigen-boards.git.git\npip install git+https://github.com/m-labs/nmigen-boards.git-boards.git\n</code></pre> <pre><code>sudo apt -y install python3-pip gtkwave\n</code></pre> <pre><code>wsl -t U3\nwsl -d U3\n</code></pre> <pre><code># https://github.com/YosysHQ/oss-cad-suite-build\n# wget https://github.com/YosysHQ/oss-cad-suite-build/releases/download/2023-09-25/oss-cad-suite-linux-x64-20230925.tgz\ncd ~\ntar -xvf /mnt/c/Users/jackc/Downloads/oss-cad-suite-linux-x64-20230925.tgz -C ~\n# source oss-cad-suite/environment # every time\nsudo cp ~/oss-cad-suite/share/openocd/contrib/60-openocd.rules /etc/udev/rules.d\nsudo usermod -a -G plugdev $USER # might need to logout/login\ncat &lt;&lt; \"EOF\" &gt;&gt; ~/.profile\n\n# set PATH so it includes user's oss-cad-suite/bin\nif [ -d \"$HOME/oss-cad-suite/bin\" ] ; then\nexport PATH=\"$HOME/oss-cad-suite/bin:$PATH\"\nfi\nEOF\n. ~/.profile\n</code></pre> <pre><code>pip3 install --upgrade amaranth\npip3 install --upgrade pip # otherwise amaranth-boards installs as UKNOWN\n# git clone https://github.com/amaranth-lang/amaranth.git-boards.git\n# cd amaranth-boards\n# python3 -m pip install .\npip3 install --upgrade git+https://github.com/amaranth-lang/amaranth.git-boards.git\npip install markupsafe==2.0.1 # fixes ImportError: cannot import name 'soft_unicode' from 'markupsafe'...\n</code></pre> <p>ImportError: cannot import name 'soft_unicode' from 'markupsafe'</p> <p>see 2023-09-24-Systems-on-Systems.md for <code>usbipd</code>.</p> <pre><code>python3 -m amaranth_boards.ulx3s 85F\n</code></pre>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#graphviz-vs-code-extension","title":"Graphviz VS Code Extension","text":"<p>Graphviz Preview - simple preview Graphviz Interactive Preview - run \"Graphviz Interactive:... \" in the Command Palette</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#alpine-wsl","title":"Alpine WSL","text":"<p>Alpine WSL GitHub</p> <p>To allow installation of packages <code>Alpine.exe config --default-user root</code></p> <p>for icestorm</p> <p>build-base clang bison flex readline-dev gawk tcl-dev libffi-dev git mercurial graphviz pkgconfig python python3 python-dev python3-dev libftdi1-dev python3-dev qt5-qtbase qt5-qtbase-dev boost-dev boost-libs boost  cmake</p> <p>apk add sudo curl May need <code>py-pip</code> for pip pip3 install xdot</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#perhaps","title":"perhaps","text":"<p>automake eigen</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#not-available","title":"not available","text":"<p>libreadline-dev | readline-dev pkg-config | pkgconfig libftdi-dev | libftdi1-dev qt5-default | qt5-qtbase</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#nextpnr-stuff","title":"nextpnr stuff","text":"<p>ubuntu: sudo apt get install libeigen3-dev cmake -DICEBOX_ROOT=/usr/local/share/icebox  -DARCH=ice40 .</p> <p>apk add eigen</p> <p>python-dev  doxygen swig</p> <p>eigen</p> <p>python-libs boost-python3 boost-python2 python-boost python3-boost boost-python boost-python3 boost-python2 boost-python eigen-dev eigen3-dev eigen-libs eigen3 eigen eigen-dev</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#graphviz","title":"Graphviz","text":"<p>In another termainal...</p> <p>Need Grapviz to display output</p> <p>Move the extracted files to P:\\Tools\\graphviz-2.38\\release\\bin adjust PATH</p> <p>Run <code>dot show.dot -Tjpg -O</code> to convert to jpg with the name <code>show.dot.jpg</code></p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#j-core-project","title":"J-Core Project","text":"<p>J-Core is an open-source implementation of the SuperH SH-2 processor designed for FPGAs and ASIC implementations.</p>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#j-core-development","title":"J-Core Development","text":"<ul> <li>J-Core Project Homepage</li> <li>J-Core design walkthrough</li> <li>J-Core ICE40 implementation</li> <li>J-Core mailing list</li> <li>J-Core development discussion</li> <li>Core Semiconductor - J-Core commercial support</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#related-development-tools","title":"Related Development Tools","text":"<ul> <li>Linux From Scratch</li> <li>mkroot build system</li> <li>Rob Landley's homepage</li> <li>Rob Landley's notes</li> <li>Rob Landley's LCA 2017 talk</li> <li>Suckless philosophy</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#qemu-and-emulation","title":"QEMU and Emulation","text":"<ul> <li>QEMU ARM System emulator</li> <li>Raspberry Pi discussion forum</li> <li>What is Raspbian?</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#additional-fpga-resources","title":"Additional FPGA Resources","text":"<ul> <li>fpga4fun.com</li> <li>GHDL synthesis</li> <li>GHDL VHDL simulator</li> <li>Yosys synthesis suite</li> <li>VHDL to Verilog converter</li> <li>UPduino FPGA tutorial</li> <li>Build your own CPU from scratch inside an FPGA</li> <li>The lull before the storm</li> <li>IceStorm FPGA toolchain</li> <li>APIO FPGA toolbox</li> </ul>"},{"location":"Other/2020-03-12-FPGA-and-Amaranth-HDL/#licensing","title":"Licensing","text":"<ul> <li>BSD Zero Clause License</li> </ul>"},{"location":"Other/2020-04-21-Signals/","title":"Signals","text":""},{"location":"Other/2020-04-21-Signals/#url-dump","title":"URL Dump","text":""},{"location":"Other/2020-04-21-Signals/#introduction","title":"Introduction","text":"<p>Signals and Systems - Excellent lectures Think DSP - Green Tea Press - Excellent book, uses python GitHub - spatialaudio/digital-signal-processing-lecture: Digital Signal Processing - Theory and Computational Examples GitHub - chipmuenk/pyfda: Python Filter Design Analysis Tool tool that uses python and Migen to produce verilog files Inside Logic Gates - very good deceptions of circuits The Scientist and Engineer\u2019s Guide to Digital Signal Processing Introduction to Digital Filters Digital Filtering: An Introduction by Cunningham, Edward P. ISBN 13: 9780471124757 Brian Douglas Great channel bout control systems Control Systems Lectures - Time and Frequency Domain Discrete control #1: Introduction and overview Why Learn Control Theory More Videos \u2014 Engineering Media 4 Ways to Implement a Transfer Function in Code Signal processing - SciPy MATLAB Home - MATLAB &amp; Simulink Get the full capabilities of MATLAB for GBP 105. Buy Simulink and add-on products for GBP 29 each. MATLAB vs Python: Why and How to Make the Switch MATLAB to Python Migration Small Matlab to Python compiler Python vs Matlab - Python for scientists Audio and Digital Signal Processing(DSP) - Python For Engineers Signal processing - SciPy Cookbook Signal processing (scipy.signal) 4.2.7. The Transfer Function in the Z-domain \u2014 Digital Signal Processing TransferFunction - Python Control Systems Library Feedback Systems: An Introduction for Scientists and Engineers Free course and book on feedback, control, signals Python Control Systems Library developed to support the \u201cFeedback Systems: An Introduction for Scientists and Engineers\u201d, noted elsewhere. Visualising transfer functions in the Z-domain | ad hocumentation \u2022 n. fast, instinctive documentation of ideas and solutions.</p>"},{"location":"Other/2020-09-24-Prusa-3d-printer/","title":"Prusa 3d Printer","text":""},{"location":"Other/2020-09-24-Prusa-3d-printer/#prusa-mk3s","title":"Prusa Mk3S","text":""},{"location":"Other/2020-09-24-Prusa-3d-printer/#setup","title":"Setup","text":"<p>Z Level - currently about -1.1mm. Raised on the left by 20 microns, probably needs to be reaised at the front.</p> <p>Bed Level Correction</p> <p>Using Maker's Muse Clearance Castle models (Clearance card and drawbridge) and Califlower/Calilantern from Vector 3D.</p>"},{"location":"Other/2020-09-24-Prusa-3d-printer/#designing-for-3d-printing","title":"Designing for 3D printing","text":"<p>Chamfer bottom/top edges to avoid foot (say 1 layer thickness) for dimensional accuracy.</p> <p>5 3D Printing Tips the ELITES don't want you to know... #3DP101</p> <p>Printing tips - including TPU How to 3D Print like a Pro using Custom Modifier Meshes!</p> <ul> <li>support for holes, with single filaments or single layer, or stepped layers</li> <li>G10 sheet</li> <li>Food dehydrator</li> <li>Bed adhesion: prit stick and alcohol in a single layer</li> <li>Slice from STEP files</li> </ul> <p>How-to Design for Mass Production 3D Printing a whole stack of useful 3D printing design tips (chamfers, surface effects, printing on edge, etc)</p>"},{"location":"Other/2020-09-24-Prusa-3d-printer/#printer-settings","title":"Printer Settings","text":"<p>5 3D Printing Tips the ELITES don't want you to know... #3DP101</p> <p>5 Slicer defaults I ALWAYS change #3DP101</p> <p>Advanced Slicer Settings using Custom Modifier Meshes!</p> <p>Layers and Perimeters, Vertical shells, Perimiters: 3 Layers and Perimiters, Advanced, Seam position: Aligned Infill, Fill pattern: either Adaptive Cubic or Gyroid</p>"},{"location":"Other/2020-09-24-Prusa-3d-printer/#filaments","title":"Filaments","text":"<p>Need to test printer with actual filament</p> <p>Temperature testing (for stringing and overhangs).</p> <p>Maker's Muse Clearance Castle models (not the full castle). See Can you Conquer the Clearance Castle?</p> <p>Print in Place Engine Benchmark - The Bengine with video</p> <p>Size, skew and tolerances, useful to see shrinkage for particular filaments Califlower for 2D which is quicker than the more comprehensive Calilantern 3D toleraaces. Prusa does the scaling and skew automatically, but the filament needs measuring too.</p> <p>Calibration Cubes: More Harm Than Good?</p> <p>7 super satisfying 3D printing torture tests</p>"},{"location":"Other/2020-09-24-Prusa-3d-printer/#filamentie-rpetg","title":"Filamentie rPETg","text":"<p>I added brims to ensure the first layer stuck properly, gyroid fill in, 10C difference between first and subsequent layers, 215C overall temp (225C first).</p>"},{"location":"Other/2020-09-24-Prusa-3d-printer/#octopi","title":"OctoPi","text":"<p>Octoprint OctoPi setup for Original Prusa i3 MK3 Octoprint Raspberry 4B + 4K webcam guide and the latest great plugins Top Must Have OctoPrint Plugins For Your 3D Printer PrusaSlicer</p>"},{"location":"Other/2020-10-29-Klipper-3D/","title":"Kipper 3D","text":""},{"location":"Other/2020-10-29-Klipper-3D/#kipper-3d","title":"Kipper 3D","text":""},{"location":"Other/2020-10-29-Klipper-3D/#introduction","title":"Introduction","text":"<p>set up the stuff install octopi sudo apt update &amp;&amp; sudo apt upgrade install klipper update firmware use STM32F103 with HID bootloader and STM32_HID_bootloader - Releases from 0.6 this includes \"SKR Mini E3\"</p> <p>Filamentive rPLA 0.4mm nozzle 195C retraction is 3.8mm at 40mmps</p> <pre><code>G28\nPROBE_ACCURACY \n# range 0.007500, standard deviation 0.002291 - with stowing\n# range 0.010000, standard deviation 0.003317 - without stowing \nSCREWS_TILT_CALCULATE\n# On a square bed, opposite corners should be equal: the one opposite the reference \n# corner should be level (i.e. no remaining adjustment)\n# The other two corners should require equal adjustment in the same direction: \n# i.e. level but with a warped bed!\nBED_MESH_CALIBRATE\nPROBE_CALIBRATE # replace z_offset\n</code></pre> <p>Don't forget to <code>SAVE_CONFIG</code></p> <p>https://www.klipper3d.org/Manual_Level.html</p> <p>I use <code>128x64 Full Graphic Creality CR10 / ENDER 3 stockdisplay</code></p>"},{"location":"Other/2020-10-29-Klipper-3D/#changes","title":"Changes","text":"<pre><code>[stepper_x]\nposition_endstop: 0\nposition_max: 250\n\n[stepper_y]\nposition_endstop: -7\nposition_min: -7\nposition_max: 230\n\n[stepper_z]\nendstop_pin: probe:z_virtual_endstop \n# endstop_pin: ^PC2\nposition_min: -1\n\n[extruder]\npressure_advance: 0.6\n</code></pre>"},{"location":"Other/2020-10-29-Klipper-3D/#additions","title":"Additions","text":"<pre><code>[bltouch]\nsensor_pin: PC2\ncontrol_pin: PA1\nset_output_mode: 5V\nx_offset: -43\ny_offset: -5\nz_offset: 2.75 # or 1.95\n\n[bed_mesh]\nmesh_min: 5,15\nmesh_max: 205,215\nprobe_count: 5,5\n\n[safe_z_home]\nhome_xy_position: 76,40 # front left screw position\nz_hop: 10\n\n[screws_tilt_adjust]\nscrew1: 76,206\nscrew1_name: rear left screw\nscrew2: 245,206\nscrew2_name: rear right screw\nscrew3: 245,40\nscrew3_name: front right screw\nscrew4: 76,40\nscrew4_name: front left screw\nhorizontal_move_z: 10.\nspeed: 50.\nscrew_thread: CW-M3\n\n[gcode_macro G29]\ngcode:\n    G28\n    G1 z10\n    BED_MESH_CALIBRATE\n\n[endstop_phase]\n</code></pre> <p>Do endstop phase calibration</p> <p>Do config checks</p> <pre><code>PID_CALIBRATE HEATER=extruder TARGET=220\nPID_CALIBRATE HEATER=heater_bed TARGET=60\nSAVE_CONFIG\n</code></pre> <p>in <code>gcode_macro START_PRINT</code> swap <code># Set and wait for nozzle to reach temperature</code> and <code># Wait for bed to reach temperature</code> so that both are heating</p>"},{"location":"Other/2020-10-29-Klipper-3D/#links","title":"Links","text":"<p>https://www.klipper3d.org/Manual_Level.html https://github.com/bigtreetech/BIGTREETECH-SKR-mini-E3/blob/master/hardware/BTT%20SKR%20MINI%20E3%20V1.2/BTT%20SKR%20MINI%20E3%20V1.2PIN.pdf</p>"},{"location":"Other/2020-11-13-Screen/","title":"Screen","text":""},{"location":"Other/2020-11-13-Screen/#changing-x-screen-resolutions","title":"Changing X Screen Resolutions","text":""},{"location":"Other/2020-11-13-Screen/#introduction","title":"Introduction","text":""},{"location":"Other/2020-11-13-Screen/#a-screen-that-i-use-and-its-firmware","title":"A screen that I use and its firmware","text":"<p>Current screen TX39D80VC1GAA https://www.panelook.com/TX39D80VC1GAA_KOE_15.4_LCM_overview_3425.html Potential firmware: N141I3_L02C1_1280X800_SI6L_3V_NT68676_5KEY_A_SCH_IR_B02_ADJ_0V_LOGO_NONE_R24253_20151228 https://www.panelook.com/N141I3-L02_Innolux_14.1_LCM_overview_2044.html Potential firmware: AUO_LP154W01_TLA1_SI6L_1280X800_NT68676_5KEY_A_SCH_IR_B02_ADJ_0V_LOGO_NONE_R24253_20151228 https://www.panelook.com/LP154W01-TLA1_LG%20Display_15.4_LCM_overview_5560.html</p>"},{"location":"Other/2020-11-13-Screen/#downloads","title":"Downloads","text":"<ul> <li>Firmware Archive from Bangood</li> <li>How to upgrade the NT68676 firmware with USB programmer_V1.0</li> <li>Firmware for NT68676</li> </ul>"},{"location":"Other/2020-11-13-Screen/#x-server-screen-resolution-change","title":"X Server Screen Resolution Change","text":"<p>For Raspberry Pi screen resolution, sometimes the correct screen resolution cannot be selected within X.  From a terminal <code>xrandr</code> will list the screen and modes</p> <p>To discover the mode name for a desired resolution enter <code>cvt 1280 800</code> and it should respond with something like:</p> <pre><code># 1280x800 59.81 Hz (CVT 1.02MA) hsync: 49.70 kHz; pclk: 83.50 MHz\nModeline \"1280x800_60.00\"   83.50  1280 1352 1480 1680  800 803 809 831 -hsync +vsync\n</code></pre> <p>which is then used to add the new mode (note \"Modline \" has been removed):</p> <pre><code>xrandr --newmode  \"1280x800_60.00\"   83.50  1280 1352 1480 1680  800 803 809 831 -hsync +vsync\n</code></pre> <p>Which is added to HDMI-1 (for instance) using:</p> <pre><code>xrandr --addmode HDMI-1 1280x800_60.00\n</code></pre> <p>select it</p> <pre><code>xrandr --output HDMI-1 --mode 1280x800_60.00\n</code></pre> <p>or by using a GUI.</p>"},{"location":"Other/2020-11-13-Screen/#links","title":"Links","text":"<ul> <li>How to use xrandr</li> <li>Arch Linux - xrandr \"If you are not sure about the resolution you will test, you may add a sleep 5 and a safe resolution command line following, like this:\" <code>xrandr --output VGA1 --mode 1280x1024_60.00 &amp;&amp; sleep 5 &amp;&amp; xrandr --newmode \"1024x768-safe\" 65.00 1024 1048 1184 1344 768 771 777 806 -HSync -VSync &amp;&amp; xrandr --addmode VGA1 1024x768-safe &amp;&amp; xrandr --output VGA1 --mode 1024x768-safe</code></li> </ul>"},{"location":"Other/2020-12-08-Raku/","title":"Raku","text":""},{"location":"Other/2020-12-08-Raku/#raku","title":"Raku","text":"<pre><code>ssh root@alpine2\nvi /etc/apk/repositories\n# uncomment testing\napk update &amp;&amp; apk upgrade\napk add rakudo\n</code></pre>"},{"location":"Other/2020-12-08-Raku/#links","title":"Links","text":"<ul> <li>rakudo-dev Alpine Linux</li> <li>rakudo Alpine Linux</li> <li>Raku Guide</li> <li>Planet Raku</li> <li>Rakudo Weekly News</li> <li>Minimal Line Editor</li> <li>zef -Raku / Perl6 Module Management</li> <li>rakubrew is a Raku installation tool</li> <li>Setting up Raku with Rakubrew</li> <li>Cro - elegant reactive services in Raku</li> <li>Pod6</li> <li>Grammar tutorial</li> <li>CodeSections</li> <li>Weaving Raku: semiliterate programming in a beautiful language | CodeSections</li> <li>A Review of Perl 6 (Raku) \u2013 Evan Miller</li> <li>Think Raku \u2013 Green Tea Press</li> </ul>"},{"location":"Other/2021-02-06-Audio/","title":"Audio","text":""},{"location":"Other/2021-02-06-Audio/#audio","title":"Audio","text":""},{"location":"Other/2021-02-06-Audio/#introduction","title":"Introduction","text":"<ul> <li>(https://en.wikipedia.org/wiki/Linux_startup_process)</li> </ul>"},{"location":"Other/2021-02-06-Audio/#raspberry-pi","title":"Raspberry Pi","text":""},{"location":"Other/2021-02-06-Audio/#iqaudio","title":"IQaudIO","text":"<p>edit<code>/boot/config.txt</code></p> <pre><code>#dtparam=audio=on\ndtoverlay=iqaudio-dacplus\n# or dtoverlay=iqaudio-dacplus,unmute_amp\n</code></pre>"},{"location":"Other/2021-02-06-Audio/#bluetooth-speaker-setup","title":"Bluetooth Speaker Setup","text":"<p>PipeWire is the new audio for Bookworm \u2014 Raspberry Pi OS. Need to use this for any bluetooth speakers.</p> <pre><code>sudo apt-get install pulseaudio pulseaudio-module-bluetooth\nsudo usermod -a -G bluetooth jack # or another user, like pi\nsudo sed -ie 's/#Class = 0x000100/Class = 0x41C/' /etc/bluetooth/main.conf\nsudo sed -ie 's/#DiscoverableTimeout = 0/DiscoverableTimeout = 0/' /etc/bluetooth/main.conf\n</code></pre> <pre><code>sudo systemctl enable bluetooth\nsystemctl --user enable pulseaudio\nsudo reboot\n</code></pre> <p>Note if you have a Pi 2 or earlier, this won't work as you need a bluetooth module. You'll get logged \"Condition PathIsDirectory=/sys/class/bluetooth\" if you <code>systemctl cat bluetooth|grep Condition</code></p> <pre><code>bluetoothctl\n[bluetooth]# power on\n[bluetooth]# discoverable on\n[bluetooth]# pairable on\n[bluetooth]# agent on\n[bluetooth]# default-agent\nquit\n</code></pre> <pre><code>pulseaudio --start\nsudo systemctl status bluetooth\nsystemctl --user enable pulseaudio\nsudo raspi-config\n</code></pre> <pre><code>1. System Options\nS5. Boot\nB2. Console Autologin Text\n</code></pre> <pre><code>sudo apt-get install bluez-tools\nsudo su\ncat &gt; /etc/systemd/system/bt-agent.service &lt;&lt; \"EOF\"\n[Unit]\nDescription=Bluetooth Auth Agent\nAfter=bluetooth.service\nPartOf=bluetooth.service\n\n[Service]\nType=simple\nExecStart=/usr/bin/bt-agent -c NoInputNoOutput\n\n[Install]\nWantedBy=bluetooth.target\nEOF\nexit\n</code></pre> <pre><code>sudo systemctl enable bt-agent\nsudo systemctl start bt-agent\n</code></pre> <pre><code>sudo nano /etc/systemd/system/bluetooth.target.wants/bluetooth.service\n</code></pre> <pre><code>[Service]\nExecStart=/usr/lib/bluetooth/bluetoothd --noplugin=avrcp\n</code></pre> <ul> <li>Another How to turn your Pi in a Bluetooth Speaker Tutorial</li> </ul>"},{"location":"Other/2021-02-06-Audio/#alpine-linux-packages","title":"Alpine Linux Packages","text":"<p>Alpine Linux packages</p> <p>pulseaudio-utils ncpamixer</p>"},{"location":"Other/2021-02-06-Audio/#links","title":"Links","text":""},{"location":"Other/2021-02-06-Audio/#hardware","title":"Hardware","text":"<ul> <li>micbooster.com</li> <li>Build Lavalier or Lapel Microphones : 6 Steps (with Pictures) - Instructables</li> <li>OPA Based Alice Microphones: a Cardioid and a Figure 8 : 7 Steps (with Pictures) - Instructables</li> <li>Building A Top-Notch Electret Microphone | Hackaday</li> <li>Low-Noise Binaural Mics (Primo EM172) \u2013 Zach Poff</li> <li>DIY Microphone: EM172 Capsule and XLR Plug \u00ab The View Up Here</li> <li>DIY stereo electret mics with Primo EM-172 capsules - Wild Mountain Echoes</li> <li>Field recording equipment \u2014 Mindful Audio</li> <li>Sound Sleuth</li> <li>DJJules\u2019s Activity - Instructables sound - MixPre-D USB audio interface shows up as \u201cOutput Device,\u201d not \u201cInput Device\u201d in Lubuntu 20.04 - Ask Ubuntu</li> <li>If You Need Help | Learn Light and Sound</li> <li>How To Make A Cheap Video Mic - IBUILDIT.CA</li> <li>Microphone sensitivity and conversion</li> <li>How to build a Stereo Microphone and Battery Box - Live Recording - Sony Insider Forums</li> <li>ePanorama.net - Circuits</li> </ul>"},{"location":"Other/2021-02-06-Audio/#general-alsa","title":"General, ALSA","text":"<ul> <li>How Linux Audio Works vs. Windows Audio in 2017</li> <li>Advanced Linux Sound Architecture - ArchWiki</li> <li>Advanced Linux Sound Architecture - Wikipedia</li> <li>A close look at ALSA</li> <li>Linux ALSA sound notes</li> <li>Demystifying JACK \u2013 A Beginners Guide to Getting Started with JACK | Libre Music Production</li> <li>Guide to using M-Audio Audiophile USB with ALSA and Jack \u2014 The Linux Kernel documentation</li> <li>Using a USB Audio Device With a Raspberry Pi</li> <li>Using a USB Audio Device with the Raspberry Pi - Raspberry Pi Spy</li> <li>Is there a Linux program I can use to apply tweaks/\u2018effects\u2019 to the sound of my microphone? - Quora</li> </ul>"},{"location":"Other/2021-02-06-Audio/#pulseaudio","title":"pulseaudio","text":"<ul> <li>Why you should care about PulseAudio (and how to start doing it) - Linux.com</li> <li>PerfectSetup</li> <li>PulseAudio under the hood</li> <li>PulseAudio - Debian Wiki</li> <li>Title</li> <li>PulseAudio - NixOS Wiki</li> <li>pulse-daemon.conf: PulseAudio daemon configuration file - Linux Man Pages (5)</li> <li>JACK - NixOS Wiki</li> <li>Profiles</li> <li>PulseAudio</li> <li>PulseAudio - Gentoo Wiki</li> <li>PulseAudio | Music Player Daemon Wiki | Fandom</li> <li>Audient EVO 4 Pulseaudio profile</li> <li>PulseAudio - ArchWiki</li> <li>Alpine Linux pulseaudio packages</li> <li>Ubuntu Manpage: pulse-cli-syntax - PulseAudio Command Line Interface Syntax</li> <li>Stream audio over network with PulseAudio running on Raspberry Pi</li> <li>PulseAudio: Sound over the network | manurevah</li> <li>Raspberry Pi network audio player: pulseaudio, DLNA and bluetooth A2DP \u2013 part 1: pulseaudio</li> <li>PulseAudio network sink</li> <li>PulseAudio Modules</li> <li>PulseAudio/Troubleshooting</li> <li>How to get PulseAudio running?</li> </ul>"},{"location":"Other/2021-02-06-Audio/#mpd","title":"mpd","text":"<ul> <li>User\u2019s Manual \u2014 Music Player Daemon 0.22.9 documentation</li> <li>sound - MPD with pulseaudio - Ask Ubuntu</li> <li>MPD with pulseaudio</li> </ul>"},{"location":"Other/2021-07-06-Parsing-Compilers/","title":"Parsing Compilers","text":""},{"location":"Other/2021-07-06-Parsing-Compilers/#parsing-compilers","title":"Parsing Compilers","text":"<p>mold - a new linker mold - a modern linker</p> <p>Faster programs: * don't guess, measure * Data is usually way more important than code: better data structures are key * Try several algorithms and pick the fasted (measure!) * Write the same program several times</p>"},{"location":"Other/2021-07-06-Parsing-Compilers/#compiler-information","title":"Compiler Information","text":"<p>Some books are: * I bought, and downloaded <code>Crafting Interpreters.pdf</code>, Crafting Interpreters * Crafting Interpreters reference books * Lisp in small pieces by Christian Queinnec 978-0521545662 * Crafting a compiler by Charles N Fischer 978-0805332018 * A retargetable C compiler by Christopher W. Fraser 978-0805316704 * Build Your Own Lisp by Daniel Holden 978-1501006623</p> <ul> <li>This is easily the best reference: CSE 401 Spring 2023 Lectures</li> <li>Best YouTube: compiler_series: Material for the Creating a Compiler video lesson series.</li> <li>Practical, step-by-step, compiler chibicc: A small C compiler and chibicc documentation, in Japanese</li> <li>Crafting Interpreters and Crafting \"Crafting Interpreters\"</li> <li>System, compiler, RISC, FPGA, the whole lot Niklaus Wirth and Project Oberon with an Open Core and a risc-v version</li> <li>minilisp: A readable lisp in less than 1k lines of C and a version for ULX3S GitHub - emard/oberon</li> <li>Make a Lisp mal - Make a Lisp</li> <li>Show HN: How to write a tiny compiler | Hacker News</li> <li>Recommendations and So You Want to Be a (Compiler) Wizard?</li> <li>Compiler Construction with Chapters 1-8 and Chapters 9-16</li> <li>Let's write a compiler, part 1: Introduction, selecting a language, and doing some planning</li> <li>GitHub - rswier/c4: C in four functions</li> <li>1 What is a Compiler?</li> <li>An Incremental Approach to Compiler Construction</li> <li>cproc is a C11 compiler using QBE as a backend</li> <li>Let's get hands-on with QBE</li> <li>The ppci (pure python compiler infrastructure) project is a compiler written entirely in python with Creating a toy language -- ppci 0.5.9 documentation</li> <li>C to Assembly Translation</li> <li>A Guide to Code Generation - Strumenta</li> <li>Compiler/code generator - Rosetta Code</li> <li>Introduction to Compilers and Language Design </li> <li>Lecture 26, Code Generation</li> <li>Building a Compiler with MLIR</li> <li>Code Generation for Data Processing - Chair for Database Systems</li> <li>Target Code Generation</li> <li>site:https://courses.cs.washington.edu intermediate code generation</li> <li>CSE401: Introduction to Compiler Construction</li> <li>Compiler Optimization and Code Generation</li> <li>6.035: Computer Language Engineering</li> <li>Code-generator generators: generating the instruction selector</li> <li>The lcc retargetable ANSI C compiler</li> <li>Small-C Compiler with Developer Network Small-C Compiler book on CD-ROM | Dr Dobb\u2019s - includes K&amp;R writing and Small-C - Wikipedia</li> </ul> <pre><code>jackc@LAPTOP-VNSPU3KP:/mnt/c/Users/jackc/Downloads$ sudo mount -o loop ddj_devnetwork_small_c.iso /mnt/iso/\n\\\\wsl.localhost\\U3\\mnt\\iso\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n  printf(\"Hello World\\n\");\n  return 0;\n}\n</code></pre>"},{"location":"Other/2021-07-06-Parsing-Compilers/#compiler-tools","title":"Compiler Tools","text":"<ul> <li>User manual (C) -- re2c 3.0 documentation</li> <li>Flex, A fast scanner generator</li> <li>GNU Bison - The Yacc-compatible Parser Generator - GNU Project - Free Software Foundation</li> <li>GNU make</li> <li>Makefile Tutorial</li> </ul>"},{"location":"Other/2021-07-06-Parsing-Compilers/#links","title":"Links","text":"<ul> <li>Whirlwind Tour of ARM Assembly</li> <li>ARM Assembler</li> <li>PP4S: Introduction</li> <li>Let\u2019s Build a Compiler, by Jack Crenshaw</li> <li>Writing a C Compiler, Part 1</li> <li>Raspberry Pi Pico, VSCode and MacOS</li> <li>Stephen Smith's Blog - Musings on Machine Learning\u2026 - Posts Tagged \u2018assembly language\u2019</li> <li>1. ASM Programming RP2040 - Assembly Language on the Raspberry Pi Pico</li> <li>2. ASM Programming RP2040 - Calling Main in Assembly Language on the RP2040</li> <li>3. ASM Programming RP2040 - Bit-Banging the Raspberry Pi Pico\u2019s GPIO Registers</li> <li>How to Use Inline Assembly Language in C Code</li> <li>Compiling a Lisp: Overture</li> <li>Programming languages resources</li> <li>textX</li> <li>Arpeggio</li> <li>Overview \u2014 MicroPython 1.16 documentation</li> <li> <p>inc: an incremental approach to compiler construction</p> </li> <li> <p>ARM\u00ae and Thumb\u00ae-2 Instruction Set Quick Reference Card</p> </li> <li>Parsing/RPN calculator algorithm - Rosetta Code</li> <li>A RPN Calculator in F# Stefano Ricciardi</li> <li> <p>Additional Reading</p> </li> <li> <p>C++ Core Guidelines</p> </li> <li> <p>26 programming languages in 25 days, Part 2: Reflections on language design</p> </li> <li> <p>Day 1 - Advent of Code 2022</p> </li> <li> <p>Running Bare Metal Applications on QEMU</p> </li> <li> <p>femtolisp is a simple, elegant Scheme dialect</p> </li> </ul>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/","title":"FastAPI and JavaScript","text":""},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#fastapi-javascript","title":"FastAPI JavaScript","text":""},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#simplest-front-end-back-end","title":"Simplest Front End / Back End","text":"<p><code>main.py</code></p> <pre><code>from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\norigins = [\"http://localhost:9000\"]\n\n# assumes a suitable web server, e.g. \"python -m http.server 9000\"\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Run <code>uvicorn main:app --reload</code> in the directory with <code>main.py</code></p> <p><code>index.html</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;script&gt;\n        function getMessage() {\n            fetch('http://localhost:8000')\n                .then(function (response) { return response.json() })\n                .then(function (data) {\n                    document.getElementById(\"replaceable_text\").innerHTML = data.message\n                });\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;p&gt;Run a suitable web server that is allowed by CORS, for instance:\n        &lt;code&gt;python -m http.server 9000&lt;/code&gt;\n\n    &lt;p id=\"replaceable_text\"&gt;Text to be replaced by FastAPI&lt;/p&gt;\n\n    &lt;button type=\"button\" onclick=\"getMessage()\"&gt;Replace text&lt;/button&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>run <code>python -m http.server 9000</code> in the directory with <code>index.html</code></p>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#front-end","title":"Front End","text":"<p>CORS (Cross-Origin Resource Sharing) for a front end with a different signature from the back end Official Docker Image with Gunicorn - Uvicorn</p>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#download-stuff-to-a-file-from-javascript","title":"Download stuff to a file from javascript","text":"<p>Blob</p> <pre><code>function download(thing, filename = 'download'){\n    let link = document.createElement('a');\n    link.download = filename;\n\n    let blob = new Blob([thing]);\n\n    link.href = URL.createObjectURL(blob);\n\n    link.click();\n\n    URL.revokeObjectURL(link.href);\n}   \n</code></pre>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#working-with-nodelists","title":"Working with NodeLists","text":"<pre><code>// https://jshint.com/docs/options\nlet t = document.querySelector(\"table\"); // first table, should be the enforcing one\nlet ids = Array.from(t.querySelectorAll(\"tr&gt;td[id]\")); // the ids\nlet filtered = ids.filter(i =&gt; !i.parentElement.innerHTML.includes('deprecated'));\nlet strictOptions = filtered.map(i =&gt; {return i.id + \": true\"}).join(\", \");\n</code></pre>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#classes","title":"Classes","text":"<p>Simple \u201cClass\u201d Instantiation JavaScript without \u201cnew\u201d and \u201cthis\u201dkeywords</p>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#links","title":"Links","text":"<ul> <li>{JSON} Placeholder</li> <li>FastAPI</li> <li>petite-vue</li> <li>Project Generation - Template</li> <li>CORS (Cross-Origin Resource Sharing)</li> <li>Build FastAPI + uvicorn + nginx with docker-compose</li> <li>The cheap way how to use Docker to deploy your FastAPI</li> <li>GitHub Copilot</li> <li>Learn JavaScript</li> <li>JavaScript Helper Functions</li> <li>JavaScript Libraries</li> </ul>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#web-development-resources","title":"Web Development Resources","text":""},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#svelte","title":"Svelte","text":"<ul> <li>Svelte tutorial</li> <li>SvelteKit</li> <li>How to add JSDoc Typechecking to SvelteKit</li> <li>Svelte \u2022 Cybernetically enhanced web apps</li> <li>Reactivity - Svelte Society</li> </ul>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#javascript-development","title":"JavaScript Development","text":"<ul> <li>JavaScript basics - Learn web development | MDN</li> <li>The Modern JavaScript Tutorial</li> <li>JSHint Options Reference</li> <li>prettier-eslint</li> <li>VS Code Prettier ESLint</li> <li>ESLint</li> <li>Configure Rules</li> <li>TypeScript is JavaScript with syntax for types</li> </ul>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#jsdoc","title":"JSDoc","text":"<ul> <li>Type Safe JavaScript with JSDoc</li> </ul>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#static-site-generators","title":"Static Site Generators","text":"<ul> <li>Relearn CSS layout: Every Layout</li> <li>Lesson 2: Hello world | Learn Eleventy From Scratch</li> <li>GitHub - Andy-set-studio/learneleventyfromscratch.com: In this Eleventy course, we go from a completely empty directory to a full-blown marketing site for a design agency, and along the way, we dive really deep into Eleventy and front-end development best practices.</li> <li>Overview \u2014 Eleventy</li> </ul>"},{"location":"Other/2022-03-25-FastAPI-and-JavaScript/#web-apis-and-tools","title":"Web APIs and Tools","text":"<ul> <li>README - Everything curl</li> <li>Menu</li> <li>Can I use... Support tables for HTML5, CSS3, etc</li> <li>Template Designer Documentation \u2014 Jinja Documentation (3.1.x)</li> <li>Chart.js | Open source HTML5 Charts for your website</li> </ul> <p>https://vuejs.org/ https://fastapi.tiangolo.com/deployment/docker/</p>"},{"location":"Other/2022-03-25-Radio-and-Electronics/","title":"Radio and Electronics","text":""},{"location":"Other/2022-03-25-Radio-and-Electronics/#radio-stuf","title":"Radio stuf","text":""},{"location":"Other/2022-03-25-Radio-and-Electronics/#free-information","title":"Free Information","text":"<ul> <li>World Radio History espeically the Techinical Section and Elektor Magazine and Fun Way into Electronics</li> <li>Free Electronics Books and Magazines Web Sites</li> </ul>"},{"location":"Other/2022-03-25-Radio-and-Electronics/#simulation-software","title":"Simulation Software","text":"<p>Limits of SPICE (and other simulation). Parastics need to be moddeled. Models of various components are only approximations owing to the manufacturers intellectual property concerns and, probably, desire to reduce simulation complexity.</p> <ul> <li>Spectrum Software</li> <li>Micro Cap 12 Spice Simulation Sofwtare and here</li> <li>Micro Cap 12</li> <li>One among many projects: DIY Operational Amplifier: Tutorial Project with a set of videos</li> <li>Achieving accurate results with a circuit simulator</li> <li>Parasitics on Breadboards</li> <li>Every component has parasitics of something else (passive) inductance, capacitance and resistance and these parasitics start in the MHz region which include the very fast edges of things.</li> <li>Parasitics in wires</li> <li>2pf between sucessive tracks on a breadboard, 1pf if the tracks are separated by one track. 20pf for the power rail tracks. Breadboard Capacitance</li> <li>Simulation vs Reality models can be missing from EDA software.  Need to test in real life too. Get a board built.</li> <li> <p>Analog by Design Show</p> </li> <li> <p>Kyrocera AVX has various design tools which can be used and inspected online. There are also SPICE models for download.</p> </li> </ul>"},{"location":"Other/2022-03-25-Radio-and-Electronics/#general","title":"General","text":"<ul> <li>Unbricking a $2,000 Bike With a $10 Raspberry Pi Bluetooth Zwift Ant+ Raspberry Pi speed cadence heart rate sensor</li> <li>DIY Operational Amplifier schematic, explanation</li> </ul>"},{"location":"Other/2022-03-25-Radio-and-Electronics/#youtube","title":"YouTube","text":"<p>Electronics with Professor Fiore with free books</p>"},{"location":"Other/2022-03-25-Radio-and-Electronics/#qspice","title":"QSPICE","text":"<p>finding models</p> <p>Micro-Cap 12 from Spectrum software has a lot of models included.</p> <p>It's <code>mc12cd.zip_Spectrum_Software_Spice_Simulator_12.2.0.5.zip</code> on my OneDrive.</p> <pre><code># assumes model begins with '.model' and continues with '\\n+'\n# search for \"2n222\" in \"filename\"\nawk 'BEGIN{IGNORECASE=1} /\\.model\\s+*2n222/{f=1; print; next} /^\\s*[^+]/{f=0} f' filename \n# I think f is being used to do the default action (print) or nothing\n# for a one liner add \nfind -type f -print0 | xargs -0 # before awk and drop the \"filename\", use -r for recursive\n</code></pre> <ul> <li> <p>Mike Engelhardt the Creator of LTspice and now QSPICE ctrl-enter to add lines to an exisiting text(spice directive). <code>qsch</code> are 8-bit encoded Windows-1252 or CP-1252, these can be read in <code>nvim</code> or <code>notepad</code>. The command reference is in the help informaiton under simulator. \"The analog circuit simulation was originally based on a download of Berkeley SPICE from ptolemy.berkeley.edu. Specifically the version of 3F5 available in early 2020\", documentaiton appears to be at and there's All about Circuits documentation too. Apparently it's normal for it to be cryptic and undocumented. I know that some syntax has been lifted from elsewhere.</p> </li> <li> <p>Helpful guides</p> </li> </ul> <p>To get operating point data \"File-&gt;Export Data\" from the Waveform Viewer.</p> <ul> <li> <p>PyQspice</p> </li> <li> <p>QSPICE: A New Simulator for Electronic Circuits (Part 1)</p> </li> </ul> <p>See Tools, components, symbols, code, etc., for Qorvo's free QSpice circuit simulator, QSpice Forum KSKelvin's Github repo and QSpice Forum Mgyger's GitLab repo</p> <p>The first few chars in the file, according to Mike Engelhardt, \"I put those charactors there so certain e-mail servers don\u2019t convert the contents of the file. QSPICE symbols and schematics look like ASCII, and can be edited in notepad or any other eight-bit clean otherwise \u201cASCII\u201d editor. But they are not ASCII. So I give the files the same majic number as JPEG. E-mail servers don\u2019t touch the contents of JPEG.\"</p> <p>Extra symbols for qspice by Markus Gyger see additional symbols post in forum</p> <p>Apparently netlists can be used in Kicad. Kicad uses S-expressions</p> <ul> <li>Qspice tutorials, examples and guide</li> <li>Tools, components, symbols, code, etc., for Qorvo's free QSpice circuit simulator.</li> <li>QSpice Unleashed: Elevating the LTSpice Legacy in Electronic Simulation</li> <li>Ctrl-Right-Button on waveform to get pp, max, min for a particular waveform - like double click gives crosshairs</li> <li>Boost converter example and using a C++ with behavioural Voltage to work out efficiency and power loss. QSpice Insight with Boost Converter</li> <li>Description of using C++ with it</li> <li>LTSpice information - useful background to qspice</li> <li>LTSpice by the creator</li> <li>Adding models to QSpice</li> <li>PyQspice - bindings for Python</li> <li>funway into electronics</li> <li>World Radio History Techical</li> </ul> <p>qspice tutorial</p> <p>Troubleshooting Analog Circuits by Bob Pease</p> <p>Wires</p> <p>1) Inductive effects can be ignored if the resistance of the wire is substantial enough \u2013 this is the case for long aluminum wires with a small cross section, for example, or if the rise and fall times of the applied signals are slow. 2) When wires are short, the cross section of the wire is large (the interconnect has a low resistivity), a capacitance-only model can be used. 3) When the separation between neighboring wires is large, or when the wires run together for a short distance, interwire capacitance can be ignored, and all parasitic capacitance can be modeled as capacitance to ground.</p>"},{"location":"Other/2022-03-25-Radio-and-Electronics/#pcb","title":"PCB","text":"<ul> <li>Phil's Lab and his YouTube</li> <li>PCB Design</li> <li>Rick Hartley\u2019s Reading Recommendation</li> <li>Watch videos about Electronics, PCB Layout, High Speed, Board Design and more ...</li> <li>How to Achieve Proper Grounding - Rick Hartley</li> </ul>"},{"location":"Other/2022-03-25-Radio-and-Electronics/#links","title":"Links","text":"<ul> <li>Cross Country Wireless Loop Antenna Amplifier VLF test with 1m diameter coax loop</li> <li>WSJT-X User Guide</li> <li>Digimode Automatic Propagation Reporter</li> <li>pskmap</li> <li>Weak Signal Propagation Reporter Network</li> <li>Most recent QDX posts</li> <li>QRP Labs</li> </ul> <p>https://www.bbc.co.uk/radio/info/frequencies.shtml https://gqrx.dk/supported-hardware https://github.com/pa3gsb/Radioberry-2.x https://sdrplay.com/docs/VirtualHere.pdf https://www.sdrplay.com/sdrplayhamguides/ https://time.is/ https://www.rtl-sdr.com/demonstrating-radio-frequency-interference-with-an-airspy/ https://www.rtl-sdr.com/extio_rtlsdr-modified-extio-for-sdruno-hdsdr-with-direct-sampling-mode/ https://www.sdrplay.com/community/viewtopic.php?f=5&amp;t=3582&amp;p=11423&amp;hilit=s+meter#p11423 https://www.rtl-sdr.com/forum/viewtopic.php?f=1&amp;t=4710&amp;sid=089336097b3e190ff67e421ba29c1403&amp;start=20 https://electronics.howstuffworks.com/radio-spectrum1.htm http://www.frequencyfinder.org.uk/ http://www.frequencyfinder.org.uk/AM_Stations.pdf http://shop.qrp-labs.com/kits/qdx https://groups.io/g/QRPLabs</p>"},{"location":"Other/2022-08-04-GitHub-Pages-Jekyll/","title":"GitHub Pages","text":""},{"location":"Other/2022-08-04-GitHub-Pages-Jekyll/#-","title":"---","text":""},{"location":"Other/2022-08-04-GitHub-Pages-Jekyll/#github-pages-jekyll","title":"GitHub Pages &amp; Jekyll","text":""},{"location":"Other/2022-08-04-GitHub-Pages-Jekyll/#github-pages","title":"GitHub Pages","text":"<p>Static pages [https://jekyllrb.com/docs/pages/] are the basic building block of any website. These can be Markdown <code>.md</code> or html <code>.html</code> and can be arranged into subfolders.</p> <p>Posts [https://jekyllrb.com/docs/posts/] are for blogs. These are kept in a <code>_posts</code> directory, the name of which is in the following format <code>YEAR-MONTH-DAY-title.MARKUP</code>. The top of the post must include front matter.</p> <p>Front matter looks like this:</p> <pre><code>---\nlayout: post\ntitle: Blogging Like a Hacker\n---\n</code></pre> <p>which is <code>yaml</code> and the variables defined are used in liquid markup.</p> <p>The minimum is this:</p> <pre><code>---\n---\n</code></pre> <p>Predefined variables for Jekyll include: <code>layout</code>, <code>permalink</code> and <code>published</code>. Post specific variables include: <code>date</code>, <code>category</code>, <code>categories</code> and <code>tags</code>; these variables (apart from date) can be yaml lists like this:</p> <pre><code>--- # Favorite movies\n- Casablanca\n- North by Northwest\n- The Man Who Wasn't There\n</code></pre> <p>or this:</p> <pre><code>--- # Shopping list\n[milk, pumpkin pie, eggs, juice]\n</code></pre> <p>Draft posts are kept in a <code>_drafts</code> directory and are not published.</p>"},{"location":"Other/2022-08-04-GitHub-Pages-Jekyll/#relative-links","title":"Relative links","text":"<p>Use the name of the file, say <code>2022-08-04-GitHub-Pages-Jekyll.md</code>, and it will automagically be given the right link when the site is generated. Like this:</p> <p>This page</p>"},{"location":"Other/2022-08-04-GitHub-Pages-Jekyll/#jekyll","title":"Jekyll","text":"<p>Jekyll is used by GitHub to publish and manage the website.</p>"},{"location":"Other/2022-08-04-GitHub-Pages-Jekyll/#spelling-or-misspelling","title":"Spelling or Misspelling","text":"<p>It turns out that spell checking any kind of code is problematic. The only tool on an iPad that will do this automatically is the keyboard (this is often annoying as it'll autocorrect words it doesn't recognise, like names or technical terms).</p> <p>The only tool that I've found that might do this is CSpell. For more information see this blog entry and more information about a Visual Studio Code version</p> <p>Yet another argument for a separate linux box, like a Raspberry Pi, in addition to iPad.</p>"},{"location":"Other/2022-08-04-GitHub-Pages-Jekyll/#process","title":"Process","text":"<p>Write a draft document, using the filename for correct date and document title. Push to github.</p> <p>Pull from github on a linux box to:</p> <ul> <li>spell check</li> <li>move to _posts</li> <li>push to github</li> </ul>"},{"location":"Other/2022-08-04-GitHub-Pages-Jekyll/#links","title":"Links","text":"<ul> <li>GitHub Pages Documentation</li> <li>Quickstart | Jekyll \u2022 Simple, blog-aware, static sites</li> </ul>"},{"location":"Other/2022-10-07-cadquery/","title":"Template","text":""},{"location":"Other/2022-10-07-cadquery/#template","title":"Template","text":""},{"location":"Other/2022-10-07-cadquery/#introduction","title":"Introduction","text":"<p>https://cadquery.readthedocs.io/en/latest/intro.html</p> <p><code>pip install --pre cadquery cadquery-ocp~=7.5.0</code> https://github.com/CadQuery/cadquery/issues/1168</p> <p><code>pip install cadquery-server</code> https://github.com/roipoussiere/cadquery-server</p> <pre><code>conda create -n jcq3 -c conda-forge -c cadquery python=3.9 cadquery=master\nconda activate jcq3\npip install jupyter-cadquery==3.3.0 cadquery-massembly==1.0.0rc0 matplotlib\nconda install pywin32\nconda activate jcq3\n#jcv [-w width] [-h height]     # light theme\njcv [-w width] [-h height] -d  # dark theme\n</code></pre> <pre><code>import cadquery as cq\nfrom jupyter_cadquery.viewer.client import show, show_object\nobj = cq. ...\nshow(obj) # or show_object(obj)\n</code></pre> <p>https://github.com/bernhard-42/jupyter-cadquery</p> <p>show works as in JupyterLab, while show_object views objects incrementally as in CQ-Editor</p> <p>Lots of models of basic parts https://www.mcmaster.com/</p> <p>Extra utilities https://github.com/michaelgale/cq-kit</p>"},{"location":"Other/2022-10-07-cadquery/#links","title":"Links","text":"<ul> <li>https://cadquery.readthedocs.io/en/latest/intro.html</li> <li>https://github.com/roipoussiere/cadquery-server</li> <li>https://github.com/bernhard-42/jupyter-cadquery</li> <li>https://www.mcmaster.com/</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/","title":"Risc-V","text":""},{"location":"Other/2023-09-22-Risc-V/#risc-v","title":"Risc-V","text":"<p>Building up a RISC-V Linux with Buildroot</p>"},{"location":"Other/2023-09-22-Risc-V/#introduction","title":"Introduction","text":"<p>EEVblog 1524 - The 10 CENT RISC V Processor CH32V003 - Page 1</p>"},{"location":"Other/2023-09-22-Risc-V/#assembly","title":"Assembly","text":"<ul> <li>rvalp: RISC-V Assembly Language Programming</li> <li>Understanding Assembly Part I: RISC-V</li> <li>Great Ideas in Computer Architecture - Risc-V Assemby Language</li> <li>RISC-V Assembly Programming</li> <li>RISC-V Assembly Programming: About the Book</li> <li>RISC-V Assembly Programming: About the Simulator</li> <li>RISC-V Assembly Language</li> <li>The RISC-V Assembly Programmer's Manual</li> <li>Learn Multi platform Risc-V Assembly Programming... For Open Source CPUs!</li> <li>RISC-V Assembler Reference</li> <li>RISC-V ASSEMBLY LANGUAGE Programmer Manual</li> <li>RISC-V ASM Tutorial Collection or RISC-V ASM Tutorial Collection</li> <li>CREATOR is a generic teaching simulator to program in assembly in which you can simulate the operation of different architectures on the same tool</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#llvm-ir","title":"LLVM IR","text":"<ul> <li>Copy Hunting | TigerBeetle</li> <li>A Gentle Introduction to LLVM IR \u00b7 mcyoung</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#risc-v_1","title":"RISC-V","text":"<ul> <li>RV32I Introduction</li> <li>The Zephyr Project \u2013 A proven RTOS ecosystem, by developers, for developers.</li> <li>RISC-V International \u2013 RISC-V: The Open Standard RISC Instruction Set Architecture</li> <li>RISC-V Boards -- Zephyr Project Documentation</li> <li>Introduction -- Zephyr Project Documentation</li> <li> <p>Raspberry Pi Pico -- Zephyr Project Documentation</p> </li> <li> <p>CHIPS Alliance \u00b7 GitHub</p> </li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#todo-risc-v","title":"TODO RISC-V","text":"<ul> <li>RISC-V Assembly Language Programming</li> <li>RISC-V Dynamic Debugging Tool</li> <li>RISC-V Emulators and Simulators</li> <li>Spike, the RISC-V ISA Simulator</li> <li>Prebuilt RISC-V GCC Toolchains for Linux</li> <li>RISC-V Proxy Kernel and Boot Loader</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#teaching-cores","title":"Teaching Cores","text":"<ul> <li>Designing a CPU in VHDL, Part 15: Introducing RPU</li> <li>Designing a CPU in VHDL</li> <li>GitHub - Domipheus/RPU: Basic RISC-V CPU implementation in VHDL.</li> <li>rsd Wiki and RSD: RISC-V Out-of-Order Superscalar Processor in SystemVerilog</li> <li>Ice-V projects: exploring RISC-V implementations in Silice</li> <li>FEMTORV32 / FEMTOSOC: a minimalistic RISC-V CPU and GitHub - BrunoLevy/learn-fpga: Learning FPGA, yosys, nextpnr, and RISC-V - Verilog</li> <li>From Blinker to RISC-V - Verilog</li> <li>learn-fpga-amaranth: Code for Bruno Levy's learn-fpga tutorial written in Amaranth HDL - Amaranth</li> <li>A Bug-Free RISC-V Core without Simulation and MR1 formally verified RISC-V CPU - SpinalHDL</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#well-documented-cores","title":"Well Documented Cores","text":"<ul> <li>GitHub - SpinalHDL/VexRiscv: A FPGA friendly 32 bit RISC-V CPU implementation - SpinalHDL</li> <li>SERV - The SErial RISC-V CPU</li> <li>Super-Scalar RISCV CPU (SSRV) \u2014\u2014 A synthesizable solution on Super-Scalar and out-of-order | risclite.github.io</li> <li>GitHub - darklife/darkriscv: opensouce RISC-V cpu core implemented in Verilog from scratch in one night!</li> <li>PulseRain Reindeer - RISCV RV32IM Soft CPU</li> <li>RudolV: RISC-V processor</li> <li>NOEL-V (RISC-V)</li> <li>lizard: Cornell CSL's Modular RISC-V RV64IM Out-of-Order Processor Built with PyMTL</li> </ul> <ul> <li>The NEORV32 RISC-V Processor</li> <li>\ud83d\udda5\ufe0f A tiny, customizable and highly extensible MCU-class 32-bit RISC-V soft-core CPU and microcontroller-like SoC written in platform-independent VHDL</li> <li>\u2714\ufe0fPort of RISCOF to verify the NEORV32 Processor's RISC-V ISA compatibility.</li> <li>\ud83d\udcc1 NEORV32 projects and exemplary setups for various FPGAs, boards and (open-source) toolchains.</li> <li>User Guide The NEORV32 RISC-V Processor</li> <li>NEORV32 -- Zephyr Project Documentation</li> </ul> <ul> <li>GitHub - RISCV-MYTH-WORKSHOP/RISC-V-CPU-Core-using-TL-Verilog: risc-v-myth-workshop-august-Redbeard358 created by GitHub Classroom</li> <li>MYTH Workshop 2 RISC-V.pdf - Google Drive</li> <li>MYTH RISC-V (RV32I) CPU Cores</li> <li>GitHub - akilm/MYTH-RV32I-core-akilm: RV32I core using TL-Verilog.This project was done as a part of RISC-V based MYTH (Microprocessor for you in Thirty Hours) workshop organized by Kunal Ghosh and Steve Hoover</li> <li>GitHub - ShonTaware/RISC-V_Core_4_Stage: RISCV MYTH 4 stage pipelined core designed using TL-Verilog and supports RV32I base integer instruction set</li> <li>GitHub - RISCV-MYTH-WORKSHOP/RISC-V-CPU-Core-using-TL-Verilog: risc-v-myth-workshop-august-Redbeard358 created by GitHub Classroom</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#systems","title":"Systems","text":"<ul> <li>ESP - open SoC platform</li> <li>Welcome to Chipyard\u2019s documentation</li> <li>PicoSoC - A simple example SoC using PicoRV32</li> <li>Riscy-SoC: Riscy-SoC is SoC based on RISC-V CPU core, designed in Verilog</li> <li>rocket-chip: Rocket Chip Generator</li> <li>Enjoy-Digital \u00bb FPGA-based design services and Open-Source</li> <li>Linux on LiteX-VexRiscv</li> <li>LiteX VexRiscv -- Zephyr Project Documentation</li> <li>VexRiscv: A FPGA friendly 32 bit RISC-V CPU implementation</li> <li>SoC toplevel (Pinsec) \u2014 SpinalHDL documentation</li> <li>ReonV is a modified version of the Leon3, a synthesisable VHDL model of a 32-bit processor originally compliant with the SPARC V8 architecture, now changed to RISC-V ISA.</li> <li>PULP FAQs</li> <li>This is the top-level project for the PULPissimo Platform. It instantiates a PULPissimo open-source system with a PULP SoC domain, but no cluster.</li> <li>pulpino: An open-source microcontroller system based on RISC-V</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#open-source-cores","title":"Open Source Cores","text":""},{"location":"Other/2023-09-22-Risc-V/#amaranth","title":"Amaranth","text":"<ul> <li>icicle: 32-bit RISC-V system on chip for iCE40 and ECP5 FPGAs</li> <li>minerva: A 32-bit RISC-V soft processor </li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#vhdl","title":"VHDL","text":"<ul> <li>Instant SoC using C++</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#verilog","title":"Verilog","text":"<ul> <li>SCR1 is a high-quality open-source RISC-V MCU core in Verilog</li> <li>SoftCPU/SoC engine-V</li> <li>JiVe: Small micro-coded RISC-V softcore</li> <li>riscv-steel-core: Processor core implementing the base RV32I instruction set of the RISC-V ISA</li> <li>mriscv: A 32-bit Microcontroller featuring a RISC-V core</li> <li>riscv: RISC-V CPU Core (RV32IM)</li> <li>biriscv: 32-bit Superscalar RISC-V CPU</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#system-verilog","title":"System Verilog","text":"<ul> <li>Featherweight RISC-V implementation</li> <li>VeeR EH1 core</li> <li>sfu-rcl / Taiga-project \u00b7 GitLab</li> <li>Lean but mean RISC-V system!</li> <li>RoaLogic/RV12: RISC-V CPU Core</li> <li>SCRX Processor IP by Syntacore</li> <li>SCR1 is a high-quality open-source RISC-V MCU core in Verilog</li> <li>Ibex is a small 32 bit RISC-V CPU core, previously known as zero-riscy.</li> <li>Ibex: An embedded 32 bit RISC-V CPU core -- Ibex Documentation</li> <li>A demo system for Ibex including debug support and some peripherals</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#tl-verilog","title":"TL-Verilog","text":"<ul> <li>WARP-V Core Configurator</li> <li>WARP-V is an open-source RISC-V CPU core generator written in TL-Verilog.</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#chisel","title":"Chisel","text":"<ul> <li>educational microarchitectures for risc-v isa</li> <li>riscv-boom: SonicBOOM: The Berkeley Out-of-Order Machine</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#spinal-hdl","title":"Spinal HDL","text":"<ul> <li>SpinalHDL/VexRiscvSoftcoreContest2018</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#even-more-cores","title":"Even More Cores","text":"<ul> <li>Exchange \u2013 RISC-V International</li> <li>RISC-V SoftCPU Contest Highlights \u2013 RISC-V International</li> <li>OpenHW Group \u00b7 GitHub</li> <li>RISC-V Cores, SoC platforms and SoCs</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#simulations-emulations","title":"Simulations / Emulations","text":"<ul> <li>riscv-non-isa/riscv-arch-test</li> <li>Risc-V Assembly</li> <li>Spike, a RISC-V ISA Simulator</li> <li>Writing a simple RISC-V emulator in plain C</li> <li>Simple and compact RISC-V RS32I implementation written in C</li> <li>A tiny C header-only risc-v emulator.</li> <li>pico-rv32ima: Running Linux on RP2040 with the help of RISC-V emulation</li> <li>rv RV32IMC in ~600 lines of C89</li> <li>TinyEMU is a system emulator for the RISC-V</li> <li>rvemu: RISC-V emulator for CLI and Web written in Rust with WebAssembly. It supports xv6 and Linux (ongoing).</li> <li>Writing a RISC-V Emulator in Rust</li> <li>Reference implementation for the book \"Writing a RISC-V Emulator in Rust\".</li> <li>RISCV32 Emulation (QEMU) -- Zephyr Project Documentation</li> <li>Cycle-accurate pre-silicon simulator of RISC-V and MIPS CPUs</li> <li>Documentation/Platforms/RISCV - QEMU</li> <li>WepSIM</li> </ul>"},{"location":"Other/2023-09-22-Risc-V/#links","title":"Links","text":"<ul> <li>Posts \u00b7 mcyoung</li> <li>GitHub - lowRISC/opentitan: OpenTitan: Open source silicon root of trust</li> </ul>"},{"location":"Other/2023-09-24-Systems-on-Systems/","title":"Systems-on-Systems","text":""},{"location":"Other/2023-09-24-Systems-on-Systems/#systems-on-systems","title":"Systems-on-Systems","text":""},{"location":"Other/2023-09-24-Systems-on-Systems/#here-stings-environment-heredoc","title":"Here Stings, Environment, heredoc","text":"<p>Here documents (heredoc, here-documents), and to a lesser extent here string, are widely used for automation and in scripts. Alpine Linux, for example, uses them extensively.</p> <p>After that, <code>expect</code>, is used to automate <code>stdin</code> with more control. Pexpect  \"s a pure Python module for spawning child applications; controlling them; and responding to expected patterns in their output\" and there's a <code>rust</code> version rexpect.</p> <p>The best reference is from the Linux Documentation Project's Chapter 19. Here Documents, with lots of great examples. https://thelinuxcode.com/bash-heredoc-tutorial/ Here Documents and Here Strings</p> <p>This type of redirection instructs the shell to read input from the current source until a line containing only word (with no trailing blanks) is seen. All of the lines read up to that point are then used as the standard input (or file descriptor n if n is specified) for a command.</p> <p>The format of here-documents is:</p> <pre><code>[n]&lt;&lt;[-]word\n        here-document\ndelimiter\n</code></pre> <p>No parameter and variable expansion, command substitution, arithmetic expansion, or filename expansion is performed on word. If any part of word is quoted, the delimiter is the result of quote removal on word, and the lines in the here-document are not expanded. If word is unquoted, all lines of the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion, the character sequence \\newline is ignored, and \u2018\\\u2019 must be used to quote the characters \u2018\\\u2019, \u2018$\u2019, and \u2018`\u2019.</p> <p>If the redirection operator is \u2018&lt;&lt;-\u2019, then all leading tab characters are stripped from input lines and the line containing delimiter. This allows here-documents within shell scripts to be indented in a natural fashion.</p> <p>3.6.7 Here Strings A variant of here documents, the format is:</p> <pre><code>[n]&lt;&lt;&lt; word\n</code></pre> <p>The word undergoes tilde expansion, parameter and variable expansion, command substitution, arithmetic expansion, and quote removal. Filename expansion and word splitting are not performed. The result is supplied as a single string, with a newline appended, to the command on its standard input (or file descriptor n if n is specified).</p> <pre><code># replaces l with e\ncat &lt;&lt; EOF |  sed 's/l/e/g'\nHello\nWorld\nEOF\n# &lt;&lt;- strip tabs, I believe that my editor is replacing the tabs with spaces\ncat &lt;&lt;- EOF\n  Line with a leading tab.\nEOF\n# no parameter expansion\ncat &lt;&lt; \"EOF\" #'EOF' also works\nThe current working directory is: $PWD\nYou are logged in as: $(whoami)\nEOF\n# output to file, expands parameters\nat &lt;&lt; EOF &gt; file.txt\nThe current working directory is: $PWD\nYou are logged in as: $(whoami)\nEOF\nOUTFILE=$(mktemp) # temporary file\n# normally tee echos the output\nsudo tee \"$OUTFILE\" &gt; /dev/null &lt;&lt;'EOF'\nfoo\nbar\nEOF\n# using dd\nsudo dd of=\"$OUTFILE\" &lt;&lt;EOF\nfoo\nbar\nEOF\n# This starts a sub-shell under sudo, and opens $OUTFILE from that more privileged\n# subprocess, and runs cat (as yet another privileged subprocess). Meanwhile, the\n# (less privileged) parent process pipes the here-document to the sudo subprocess.\nsudo bash -c \"cat &gt; $OUTFILE\" &lt;&lt; EOF\n#!/bin/bash\n#? [ ] / \\ = + &lt; &gt; : ; \" , * | \n#/ ? &lt; &gt; \\ : * | \u201d\n#Filename=\"z:\"${$winFn//\\//\\\\}\necho \"This is a generated shell script.\"\nApp='eval \"C:\\Windows\\notepad.exe\" \"'$winFn'\"'\n$App\nEOF\n</code></pre> <p>using <code>sh</code> functions to generate scripts, from alpine-chroot-install. Note the use of <code>printf format [arguments]</code> as an alternative to <code>echo</code>. The Alpine guys are the masters of <code>sh</code> scripts, in my opinion.</p> <pre><code>gen_chroot_script() {\n    cat &lt;&lt;-EOF\n        #!/bin/sh\n        set -e\n\n        ENV_FILTER_REGEX='($(echo \"$CHROOT_KEEP_VARS\" | tr -s ' ' '|'))'\n    EOF\n    if [ -n \"$QEMU_EMULATOR\" ]; then\n        printf 'export QEMU_EMULATOR=\"%s\"' \"$QEMU_EMULATOR\"\n    fi\n    cat &lt;&lt;-'EOF'\n\n        user='root'\n        if [ $# -ge 2 ] &amp;&amp; [ \"$1\" = '-u' ]; then\n            user=\"$2\"; shift 2\n        fi\n        oldpwd=\"$(pwd)\"\n        [ \"$(id -u)\" -eq 0 ] || _sudo='sudo'\n\n        tmpfile=\"$(mktemp)\"\n        chmod 644 \"$tmpfile\"\n        export | sed -En \"s/^([^=]+ ${ENV_FILTER_REGEX}=)('.*'|\\\".*\\\")$/\\1\\3/p\" &gt; \"$tmpfile\" || true\n\n        cd \"$(dirname \"$0\")\"\n        $_sudo mv \"$tmpfile\" env.sh\n        $_sudo chroot . /usr/bin/env -i su -l \"$user\" \\\n            sh -c \". /etc/profile; . /env.sh; cd '$oldpwd' 2&gt;/dev/null; \\\"\\$@\\\"\" \\\n            -- \"${@:-sh}\"\n    EOF\n    # NOTE: ash does not load login profile when run with QEMU user-mode\n    # emulation (I have no clue why), that's why /etc/profile is sourced here.\n}\n\ngen_chroot_script &gt; enter-chroot\nchmod +x enter-chroot\n</code></pre> <p>Pass a command to WSL without PowerShell expanding it first</p> <pre><code># PowerShell\n@'\necho $SHELL\n'@ | wsl -d U3 --\n# Expand the string in Powershell then send it to WSL\n@\"\necho $ENV:OS\n\"@ | wsl -d U3 --\n# send it to linux\n@\"\necho $ENV:OS `$SHELL\n\"@ | wsl -d U3 --\n</code></pre> <p>wsl is started in the current (windows) directory, and windows files appear in Linux with 777 permissions, so this works</p> <pre><code># PowerShell\n @'\necho this system is $(uname)\n'@ | &gt; .\\new.sh ; wsl -d U3 ./new.sh\n# or this:\n$tmp = New-TemporaryFile\n@\"\necho $env:os wrote it, `$(uname) is executing it\n\"@ | out-file -filepath $tmp ; type $tmp | wsl -d U3 sh --\n</code></pre> <p>temporary file</p> <pre><code># PowerShell\n$tmpfile = New-TemporaryFile\n@\"\nwslpath '$tmpfile'\n\"@ | wsl -d U3\n</code></pre> <p>also can access WSL from \\wsl$\\distribution</p> <p>about_Quoting_Rules about_Environment_Variables</p>"},{"location":"Other/2023-09-24-Systems-on-Systems/#virtual-machines","title":"Virtual Machines","text":"<p>Hyper-V</p> <pre><code># PowerShell\nGet-VM | Export-VM -Path D:\\WindowsBackup\\\n</code></pre>"},{"location":"Other/2023-09-24-Systems-on-Systems/#wsl","title":"WSL","text":"<ul> <li>Import any Linux distribution to use with WSL</li> <li>Awesome-WSL: Awesome list dedicated to Windows Subsystem for Linux</li> <li>How to add second WSL2 Ubuntu distro</li> <li>ubuntu images</li> <li>How to change default user in WSL Ubuntu bash on Windows 10</li> <li>WSL - Connect USB devices</li> <li>usbipd-win</li> </ul>"},{"location":"Other/2023-09-24-Systems-on-Systems/#linux-kernel-building-on-wsl-2","title":"Linux Kernel Building on WSL 2","text":"<p>Building your own WSL 2 kernel with additional drivers \"Recent versions of Windows running WSL kernel 5.10.60.1 or later already include support for common scenarios like USB-to-serial adapters and flashing embedded development boards. Only if you require special drivers will you need to build your own kernel for WSL 2.\"</p> <pre><code># cmd\nwsl --update\n# Export current distribution to be able to fall back if something goes wrong.\nwsl --export &lt;current-distro&gt; &lt;temporary-path&gt;\\wsl2-usbip.tar\n# Import new distribution with current distribution as base.\nwsl --import wsl2-usbip &lt;install-path&gt; &lt;temporary-path&gt;\\wsl2-usbip.tar\n# Run new distribution.\nwsl --distribution wsl2-usbip --user &lt;user&gt;\n# upgrade it\nsudo apt update &amp;&amp;  sudo apt -y full-upgrade\n# Install prerequisites.\nsudo apt install build-essential flex bison libssl-dev libelf-dev libncurses-dev autoconf libudev-dev libtool\n# Clone kernel that matches WSL version. To find the version you can run.\nuname -r\n# Clone the kernel repo, then checkout the branch/tag that matches your kernel version\ngit clone https://github.com/microsoft/WSL2-Linux-Kernel.git\ncd WSL2-Linux-Kernel\ngit checkout linux-msft-wsl-5.10.43.3\n# Copy current configuration file.\ncp /proc/config.gz config.gz\ngunzip config.gz\nmv config .config\n# add features\nsudo make menuconfig\n# number of processors\ngetconf _NPROCESSORS_ONLN\n# substitute 8 below for the number from above\nsudo make -j 8 &amp;&amp; sudo make modules_install -j 8 &amp;&amp; sudo make install -j 8\ncp arch/x86/boot/bzImage /mnt/c/Users/&lt;user&gt;/usbip-bzImage\n# Create a `.wslconfig file` on `/mnt/c/Users/&lt;user&gt;/` and add a reference to the created image with the following.\n[wsl2]\nkernel=c:\\\\users\\\\&lt;user&gt;\\\\usbip-bzImage\n</code></pre>"},{"location":"Other/2023-09-24-Systems-on-Systems/#find-and-export-wsl-distro","title":"Find and Export WSL distro","text":"<p>How to locate the .vhdx file and disk path for your Linux distribution</p> <p>Finding</p> <pre><code># PowerShell\nForeach ($i in Get-ChildItem -Path HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss) {write-host $i.GetValue(\"BasePath\")}\n# Get-ChildItem -Path HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss | foreach-object {write-host $_.GetValue(\"BasePath\")}\n</code></pre> <p>Exporting</p> <pre><code># PowerShell\nwsl --export --vhd Alpine D:\\WindowsBackup\\WSL2\\Alpine.vhdx\n</code></pre>"},{"location":"Other/2023-09-24-Systems-on-Systems/#custom-linux-for-wsl-alpine","title":"Custom Linux for WSL - Alpine","text":"<p>see WSL_Alpine_build for the my build script. This uses alpine-chroot-install to install alpine in its own directory an an existing linux system. Run <code>destroy</code> to remove all the bindings.</p> <p>Build a Custom Linux Distribution for WSL</p> <p>wsl.conf which are system specific settings. see also .wslconfig for settings for all wsl.</p> <p>see OpenRC for some information about that. How to enable and start services on Alpine Linux is useful but the <code>rc</code> appears to be <code>openrc</code> now. <code>openrc shutdown</code> sort of shuts down alpine but <code>wsl -t</code> actually stops it.</p> <pre><code>rc-service {service-name} restart # OR\n/etc/init.d/{service-name} restart\n</code></pre> <p>What's the difference between \"Service\" and \"/etc/init.d/\"?</p> <p>\"service runs a script in a predictable environment (working directory is / and only 2 environment variables are set: LANG and TERM). It also adds the ability to do --full-restart. So to sum up:</p> <p>service may run scripts from either /etc/init or /etc/init.d (upstart or System V) service runs scripts in a predictable environment.\"</p>"},{"location":"Other/2023-09-24-Systems-on-Systems/#usb-on-wsl","title":"USB on WSL","text":"<p>Now it's time to deal with the WSL side of things.</p> <p>usbipd-win usbipd-win on WSL 2 WSL support</p> <pre><code># PowerShell\nwinget install usbipd\nusbipd list\nusbipd bind --busid 4-4 # or \"4-4\" for another, \"Shared\" survives reboot\n# --auto-attach (also '-a') runs in a loop to reattach, so blocks shell.\nusbipd attach --wsl --auto-attach --busid 4-4\n</code></pre>"},{"location":"Other/2023-09-24-Systems-on-Systems/#udev","title":"udev","text":"<p>On WSL, this will probably be required</p> <p>For probe-rs's advice, see below:</p> <p>Linux: udev rules By default, the debug probes are only accessible by users with root privileges on Linux based systems. It is recommend to use appropriate udev rules to allow users without root privileges access to the debug probes as well.</p> <p>Download the rules file and place it in /etc/udev/rules.d. Run udevadm control --reload to ensure the new rules are used. Run udevadm trigger to ensure the new rules are applied to already added devices. If you're still unable to access the debug probes after following these steps, try adding your user to the plugdev group.</p> <p>If you are using WSL, you may need to enable the udev service. To check if the service is running, run service udev status. If the service is not started, edit /etc/wsl.conf (with sudo) and make sure the following is included:</p> <pre><code>[boot]\ncommand=\"service udev start\"\n</code></pre> <p>From the usbipd wiki's entry about udev:  \"using embedded devices with openocd, copy <code>share/openocd/contrib60-openocd.rules</code> to the <code>/etc/udev/rules.d folder</code>\"</p> <pre><code># PowerShell\nGet-ChildItem \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss\" -Recurse | findstr BasePath\nget-ChildItem C:\\Users\\jackc\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu_79rhkp1fndgsc\\LocalState\\ext4.vhdx | Select-Object @{Name='Size'; Expression={[int]($_.Length / 1MB)}}\n</code></pre> <pre><code>dir \\\\wsl$\\distribution-name\n</code></pre>"},{"location":"Other/2023-09-24-Systems-on-Systems/#docker","title":"Docker","text":"<p>Setting up Alpine Linux with Rootless Docker. How will this work on WSL when the user has a bunch of privileges, like deleting all the users files, gifted by WSL?</p> <p>Docker Rootless mode and WSL2 configuration for developing using rootless docker</p> <p>A good description of how to run anything How to run htop in Docker terminal?</p> <p>lazydocker for a docker management TUI.</p> <p>all of this needs checking</p> <p>How to Install and Configure Docker on Alpine Linux</p> <pre><code>rc-update add docker boot\nservice docker start\ndocker run hello-world\n</code></pre> <p>How to Create and Manage a Service in an Alpine Linux Container</p> <p>details not important here (like monitor_directory.sh)</p> <pre><code>FROM alpine:latest\nRUN apk update &amp;&amp; \\\n    apk add openrc inotify-tools &amp;&amp; \\\n    mkdir -p /run/openrc &amp;&amp; \\\n    touch /run/openrc/softlevel\nCOPY monitor_directory.sh /usr/local/bin/monitor_directory.sh\nCOPY monitor_directory_service /etc/init.d/monitor_directory\nRUN chmod +x /usr/local/bin/monitor_directory.sh &amp;&amp; \\\n    chmod +x /etc/init.d/monitor_directory\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n</code></pre> <p><code>/etc/init.d/monitor_directory</code></p> <pre><code>#!/sbin/openrc-run\nname=\"Monitor Directory\"\ndescription=\"Monitor a directory\"\ncommand=\"/usr/local/bin/monitor_directory.sh\"\ncommand_background=true # needed for rc-service to stop, start, etc\npidfile=\"/run/monitor_directory.pid\" # needed for rc-service to stop, start, etc\n</code></pre> <pre><code>#!/bin/sh\nopenrc default\nrc-update add monitor_directory default\nrc-service monitor_directory start\nexec \"$@\"\n</code></pre>"},{"location":"Other/2023-09-24-Systems-on-Systems/#putty","title":"Putty","text":"<p>I suggest that you PuTTY to test out the connection on the Windows side.</p> <p>On Windows run the \"Device Manager\" and expand the Ports (COM &amp; LPT) section. Note the COM port number for the Pico; on my system it's labelled \"USB Serial Device (COM7)\".</p> <p>Open PuTTY, select the Serial connection type and enter the COM7 (see above) in the Serial line box. Set the Speed to 115200 and click on the Open button. A window should open that repetitively prints \"Hello, World!\".</p>"},{"location":"Other/2023-09-24-Systems-on-Systems/#links","title":"Links","text":"<ol> <li> <p>The file needs to have an initial number lower than 73, otherwise the udev rules do not get applied properly. See this Github discussion for more information.\u00a0\u21a9</p> </li> </ol>"},{"location":"Other/2023-09-26-awk-sed-bash/","title":"Awk Sed bash","text":""},{"location":"Other/2023-09-26-awk-sed-bash/#awk-sed","title":"Awk Sed","text":""},{"location":"Other/2023-09-26-awk-sed-bash/#introduction","title":"Introduction","text":"<p>Don't forget to use both <code>man</code> and <code>info</code> commands to learn more about the vairous utitlies that <code>sed</code> and <code>awk</code> depend upon, like <code>sort</code>, <code>xargs</code> and <code>find</code> for example.</p>"},{"location":"Other/2023-09-26-awk-sed-bash/#sed","title":"sed","text":"<ul> <li>Sed - grymoire - An Introduction and Tutorial by Bruce Barnett</li> <li>Sed Cheat Sheet</li> <li>sed . . . the stream editor</li> <li>sed single page manual</li> </ul>"},{"location":"Other/2023-09-26-awk-sed-bash/#bash","title":"bash","text":"<ul> <li>bash manual</li> <li>bash debugger</li> <li>debugging bash scripts</li> </ul>"},{"location":"Other/2023-09-26-awk-sed-bash/#here-documents","title":"Here documents","text":"<p>Here Documents</p> <pre><code>#!/bin/bash\n# generate-script.sh\n# Based on an idea by Albert Reiner.\n\nOUTFILE=generated.sh         # Name of the file to generate.\n\n# -----------------------------------------------------------\n# 'Here document containing the body of the generated script.\n(\ncat &lt;&lt;'EOF'\n#!/bin/bash\n\necho \"This is a generated shell script.\"\n#  Note that since we are inside a subshell,\n#+ we can't access variables in the \"outside\" script.\n\necho \"Generated file will be named: $OUTFILE\"\n#  Above line will not work as normally expected\n#+ because parameter expansion has been disabled.\n#  Instead, the result is literal output.\n\na=7\nb=3\n\nlet \"c = $a * $b\"\necho \"c = $c\"\n\nexit 0\nEOF\n) &gt; $OUTFILE\n# -----------------------------------------------------------\n\n#  Quoting the 'limit string' prevents variable expansion\n#+ within the body of the above 'here document.'\n#  This permits outputting literal strings in the output file.\n\nif [ -f \"$OUTFILE\" ]\nthen\n  chmod 755 $OUTFILE\n  # Make the generated file executable.\nelse\n  echo \"Problem in creating file: \\\"$OUTFILE\\\"\"\nfi\n\n#  This method also works for generating\n#+ C programs, Perl programs, Python programs, Makefiles,\n#+ and the like.\n\nexit 0\n</code></pre> <pre><code>#!/bin/bash\n# here-function.sh\n\nGetPersonalData ()\n{\n  read firstname\n  read lastname\n  read address\n  read city \n  read state \n  read zipcode\n} # This certainly appears to be an interactive function, but . . .\n\n# Supply input to the above function.\nGetPersonalData &lt;&lt;RECORD001\nBozo\nBozeman\n2726 Nondescript Dr.\nBozeman\nMT\n21226\nRECORD001\n\necho\necho \"$firstname $lastname\"\necho \"$address\"\necho \"$city, $state $zipcode\"\necho\n\nexit 0\n</code></pre>"},{"location":"Other/2023-09-26-awk-sed-bash/#awk","title":"awk","text":"<pre><code>awk -f awkscriptfile\n\ncat &lt;&lt; \"EOF\" &gt; executableawk\n#!/bin/awk -f\nBEGIN {\n    lines=0;\n    total=0;\n}\n{\n# increase the number of files\n    lines++;\n# increase the total size, which is field #1\n    total+=$1;\n}\nEND {\n    print lines \" lines read\";\n    print \"total is \", total;\n    if (lines &gt; 0 ) {\n        print \"average is \", total/lines;\n    } else {\n        print \"average is 0\";\n    }\n}\nEOF\nchmod +x executableawk\nwc -c * | ./executableawk\n\n# ${variable:-defaultvalue}, variable=value\ncat &lt;&lt; \"EOF\" &gt; bashawk.sh\n#!/bin/sh\nawk '{print $c}' c=\"${1:-1}\"\n# awk '{print $'\"${1:-1}\"'}'\n# or \n# column=\"${1:-1}\"\n# awk '{print $'\"$column\"'}'\nEOF\nchmod +x bashawk.sh\nls -l | ./bashawk.sh 9 # filename printed\n</code></pre> <p>awk command summary:</p> <pre><code>~ # matches\n!~ # doesn't match\n&amp;&amp; || # and or\nif ( conditional ) statement [ else statement ]\nwhile ( conditional ) statement\nfor ( expression ; conditional ; expression ) statement\nfor ( variable in array ) statement\nbreak\ncontinue\n{ [ statement ] ...}\nvariable=expression\nprint [ expression-list ] [ &gt; expression ]\nprintf format [ , expression-list ] [ &gt; expression ]\nnext\nexit\n</code></pre> <ul> <li>GAWK: Effective AWK Programming, single page manual</li> <li>Awk, Nawk and GNU Awk Cheat Sheet</li> <li>Awk One-Liners Explained, Part I: File Spacing, Numbering and Calculations</li> <li>Awk One-Liners Explained, Part II: Text Conversion and Substitution</li> <li>Awk One-Liners Explained, Part III: Selective Printing and Deleting of Certain Lines</li> <li>awk - grymoire - An Introduction and Tutorial by Bruce Barnett it's worth noting that grymoire's notes are for very old versions of Unix and Linux. For the example of <code>count_new_users</code> the sort that I used was <code>sort -k 1nr,2 -k 3d,4</code> and not the, by today's standards, cryptic original <code>sort +0nr -2 +2d</code></li> <li>awk is a beautiful tool</li> <li>Awk tutorial</li> <li>The awk programming language</li> </ul>"},{"location":"Other/2023-09-26-awk-sed-bash/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"Other/2099-12-23-Template/","title":"Template","text":""},{"location":"Other/2099-12-23-Template/#template","title":"Template","text":""},{"location":"Other/2099-12-23-Template/#introduction","title":"Introduction","text":"<p>A sentence</p>"},{"location":"Other/2099-12-23-Template/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"Pi/","title":"Raspberry Pi","text":""},{"location":"Pi/#raspberry-pi","title":"Raspberry Pi","text":""},{"location":"Pi/#introduction","title":"Introduction","text":"<p>This section focuses on Raspberry Pi single-board computers and their applications. Topics include using Raspberry Pi as a home router, various operating systems for Pi (Alpine, Arch, Raspbian), and the Raspberry Pi Pico microcontroller.</p>"},{"location":"Pi/#contents","title":"Contents","text":"<ul> <li>Building A Raspberry Pi Home Router - Step-by-step guide to creating a router with Raspberry Pi.</li> <li>QEMU distcc Raspberry Pi - Using QEMU and distcc with Raspberry Pi.</li> <li>Alpine Linux Raspberry Pi Router - Building a router with Alpine Linux on Raspberry Pi.</li> <li>Arch Linux Raspberry Pi - Installing and configuring Arch Linux on Raspberry Pi.</li> <li>Rasbian X11 - X11 window system on Raspbian.</li> <li>Pi Gen - Using Pi Gen to create custom Raspberry Pi OS images.</li> <li>Pi Pico - Working with the Raspberry Pi Pico microcontroller.</li> <li>Pi as iPad Development Machine - Using Raspberry Pi for iPad development.</li> <li>Alpine Image Build Raspberry Pi - Building custom Alpine Linux images for Raspberry Pi.</li> </ul>"},{"location":"Pi/#topics-covered","title":"Topics Covered","text":"<ul> <li>Raspberry Pi as a home network router</li> <li>Operating systems: Alpine, Arch, and Raspbian</li> <li>Raspberry Pi Pico microcontroller programming</li> <li>Cross-compilation and distributed compilation</li> <li>Custom OS image building</li> <li>X11 and graphical interfaces</li> <li>Using Pi with iPads for development</li> </ul>"},{"location":"Pi/2020-01-05-Building-A-Raspberry-Pi-Home-Router/","title":"Building A Raspberry Pi Home Router","text":"<p>Replacing a home router with a Raspberry Pi - better performance and full linux customisation.  Inspired by bigdinousaur and Ars Technica.</p>"},{"location":"Pi/2020-01-05-Building-A-Raspberry-Pi-Home-Router/#introduction","title":"Introduction","text":"<p>I've used a number of home routers over the years and they've worked OK but the performance has been lacklustre, and the configuration options limited.  I wanted to build myself something that I had complete control over and, as a bonus, would teach me more about linux routing.  I stumbled across an Ars Technica article where they did that.  I wanted a minimal build to help with performance, security and power consumption.  Arch linux seemed like a good choice.</p> <p>I had originally wanted to use a Raspberry Pi 3 (the latest available) as they are dirt cheap, low power a very small.  But my local Internet ISP is Virgin media and the Pi wouldn't be able to support a throughput of up to 200Mbs.  So I looked for cheap low power, low cost, all-in-one, silent Intel devices.  I found a pair identical Shuttle boxes cheaply on eBay; then I would have a swap in backup - nothing is more mission critical for a family than an internet connection.  In the end I only set up one because it was more involved than expected.</p> <p>With the release of the Raspberry Pi 4 it was time to revisit my solution.  I use a 4GB Pi 4 as a desktop and it will support up to about 900Mbps.  Changing to a DIY server and good WiFi has demonstrated that a 100Mbps ISP link is good enough, even for a family of 5.  Now is a good time to revisit my work, learn how to setup my router reliably and quickly.  Given Jeff's performance numbers, I expect that my Pi 3 B+ should be good enough, certainly a Pi 4 should do the trick.  I have quite a few old Pis lying around (I love that they maintain compatibility with the old hardware) so if my router goes down I can run the router on an old Pi until a new Pi 4 (or 5!) arrives.</p> <p>From Jeff Geerling's blog Getting Gigabit Networking on a Raspberry Pi 2, 3 and B+.  \"You can get Gigabit networking working on any current Raspberry Pi (A+, B+, Pi 2 model B, Pi 3 model B), and you can increase the throughput to at least 300+ Mbps [...] The Raspberry Pi 3 model B+ includes a Gigabit wired LAN adaptor onboard\u2014though it's still hampered by the USB 2.0 bus speed (so in real world use you get ~224 Mbps instead of ~950 Mbps). [...] The Raspberry Pi 4 model B finally has true Gigabit wired LAN, owing to it's new I/O architecture [...] the Pi 4 can sustain over 900 Mbps\"</p>"},{"location":"Pi/2020-01-05-Building-A-Raspberry-Pi-Home-Router/#instructions","title":"Instructions","text":"<p>Install Arch Linux on ARM for Raspberry Pis using these instructions.</p> <p>To get the block size of disks <code>blockdev --getsz /dev/sda</code>.  The smallest 2GB SD Card that I own is 3840000 512 byte blocks in size.  This should be the aim for an ARM installation so that it easily fits into a 2GB card.</p> <p>DOS partition a disk, +100M boot, <code>last sector</code> 3840000 for root. mount both, extract archive to root.  Move boot/* to the root of boot partition.</p> <pre><code>mkfs.vfat /dev/sdX1\nmkdir boot\nmount /dev/sdX1 boot\nmkfs.ext4 /dev/sdX2\nmkdir root\nmount /dev/sdX2 root\nwget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-4-latest.tar.gz\nbsdtar -xpf ArchLinuxARM-rpi-4-latest.tar.gz -C root\nsync\nmv root/boot/* boot\n</code></pre> <p>To get progress of sync run <code>watch -d grep -e Dirty: -e Writeback: /proc/meminfo</code></p> <p>boot</p> <pre><code>pacman-key --init\npacman-key --populate archlinuxarm\n</code></pre> <p>It is possible to configure a simple router based on the Arch Linux Router instructions.  I will be going further and installing the software that runs the internet, including the newer firewall nftable.</p> <p>install the packages</p> <pre><code>pacman -S nftables dhcp usbutils\n</code></pre> <pre><code>useradd -m -G wheel,audio jack -s /bin/bash\npasswd jack\nvisudo # uncomment \"%wheel ALL=(ALL) NOPASSWD: ALL\"\nuserdel -r alarm # after reboot\n</code></pre>"},{"location":"Pi/2020-01-05-Building-A-Raspberry-Pi-Home-Router/#setup-the-network-connections","title":"Setup The Network Connections","text":"<p>This is how identified my USB device.</p> <pre><code>lsusb &gt; lsusb.out # then insert the USB ethernet\nlsusb | diff lsusb.out - # will display USB ethernet, say AX88179. \"-\" is for standard input\ndmesg | grep AX88179 #AX88179 from above to check that device loaded correctly\nip addr #interface names and MAC addresses\n</code></pre> <p>I gave my Ethernet devices known-and-consistent-despite-booting name to save time troubleshooting, using the MAC addresses from above.</p> <p>/etc/systemd/network/10-ethusb0.link</p> <pre><code>cat &gt; /etc/systemd/network/10-ethusb0.link &lt;&lt; \"EOF\"\n[Match]\nMACAddress=12:34:56:78:90:ab\n\n[Link]\nDescription=USB to Ethernet Adaptor\nName=ethusb0\nEOF\n</code></pre> <pre><code>cat &gt; /etc/systemd/network/11-wan0.link &lt;&lt; \"EOF\"\n[Match]\nMACAddress=12:34:56:78:90:ab\n\n[Link]\nDescription=On Board Ethernet\nName=wan0\nEOF\n</code></pre> <p>I called the other one <code>11-wan0.link</code>. Each interface has an associated profile.</p> <pre><code>cat &gt; /etc/systemd/network/wan0.network &lt;&lt; \"EOF\"\n[Match]\nName=wan0\n\n[Network]\nDHCP=yes\nDNSSEC=no\nEOF\n</code></pre> <p>I chose <code>10.2.0.0</code> for my private network and <code>/16</code> gives enough device addresses.</p> <pre><code>cat &gt; /etc/systemd/network/ethusb0.network &lt;&lt; \"EOF\"\n[Match]\nName=ethusb0\n\n[Address]\nAddress=10.2.0.1\n\n[Network]\nDNSSEC=no\nEOF\n</code></pre> <p>enable systemd network service with <code>systemctl enable systemd-networkd.service</code>.</p> <p>A reboot (not forgeting <code>userdel -r alarm</code> to remove this well known user) is the quickest way to reset things and ensure that they start correctly at power on.  <code>ip addr</code> shows that both interfaces are up and have assigned addresses.</p>"},{"location":"Pi/2020-01-05-Building-A-Raspberry-Pi-Home-Router/#routing-between-networks","title":"Routing Between networks","text":"<p>Test forwarding between ip4 networks with <code>sysctl net.ipv4.ip_forward=1</code> and then make it permanent with:</p> <pre><code>cat &gt; /etc/sysctl.d/30-ipforward.conf &lt;&lt; \"EOF\"\nnet.ipv4.ip_forward=1\nnet.ipv6.conf.default.forwarding=1\nnet.ipv6.conf.all.forwarding=1\nEOF\n</code></pre>"},{"location":"Pi/2020-01-05-Building-A-Raspberry-Pi-Home-Router/#setting-up-nftables","title":"Setting up nftables","text":"<p>I have a private network with a single globally visible IP address provided by the ISP.  I need to share that address with all of my devices internally using <code>masquerade</code>.  <code>nftables</code>, which is the new replacement for <code>iptables</code> (and similar) does this.</p> <p>Don't forget to set a device the other side with a suitable static IP address (say <code>10.1.0.2</code>) and a router name of <code>10.1.0.1</code> to test the connection.</p> <p><code>mv  /etc/nftables.conf /etc/nftables.conf.bak</code> and follow the instructions on the Arch Wiki for nftables.conf for simple sharing of a public internet address.</p> <pre><code>cat &gt; /etc/nftables.conf &lt;&lt; \"EOF\"\nflush ruleset\ndefine wan_if = \"wan0\"\ntable ip nat_table {\n        chain postrouting {\n                type nat hook postrouting priority 0; policy accept;\n                oifname $wan_if masquerade\n        }\n}\nEOF\n</code></pre> <p>Run these commands...</p> <pre><code>nft -f /etc/nftables.conf\nnft -s list ruleset # check rules have been loaded correctly\nsystemctl enable nftables\nsystemctl start nftables\n</code></pre> <p>and bingo!  A fully functioning Internet router.</p> <p>I implemented a simple \"firewall\".</p>"},{"location":"Pi/2020-01-05-Building-A-Raspberry-Pi-Home-Router/#serving-ip-addresses","title":"Serving IP Addresses","text":"<p>It is possible to enter every single device's IP settings manually but that is tiresome.  Dhcpd to the rescue.  </p> <p>Nothing clever here: just following the instructions.  I'm using Google's DNS servers but there are many alternatives like the ISP's.</p> <p><code>mv /etc/dhcpd.conf /etc/dhcpd.conf.bak</code></p> <pre><code>cat &gt; /etc/dhcpd.conf &lt;&lt; \"EOF\"\n# No DHCP service in DMZ network (192.168.2.0/24)\nsubnet 192.168.2.0 netmask 255.255.255.0 {\n}\n\noption domain-name-servers 8.8.8.8;\noption subnet-mask 255.255.0.0;\noption routers 10.2.0.1;\nsubnet 10.2.0.0 netmask 255.255.0.0 {\n  range 10.2.1.1 10.2.200.250;\n}\nEOF\n</code></pre> <p>enable dhcpd on a single interface</p> <pre><code>cat &gt; /etc/systemd/system/dhcpd4@.service &lt;&lt; \"EOF\"\n[Unit]\nDescription=IPv4 DHCP server on %I\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=forking\nPIDFile=/run/dhcpd4.pid\nExecStart=/usr/bin/dhcpd -4 -q -pf /run/dhcpd4.pid %I\nKillSignal=SIGINT\n\n[Install]\nWantedBy=multi-user.target\nEOF\n</code></pre> <pre><code>systemctl enable dhcpd4@ethusb0.service\nsystemctl start dhcpd4@ethusb0.service\nsystemctl status dhcpd4@ethusb0.service # will also display the allocated addresses\n</code></pre>"},{"location":"Pi/2020-01-05-Building-A-Raspberry-Pi-Home-Router/#the-end-of-the-beginning","title":"The End of the Beginning","text":"<p>This is enough to replace the original pretty-good-for-a-consumer-grade which has been repurposed as a WAP.  To exercise more control over the home network requires implementing a DNS server.</p>"},{"location":"Pi/2020-01-05-Building-A-Raspberry-Pi-Home-Router/#links","title":"Links","text":"<ul> <li>BigDinosaur Blog on Running BIND9 and ISC-DHCP</li> <li>The Ars guide to building a Linux router from scratch</li> <li>Getting Gigabit Networking on a Raspberry Pi 2, 3 and B+</li> <li>Pi4 Firmware solves overheating driven throtteling</li> <li>Arch Linux Router</li> <li>Renaming an interface</li> <li>Why nftables?</li> <li>Arch Linux nftables</li> <li>Dhcpd</li> </ul>"},{"location":"Pi/2020-02-11-QEMU-distcc-Raspberry-Pi/","title":"QEMU distcc Raspberry Pi","text":""},{"location":"Pi/2020-02-11-QEMU-distcc-Raspberry-Pi/#url-dump","title":"URL Dump","text":""},{"location":"Pi/2020-02-11-QEMU-distcc-Raspberry-Pi/#introduction","title":"Introduction","text":""},{"location":"Pi/2020-02-11-QEMU-distcc-Raspberry-Pi/#qemu-booting-raspberry-pi","title":"QEMU Booting Raspberry Pi","text":"<ul> <li>Native emulation of Rpi2/3 using Qemu's Raspi2/3 machine Recent specific instructions for a Raspberry Pi</li> <li>Emulating raspberry pi 4 with qemu - Stack Overflow</li> <li>Raspberry Pi on QEMU older but still helpful instructions, especially about mounting partitions</li> <li>How to mount one partition from an image file that contains multiple partitions on Linux? </li> <li>How to use loop devices useful examples of how to use loop devices</li> <li> <p>Developing for non-x86 targets using QEMU for extra qemu options in addition to the <code>qemu</code> package also needed <code>qemu-arch-extra</code> on Arch Linux</p> </li> <li> <p>QEMU Documentation/Platforms/ARM</p> </li> <li>Virtual 32 bit QEMU</li> <li>Installing Debian on QEMU\u2019s 64-bit ARM \u201cvirt\u201d board</li> <li>Debian on QEMU\u2019s Raspberry Pi 3 model - flaky</li> <li>Raspbian \u201cstretch\u201d for Raspberry Pi 3 on QEMU - February 2019</li> <li>Windows for Raspberry Pi 2 on QEMU HOWTO - June 2018 but older</li> <li>Run a virtualized image of Raspberry Pi in QEMU - April 2018</li> <li>Emulate Raspberry PI with QEMU - April 2018</li> <li>How to emulate Ubuntu Core for Raspberry Pi 3 using QEMU? - March 2018</li> <li>How to emulate the Raspberry Pi 2 on QEMU?- March 2015</li> <li>Emulate Rapberry Pi 2 in QEMU - November 2015</li> </ul> <p>For Arch, packages <code>qemu</code> and <code>qemu-arch-extra</code> are required. The first steps are to download the standard Raspbian images and unzip them.</p> <p>After unzipping the Raspbian download to a img file, I needed to use</p> <pre><code>fdisk -u sectors -l ../Downloads/2020-08-20-raspios-buster-armhf-lite.img\n</code></pre> <p>to work out the correct options to setup a loop device.  This showed that the first partitions Start (in sectors) was 8192 and Sectors was 524288.  So the offset in bytes will be 8192 * 512 and the sizelimit 524288 * 512</p> <p>How to use loop devices</p> <pre><code>losetup -f \u2014show -P \u2014offset $((8192 * 512)) \u2014sizelimit $((524288 * 512)) ../Downloads/2020-08-20-raspios-buster-armhf-lite.img\nmount /dev/loop0 /mnt/rpi # or the appropriate loop device\n</code></pre> <p>Or do the mount directly like this:</p> <p><code>mount 2020-08-20-raspios-buster-armhf-lite.img /mnt/rpi/ -o loop,offset=${OFFSET_of_PARTITION},sizelimit=$((524288 * 512))</code></p> <p>Note: I have chopped this up somehow - this was correct in simplest file a few updates back. Needs testing</p> <pre><code>mkdir rpi_qemu\ncd rpi_qemu\ncp /mnt/rpi/kernel* .\ncp /mnt/rpi/*.dtb .\numount /mnt/rpi\nlosetup -d /dev/loop0 # or the correct loop\n</code></pre> <p><code>qemu-system-aarch64</code> kept complaining that the image was in the raw format, and I couldn't work how to specify the format for the <code>-sd</code> option, I converted the raspbian image from a raw format to the qcow2 one using</p> <pre><code>qemu-img convert -f raw -O qcow2 ../Downloads/2020-08-20-raspios-buster-armhf-lite.img rpi.qcow2\n</code></pre> <p>Finally, my modified command to start the image was:</p> <pre><code>qemu-system-aarch64\\\n    -M raspi3\\\n    -append \"rw earlyprintk loglevel=8 console=ttyAMA0,115200 dwc_otg.lpm_enable=0 root=/dev/mmcblk0p2 rootdelay=1\"\\\n    -dtb ./bcm2710-rpi-3-b-plus.dtb\\\n    -sd rpi.qcow2\\\n    -kernel kernel8.img\\\n    -m 1G\\\n    -smp 4\\\n    -serial stdio\\\n    -usb -device usb-mouse -device usb-kbd\n</code></pre> <p><code>qemu-img resize 2022-07-20-jack-lite-qemu.img 8G</code></p> <pre><code>qemu-system-aarch64\\\n    -M raspi3b\\\n    -append \"rw earlyprintk loglevel=8 console=ttyAMA0,115200 dwc_otg.lpm_enable=0 root=/dev/mmcblk0p2 rootdelay=1\"\\\n    -dtb .dtb/bcm2710-rpi-3-b-plus.dtb\\\n    -drive file=./2022-07-20-jack-lite-qemu.img,format=raw,id=sd \\\n    -kernel kernel8.img\\\n    -m 1G\\\n    -smp 4\\\n    -serial stdio\\\n    -usb -device usb-mouse -device usb-kbd\\\n    -nographic\n    -device usb-net,netdev=net0 -netdev user,id=net0,hostfwd=tcp::5555-:22\n</code></pre> <pre><code>qemu-system-aarch64 \\\n    -kernel ./kernel8.img \\\n    -dtb ./bcm2710-rpi-3-b.dtb \\\n    -M raspi3 -m 1024 \\\n    -serial mon:stdio \\\n    -append \\\"console=ttyAMA0 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait rw\\\" \\\n    -drive file=./raspbian-buster.img,format=raw,id=sd \\\n    -no-reboot\n    -nographic\n</code></pre> <p>sudo qemu-system-aarch64 -M raspi3b -dtb boot/bcm2710-rpi-3-b-plus.dtb -drive file=deploy/2022-07-20-jack-lite-qemu.img,format=raw,id=sd -kernel boot/kernel8.img -m 1G -nographic -serial mon:stdio -append \"console=ttyAMA0 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait rw\"</p> <p>sudo qemu-system-aarch64 -M raspi3b -dtb boot/bcm2710-rpi-3-b-plus.dtb -drive file=deploy/2022-07-20-jack-lite-qemu.img,format=raw,id=sd -kernel boot/kernel8.img -m 1G -usb -device usb-mouse -device usb-kbd -nographic -serial mon:stdio -device usb-net,netdev=net0 -netdev user,id=net0,hostfwd=tcp::5555-:22 -append \"console=ttyAMA0 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait rw\"</p> <p>console=serial0,115200 console=tty1 root=ROOTDEV rootfstype=ext4 fsck.repair=yes rootwait quiet init=/usr/lib/raspi-config/init_resize.sh</p> <p>Changing /etc/fstab entries for /boot and / to /dev/mmcblk0p1 and /dev/mmcblk0p2, respectively. This is instead of using /dev/sda1 &amp; /dev/sda2, respectively as mentioned in some of the tutorials I posted in a previous post. Also do not use PARTUUID entries</p> <p>Using QEMU to emulate a Raspberry Pi</p> <p>I don't need a graphics terminal so <code>-nographic</code> and adjusting <code>-serial mon:stdio</code> which also allows scripting and cut and paste to the terminal, apparently.  Currently on shutdown the kernel panics leading to a hang requiring me to manually kill the qemu command. Adding <code>-no-reboot</code> and <code>panic=1</code> to \"-append 'OPTIONS'\" is supposed to fix this.</p> <p>QEMU kernel for raspberry pi 3 with networking and virtio support \u201cThe latest versions of QEMU (5.1.0 and 5.0.1) have USB emulation for the raspi3 machine (qemu-system-aarch64 -M raspi3).</p> <p>You can emulate networking and access to SSH if you use: -device usb-net,netdev=net0 -netdev user,id=net0,hostfwd=tcp::5555-:22 in QEMU\u201d</p> <pre><code>qemu-system-aarch64 \\\n    -m 1024 \\\n    -M raspi3 \\\n    -kernel kernel8.img \\\n    -dtb bcm2710-rpi-3-b-plus.dtb \\\n    -sd 2020-08-20-raspios-buster-armhf.img \\\n    -append \u201cconsole=ttyAMA0 root=/dev/mmcblk0p2 rw rootwait rootfstype=ext4\u201d \\\n    -nographic \\\n    -device usb-net,netdev=net0 -netdev user,id=net0,hostfwd=tcp::5555-:22\n</code></pre> <p>Developing for non-x86 targets using QEMU Raspberry Pi boards (raspi0, raspi1ap, raspi2b, raspi3ap, raspi3b) -- QEMU documentation raspbian lite - No video output running on QEMU - Raspberry Pi Stack Exchange</p> <pre><code>sudo qemu-system-aarch64 \\\n    -M raspi3b \\\n    -append \"rw earlyprintk loglevel=8 console=ttyAMA0,115200 root=/dev/mmcblk0p2 rootdelay=1\" \\\n    -dtb bcm2710-rpi-3-b.dtb \\\n    -sd 2022-01-28-raspios-bullseye-armhf-lite.img \\\n    -kernel kernel8.img \\\n    -m 1G \\\n    -smp 4 \\\n    -usb -device usb-mouse -device usb-kbd \\\n    -device usb-net,netdev=net0 \\\n    -netdev user,id=net0,hostfwd=tcp::5555-:22\n</code></pre> <p>boot - Running raspbian buster with qemu - Raspberry Pi Stack Exchange Debian \"buster\" for Raspberry Pi 3 on QEMU \u00b7 wimvanderbauwhede/limited-systems Wiki \u00b7 GitHub</p> <pre><code>qemu-system-aarch64 \\\n    -M raspi3 \\\n    -append \"rw earlyprintk=ttyAMA0,115200 loglevel=8 console=ttyAMA0,115200 root=PARTUUID=6c586e13-02 rootfstype=ext4 rootwait\" \\\n    -cpu cortex-a53 \\\n    -dtb /path/to/bcm2710-rpi-3-b.dtb \\\n    -drive id=hd-root,file=/path/to/2019-09-26-raspbian-buster-lite.img,format=raw \\\n    -show-cursor \\\n    -kernel /path/to/kernel8.img \\\n    -m 1024 \\\n    -serial mon:stdio \\\n    -nographic\n</code></pre> <p>Answer here is to use the <code>virt</code> emulation virtual machine - Trying to run Raspberry-Pi image under QEMU, but VM memory is limited to 256MB - Stack Overflow</p> <ul> <li>Bare metal Raspberry Pi 3 tutorials this guy submitted the patch to qemu to get raspi3 working (raspi2 is apparently from Microsoft)</li> <li>Raspberry Pi ARM based bare metal examples</li> <li>Learning operating system development using Linux kernel and Raspberry Pi</li> <li>RPI3 QEMU - Raspberry Pi Forums more information and extra patches</li> <li>Raspberry Pi 4 and QEMU (x86/x64) - Raspberry Pi Forums running emu on the pi and emulating x86/x64.  Note that we I compiled from source and cross compiling</li> <li>Run another OS on your RPi3 as a virtualized QEMU guest under KVM (64-bit) - Raspberry Pi Forums</li> <li>Using QEMU to emulate a Raspberry Pi</li> <li>QEMU Documentation/Platforms/ARM</li> <li>Virtual 32 bit QEMU</li> <li>Installing Debian on QEMU\u2019s 64-bit ARM \"virt\" board</li> <li>Debian on QEMU\u2019s Raspberry Pi 3 model - flaky</li> <li>Raspbian \"stretch\" for Raspberry Pi 3 on QEMU - February 2019</li> <li>Windows for Raspberry Pi 2 on QEMU HOWTO - June 2018 but older</li> <li>Run a virtualized image of Raspberry Pi in QEMU - April 2018</li> <li>Emulate Raspberry PI with QEMU - April 2018</li> <li>How to emulate Ubuntu Core for Raspberry Pi 3 using QEMU? - March 2018</li> <li>How to emulate the Raspberry Pi 2 on QEMU?- March 2015</li> <li>Emulate Rapberry Pi 2 in QEMU - November 2015</li> </ul>"},{"location":"Pi/2020-02-11-QEMU-distcc-Raspberry-Pi/#compiling-qemu","title":"Compiling Qemu","text":"<p>Hosts/Linux - QEMU QEMU / QEMU \u00b7 GitLab</p> <pre><code>git clone https://gitlab.com/qemu-project/qemu.git\ncd qemu\n./configure --help\n# Configure QEMU for aarch64 only - faster build\n./configure --target-list=aarch64-softmmu\n# Build in parallel - my system has 4 CPUs\nmake -j4\n</code></pre> <pre><code>./configure --target-list=aarch64-softmmu arm-softmmu x86_64-softmmu\n</code></pre> <p>Building QEMU 5.0 on Raspbian | www.chrisrcook.com Running Alpine Linux in QEMU - Yuankun's Blog Hosts/Linux - QEMU QEMU - Alpine Linux</p> <p>[SOLVED] Qemu 5.0.0 alien build crashes trying to boot Raspbian-Buster as a RPi3</p> <p>\" So after much testing and searching, I've come up with a solution to this problem. I'll document it here in the event that anyone else encounters this problem.</p> <p>There are a few things that resulted in success:</p> <ul> <li> <p>Building Qemu with the --disable-tcg-interpreter flag; Alien's slackbuild script uses the --enable-tcg-interpreter flag (approx line 341 of qemu.SlackBuild script) so this needs to be changed manually. Otherwise you will eventually encounter the 'tcg fatal error' mentioned in my original post.</p> </li> <li> <p>Changing /etc/fstab entries for /boot and / to /dev/mmcblk0p1 and /dev/mmcblk0p2, respectively. This is instead of using /dev/sda1 &amp; /dev/sda2, respectively as mentioned in some of the tutorials I posted in a previous post. Also do not use PARTUUID entries.</p> </li> <li> <p>Changing root=/dev/mmcblk0p2 in the 'append' line for Qemu itself (see complete command below)</p> </li> <li> <p>Note that Raspbian/RaspberrryPiOS's cmdline.txt in /boot provides the initial kernel 'append' used when booting the OS for the first time. It explicitly calls a script (/usr/lib/raspi-config/init_resize.sh) using an init= argument that does some checks and resizes the root filesystem to the available size of the disk/SD card it is installed on. The script also removes itself from the /boot/cmdline.txt file after it has (successfully) run so that it doesn't try and resize the root partition again every time you power on your Pi. I, however, made additional partitions on my image to my own custom specifications, and upon running init_resize.sh the script started complaining about unsupported partitions, so I tried booting without the script and it booted just fine. I would probably omit this from Qemu's append line. If run under Qemu, and if successful, it will remove it's invocation from cmdline.txt. As a result, once you flash the image to an SD card and run it on an actual Pi, this script won't be run and won't resize it's root partition to the available size of your SD card.</p> </li> <li> <p>Also note that I had previously mounted the image locally and extracted both the kernel and dtb files from /boot and passed them to Qemu.</p> </li> <li> <p>Somewhere along my travels I found a post suggesting to comment-out everything in /usr/lib/ld.so.preload, but doing that is what ultimately lead to the 'tcg fatal error' from my original post. I left it un-commented and after rebuilding Qemu with the tcg interpreter disabled, everything ran fine.</p> </li> </ul> <p>My final Qemu command is:</p> <pre><code>qemu-system-aarch64 \\\n    -kernel ./kernel8.img \\\n    -dtb ./bcm2710-rpi-3-b.dtb \\\n    -M raspi3 -m 1024 \\\n    -serial mon:stdio \\\n    -append \\\"console=ttyAMA0 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait rw\\\" \\\n    -drive file=./raspbian-buster.img,format=raw,id=sd \\\n    -no-reboot\n    -nographic\n</code></pre> <p>My /etc/fstab on the Raspbian image is: <pre><code>/dev/mmcblk0p1                                  /boot                           vfat    defaults                0       2\n/dev/mmcblk0p2                                  /                               ext4    defaults,noatime        0       1\n\nproc                                            /proc                           proc    defaults                0       0\n</code></pre> \"</p>"},{"location":"Pi/2020-02-11-QEMU-distcc-Raspberry-Pi/#distcc","title":"distcc","text":"<ul> <li>GitHub - distcc/distcc: distributed builds for C, C++ and Objective C distcc: a fast, free distributed C/C++ compiler</li> <li>Raspberry Pi Toolchain needed on the various host computers</li> <li>Distributed Compiling with distcc \u00bb Raspberry Pi Geek</li> <li>Building for Raspberry Pi using distcc - Kvaser</li> <li>Raspberry Pi/Cross building - Gentoo Wiki</li> <li>raspberry pi and distcc | openFrameworks</li> <li>Using a Raspberry Pi as a distcc node \u00b7 Random kit using a Pi as a node for x86 compilation</li> <li>Using distcc for faster builds - Raspberry Pi Forums</li> </ul>"},{"location":"Pi/2020-02-11-QEMU-distcc-Raspberry-Pi/#links","title":"Links","text":"<ul> <li>Developing using QEMU</li> <li>booting a fresh linux kernel on qemu</li> <li>How to Build A Custom Linux Kernel For Qemu</li> <li>Fast linux kernel testing with qemu</li> <li>Use \u201c and not \u2018 on Qemu on Windows</li> <li> <p>Hello world for bare metal ARM using QEMU</p> </li> <li> <p>Pi Linux From Scratch - PiLFS - QEMU</p> </li> </ul>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/","title":"Alpine Linux Raspberry Pi Router","text":""},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#alpine-linux-raspberry-pi-router","title":"Alpine Linux Raspberry Pi Router","text":"<p>This is a follow up to my earlier posts about building cheap, high performance and flexible home router.</p>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#instructions","title":"Instructions","text":"<p>Network addresses will need to be adjusted. Don't forget, that if you're behind a private network, the 'Martian' addresses will need to be adjusted in the firewall.</p>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#basic-setup","title":"Basic Setup","text":"<p>see \"Alpine Linux Install\", need ssh server and the hardware provided Random Number Generator (RNG) Device (hwrng)</p> <p>Things to change</p> <ul> <li>alpine-router # hostname</li> <li>address 10.2.0.1 # eth1 interface</li> <li>chidley.home #local domain name</li> <li>dhcp-range=10.2.1.1,10.2.1.255,255.255.0.0,12h # or whatever your local network needs to be</li> </ul> <pre><code>mount /media/mmcblk0p1 -o rw,remount\napk -U upgrade\n</code></pre> <pre><code># --- rtc ---\ncat &gt; $tdir/usercfg.txt &lt;&lt; \"EOF\"\n# for the RTC\ndtparam=i2c\ndtoverlay=i2c-rtc,pcf8523 # ds3231 or pcf8523\nEOF\n</code></pre> <pre><code>sync # make sure all the files are written to the SD card\numount $tdrive\nrmdir $tdrive\n</code></pre> <p>boot</p> <p>Alpine Linux on a Raspberry Pi 3 B+ with a RTC module</p> <pre><code>apk add mkinitfs\n</code></pre> <p>add <code>rpirtc</code> to the end of the features list in /etc/mkinitfs/mkinitfs.conf</p> <p>rebuild the initial RAM fs image.</p> <pre><code>. /etc/lbu/lbu.conf\nln -s /media/$LBU_MEDIA/boot /boot\nmount /media/$LBU_MEDIA -o remount,rw\n. /etc/mkinitfs/mkinitfs.conf\nmkinitfs -F \"$features squashfs\"\nmount /media/$LBU_MEDIA -o remount,ro\n</code></pre> <p>Enable the hwclock service</p> <p>boot</p> <pre><code>rc-update del swclock boot\nrc-update add hwclock boot\nhwclock -w\nlbu commit\n</code></pre> <pre><code>rc-service hwclock start # if you have a RTC with the date already set\ndate -s 2012011342 # set date to appropriate value, e.g. 2020 November 27 13:47\nsetup-alpine -f answerfile.txt\napk -U upgrade # update and upgrade\napk add dropbear # dropbear not installed\napk add dropbear-dbclient\nlbu commit\nip add # get ip address\nreboot # belt and braces\n</code></pre> <p>Dropbear installation is a little buggy, so need to login locally again and check all is OK.</p> <pre><code>apk add dropbear\nrc-update add dropbear\nrc-service dropbear start\nlbu ci\n</code></pre>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#overlayfs","title":"OverlayFS","text":"<pre><code>ssh jack@10.3.151.102 # substitute correct ip address\nmkdir /media/mmcblk0p2\necho \"/dev/mmcblk0p2 /media/mmcblk0p2 ext4 rw,relatime,errors=remount-ro 0 0\" &gt;&gt; /etc/fstab\nmount -a\nmkdir /media/mmcblk0p2/home\nmkdir /media/mmcblk0p2/.workhome\necho \"overlay /home overlay lowerdir=/home,upperdir=/media/mmcblk0p2/home,workdir=/media/mmcblk0p2/.workhome 0 0\" &gt;&gt; /etc/fstab \nmount -a\ndf # check overlays are mounted\nadduser jack --home /home/jack\nlbu ci -d\nreboot\n</code></pre> <pre><code>ssh jack@10.3.151.102 # substitute correct ip address\nsu\n</code></pre>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#router-setup","title":"Router Setup","text":"<p>Static IP and Network Configuration on Debian Linux Linux Router with VPN on a Raspber WireGuard on Alpine Linux with nftables</p>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#dnsmasq","title":"Dnsmasq","text":"<pre><code># --- dnsmasq ---\napk add dnsmasq\nrc-update add dnsmasq\n# rc-service dnsmasq start\nmv /etc/dnsmasq.conf /etc/dnsmasq.conf.example\ncat &gt; /etc/dnsmasq.conf &lt;&lt; \"EOF\"\n# --- DNS ---\n# Listen on this specific port instead of the standard DNS port\n# (53) as \u2018unbound\u2019 is the DNS server.\nport=35353\n\n# Add local-only domains here, queries in these domains are answered\n# from /etc/hosts or DHCP only.\nlocal=/localnet/\n\n# interface _not_ to listen on (WAN)\nexcept-interface=eth0\n\n# Set this (and domain: see below) if you want to have a domain\n# automatically added to simple names in a hosts-file.\nexpand-hosts\n\n# Set the domain for dnsmasq. this is optional, but if it is set, it\n# does the following things.\n# 1) Allows DHCP hosts to have fully qualified domain names, as long\n#     as the domain part matches this setting.\n# 2) Sets the \"domain\" DHCP option thereby potentially setting the\n#    domain of all systems configured by list of ports in use on linuxDHCP\n# 3) Provides the domain part for \"expand-hosts\"\ndomain=chidley.home\n# This is small as it covers just local DNS lookup\ncache-size=1000\n\n# --- DHCP ---\ndhcp-authoritative\ninterface=br0 # only listen on LAN port\n# DHCP range with netmask. This must fit with the\n# netmask/ip address assigned to the (static) interface\ndhcp-range=10.2.1.1,10.2.1.255,255.255.0.0,12h\n\n# dhcp-leasefile=/var/lib/misc/dnsmasq.leases\n\n# Set the NTP time server address to be the same machine as\n# is running dnsmasq\ndhcp-option=option:ntp-server,0.0.0.0\n\n# Set the DNS server address to be the same machine as\n# is running dnsmasq\ndhcp-option=option:dns-server,0.0.0.0\n\ndhcp-option=option:domain-name,chidley.home\n\n# --- PXE ---\nEOF\nsed -i s/chidley.home/example.com/ /etc/dnsmasq.conf # change example.com\nsed -i s/10.2/10.10/g /etc/dnsmasq.conf # change 10.10\n# https://chrony.tuxfamily.org/faq.html#_how_do_i_make_an_ntp_server\necho \"allow\" &gt;&gt; /etc/chrony/chrony.conf\nlbu ci -d\n</code></pre>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#unbound","title":"Unbound","text":"<pre><code>apk add unbound\nrc-update add unbound\nrc-service dnsmasq start\nrc-service hostapd start\nwget https://www.internic.net/domain/named.root -O /etc/unbound/root.hints\n#https://kevinlocke.name/bits/2017/03/09/unbound-with-dnsmasq-on-openwrt/\n# --- unbound ---\ncat &gt; /etc/unbound/unbound.conf &lt;&lt; \"EOF\"\nserver:\n  interface: 0.0.0.0\n  interface: ::0\n  root-hints: \"/etc/unbound/root.hints\"\n  access-control: 127.0.0.0/8 allow\n  access-control: 10.2.0.0/16 allow\n  do-not-query-localhost: no\n  domain-insecure: \"2.10.in-addr.arpa\"\n  domain-insecure: \"chidley.home\"\n  local-zone: \"2.10.in-addr.arpa.\" nodefault\n  private-address: 10.0.0.0/8\n  private-address: 169.254.0.0/16\n  private-address: 172.16.0.0/12\n  private-address: 192.168.0.0/16\n  private-address: fd00::/8\n  private-address: fe80::/10\n  private-domain: \"chidley.home\"\n\nforward-zone:\n  name: \"chidley.home\"\n  forward-addr: 127.0.0.1@35353\n\nforward-zone:\n  name: \"2.10.in-addr.arpa\"\n  forward-addr: 127.0.0.1@35353\nEOF\nsed -i s/chidley.home/example.com/ /etc/unbound/unbound.conf # change example.com\nsed -i s/2.10.in-addr.arpa/10.10.in-addr.arpa/g /etc/unbound/unbound.conf # change 10.10.in-addr.arpa\nsed -i s/10.2.0.0/10.10.0.0/g /etc/unbound/unbound.conf #  change 10.10.0.0\nunbound-checkconf\nrc-service unbound start\n# use unbound and not google for DNS resolution\n# https://www.shellhacks.com/setup-dns-resolution-resoapk add nftableslvconf-example/\nsed -i s/8.8.8.8/127.0.0.1/ /etc/resolv.conf \nlbu ci\n</code></pre> <p>Need hardware random number generator</p> <p>The HWRNG on the BCM2838 is compatible to iproc-rng200apk add nftables Arch Linux Arm: Raspberry Pi</p> <p><code>haveged</code> competes with the broadcom provided random number generator, now <code>iproc-rng200</code> (previously bcm2835_rng and bcm2708-rng) and so it needs to be disabled</p> <pre><code>cat /proc/sys/kernel/random/entropy_avail\n# typically less than 1000\napk add rng-tools\nRNGD_OPTS=\"-x1 -o /dev/random -r /dev/hwrng\"\nrc-service rngd start\nrc-update add rngd\ncat /proc/sys/kernel/random/entropy_avail\n# should be more than 3000\nrngd -l\n# The \"Hardware RNG Device (hwrng)\" should be an \"Available and enabled entropy source\"\nlbu ci\n</code></pre>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#basic-firewall-and-routing","title":"Basic Firewall and Routing","text":"<p>This router configuration will forward all traffic between all interfaces.</p> <pre><code># --- forwarding for routing ---\ncat &gt; /etc/sysctl.d/local.conf &lt;&lt; \"EOF\"\n# Controls IP packet forwarding\nnet.ipv4.ip_forward = 1\nEOF\n</code></pre> <p>This <code>nftables</code> does masquerading so that you can use your internet connection with multiple clients, there is no filtering or traffic management./etc/network/interfaces</p> <pre><code>apk add nftables\ncat &gt; /etc/nftables.nft &lt;&lt; \"EOF\"\nflush ruleset\ndefine wan = eth0\ntable ip nat {\n  chain postrouting {\n    type nat hook postrouting priority srcnat;\n\n    oif $wan masquerade persistent\n  }\n}\nEOF\nrc-update add nftables\nlbu ci\nrc-service nftables start\nrc-service nftables list # should be as entered above/etc/network/interfaces\nreboot\n</code></pre> <p>Once the above works, then see Traffic Manager for a better \"firewall\".</p>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#wireless-access-point","title":"Wireless Access Point","text":"<p>Raspberry Pi 3 - Configuring it as wireless access point -AP Mode</p> <pre><code>apk add hostapd\napk add bridge\nrc-update add hostapd\n# --- hostapd ---\n# https://raspberrypi.stackexchange.com/questions/69866/wlan0-could-not-connect-to-kernel-driver\ncat &gt; /etc/hostapd/hostapd.conf &lt;&lt; \"EOF\"\ninterface=wlan0\nbridge=br0\ndriver=nl80211\nssid=C_test\nhw_mode=g\nchannel=1\nmacaddr_acl=0\nauth_algs=1\nwpa=2\nwpa_key_mgmt=WPA-PSK\nwpa_passphrase=chidley_secret\nrsn_pairwise=CCMP\nwpa_pairwise=CCMP\nEOF\nsed -i s/C_test/C_J/ /etc/hostapd/hostapd.conf # change C_J\nsed -i s/chidley_secret/secret/ /etc/hostapd/hostapd.conf # change secret\nlbu ci -d\n# --- network interfaces ---\ncat &gt; /etc/network/interfaces &lt;&lt; \"EOF\"\nauto lo\niface lo inet loopback\n\n# Internal Ethernet - WAN\nauto eth0\niface eth0 inet dhcp\n    hostname alpine-router\n\nauto br0\niface br0 inet static\n    bridge-ports wlan0 eth1\n    bridge-stp 0\n    address 10.2.0.1\n    netmask 255.255.0.0\nEOF\nsed -i s/10.2.0.1/10.10.0.1/ /etc/network/interfaces # change 10.10.0.1\n</code></pre> <pre><code>rc-service dnsmasq start\nrc-service hostapd start\n# to test, then\nrc-update add hostapd\nrc-update add dnsmasq\nlbu ci\n</code></pre> <p>/etc/network/interfaces### i2c for RTC</p> <ul> <li>Saving time with Hardware Clock</li> <li>How to activate Raspberry-pi\u2019s i2c bus</li> <li>Adafruit - Adding a Real Time Clock to Raspberry Pi</li> <li>Raspberry Pi Device Trees, overlays, and parameters</li> </ul>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#dnsmasq-and-unbound-links","title":"Dnsmasq and Unbound Links","text":"<ul> <li>Unbound with Dnsmasq on OpenWrt - Kevin Locke\u2019s Homepage</li> <li>Combining Dnsmasq and Unbound \u2013 Simon Josefsson\u2019s blogunbound-checkconf</li> <li>dnsmasq + unbound</li> <li>Unbound DNS Server Tutorial @ Calomel.org</li> <li>Unbound, an Easy, Fast and Small DNS Resolver</li> <li>Use dnsmasq to provide DNS &amp; DHCP services - Fedora Magazine</li> <li>dnsmasq - Debian Wiki</li> <li>dnsmasq/dnsmasq.conf.example at master \u00b7 imp/dnsmasq \u00b7 GitHub</li> <li>Lightweight ad-blocking with dnsmasq and Raspberry Pi</li> <li>Easy Mapping \u00bb Linux Magazine</li> </ul>"},{"location":"Pi/2020-11-18-Alpine-Linux-Raspberry-Pi-Router/#links","title":"Links","text":"<ul> <li>Nftables/Examples - Gentoo Wiki</li> <li>Scripting - nftables wiki</li> <li>How do I see what iptables is doing?</li> <li>Alpine Linux Stateful Firewall</li> <li>Blocking DHCP servers and router advertisements with nftables | ungleich.ch</li> <li>Linux Router with VPN on a Raspberry Pi (IPv6) - Alpine Linux</li> </ul> <p>https://wiki.alpinelinux.org/wiki/How_to_set_up_Alpine_as_a_wireless_router https://thepihut.com/blogs/raspberry-pi-tutorials/setting-up-a-wireless-access-point-a-bridge-method-internet-over-wired-ethernet https://wiki.alpinelinux.org/wiki/Bridge_wlan0_to_eth0</p> <p>https://unix.stackexchange.com/questions/363332/how-do-i-configure-a-network-interface-bridge-from-wifi-to-ethernet-with-debian</p> <p>https://www.thegeekstuff.com/2017/06/brctl-bridge/ https://tldp.org/HOWTO/BRIDGE-STP-HOWTO/set-up-the-bridge.html https://www.raspberrypi.org/documentation/configuration/wireless/access-point-routed.md</p>"},{"location":"Pi/2020-12-17-Arch-Linux-Raspberry-Pi/","title":"Arch Linux Raspberry Pi","text":""},{"location":"Pi/2020-12-17-Arch-Linux-Raspberry-Pi/#arch-linux-raspberry-pi","title":"Arch Linux Raspberry Pi","text":"<p>Copy /etc/fstab from Raspbian OS 64 install and change PARTUUID to those shown  lsblk -o PARTUUID,NAME</p> <p>Mirrors - ArchWiki Change the mirror to eu ones early</p>"},{"location":"Pi/2020-12-17-Arch-Linux-Raspberry-Pi/#x-windows","title":"x windows","text":"<p>pacman -S xorg xinit # possibly xorg-server too pacman -S xf86-video-fbdev # need to check with Raspbian OS 64 </p> <p>VC4 and V3D OpenGL drivers for Raspberry Pi: an update - Raspberry Pi</p> <p>dwm - dynamic window manager | suckless.org software that sucks less st - simple terminal | suckless.org software that sucks less- no terminal otherwise dmenu</p>"},{"location":"Pi/2020-12-17-Arch-Linux-Raspberry-Pi/#ntp","title":"ntp","text":"<p>Network Time Protocol daemon - ArchWiki</p>"},{"location":"Pi/2020-12-17-Arch-Linux-Raspberry-Pi/#wifi","title":"WiFi","text":"<p>New Raspberry Pi 400 - ARM - Manjaro Linux Forum</p>"},{"location":"Pi/2020-12-17-Arch-Linux-Raspberry-Pi/#links","title":"Links","text":"<ul> <li>archlinux - Install Xorg on Arch-Linux-ARM - Raspberry Pi Stack Exchange</li> <li></li> </ul>"},{"location":"Pi/2022-07-09-Rasbian-X11/","title":"Rasbian-X11","text":""},{"location":"Pi/2022-07-09-Rasbian-X11/#rasbian-x11","title":"Rasbian X11","text":"<pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install xserver-xorg x11-xserver-utils xterm realvnc-vnc-server git -y\n</code></pre> <p>XTERM \u2013 Terminal emulator for the X Window System VTTEST \u2013 VT100/VT220/XTerm test utility</p> <pre><code>mkdir -p .ssh\ncat &gt; ~/.ssh/authorized_keys &lt;&lt; \"EOF\"\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJStmBtE+gjd8kFbFVj4En5+i630G0Mn3Pv4+p5sQyde\nEOF\n</code></pre>"},{"location":"Pi/2022-07-09-Rasbian-X11/#sara","title":"sara","text":"<pre><code>sudo apt install xorg-dev -y\n\ngit clone https://github.com/gitluin/sara.git\ncd ~/sara\ncp src/config.def.h src/config.h\n# single and double quotes don\u2019t paste properly, fonts in Working Copy need to be set to 'programming' and not natural\nsed -i -E 's/barpx\\s+=\\s+20/barpx\\t\\t\\t= 0/g' src/config.h # set top bar to 0\ngrep barpx src/config.h # check\nmake\nsudo make install\n</code></pre> <p>13 Best Tiling Window Managers for Linux</p>"},{"location":"Pi/2022-07-09-Rasbian-X11/#sxhkd","title":"sxhkd","text":"<pre><code>sudo apt install libxcb-util-dev libxcb-keysyms1-dev -y\n\ncd ~\ngit clone https://github.com/baskerville/sxhkd.git\ncd ~/sxhkd\nmake\nsudo make install\nmkdir -p ~/.config/sxhkd\ncp ~/sara/examples/sxhkdrc ~/.config/sxhkd/sxhkdrc\nsed -i -E 's/super/control + alt/g' ~/.config/sxhkd/sxhkdrc # default one probably needs significant editing, no super on iPad keyboard\n</code></pre> <p>xev # on vnc to find out what keys, mouse, events are less sxhkd/doc/sxhkd.1.asciidoc # options</p>"},{"location":"Pi/2022-07-09-Rasbian-X11/#dmenu","title":"dmenu","text":"<pre><code>cd ~\ngit clone https://git.suckless.org/dmenu\ncd dmenu/\nmake\nsudo make install\n</code></pre>"},{"location":"Pi/2022-07-09-Rasbian-X11/#setup","title":"setup","text":"<p>There is a bug where you have to activate the keyboard form the 'hamburger' menu (... in a solid circle) within vnc connect.</p> <p>Note that paste keys are 3 finger tap</p> <p>https://dustinpfister.github.io/2020/03/27/linux-raspbian-lite-xserver-xorg/</p> <p>https://help.realvnc.com/hc/en-us/articles/360002249917-VNC-Connect-and-Raspberry-Pi#changing-the-raspberry-pi\u2019s-screen-resolution-0-12 Why does VNC Server in Virtual Mode on Linux appear to hang, show a gray screen or not start at all? \u2013 RealVNC Help Center</p> <p>TrueType fonts xterm TrueType fonts xterm VNC Server in Virtual Mode on Linux vncserver-virtuald Man Page https://help.realvnc.com/hc/en-us/articles/360002310457-vncserver-virtual-Man-Page</p> <pre><code>sudo apt install -y xserver-xorg-video-dummy # for an updated virtual server to be used by vncserver\nsudo vncinitconfig -enable-system-xorg # enable this for all users\n</code></pre> <p>need to adjust vnc Connect to attach to the correct instance of the VNC server (say :1)</p> <pre><code>mkdir -p .vnc\ncat &gt; ~/.vnc/xstartup &lt;&lt; \"EOF\"\n#!/bin/bash\n[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources\nsxhkd -c ~/.config/sxhkd/sxhkdrc &amp; # enable keys e.g. \u2018super-d\u2019 for dmenu\nexport TERMINAL=\"xterm -fa VeraMono -fs 18\"\n$TERMINAL &amp;\nsara # or another display manager\nEOF\nchmod +x .vnc/xstartup\n</code></pre> <pre><code>cat &gt; ~/.Xresources &lt;&lt; \"EOF\"\nXTerm*renderFont: true\nXTerm*faceName: VeraMono\nXTerm*faceSize: 18\nEOF\n</code></pre> <p>vncserver-virtual -geometry 2160x1620 # display size for iPad vncserver-virtual -kill :1 # kill the session above</p>"},{"location":"Pi/2022-07-09-Rasbian-X11/#visual-studio-code","title":"Visual Studio Code","text":"<p>disable hardware acceleration</p> <p>VS Code: Preferences, Settings - Text Editor, Font, Font Size to 18 (i.e. match above)</p> <p>Open the Command Palette (\u21e7\u2318P). Run the Preferences: Configure Runtime Arguments command. This command will open a argv.json file to configure runtime arguments. You might see some default arguments there already. Add \"disable-hardware-acceleration\": true. Restart VS Code.</p>"},{"location":"Pi/2022-07-09-Rasbian-X11/#chromium","title":"Chromium","text":"<p>Disable Hardware Acceleration To find the setting, click the triple-dot Menu button and choose Settings. Scroll down to the bottom of the Settings page and click Show advanced settings. Scroll down to the System section and check (or uncheck) the box for Use hardware acceleration when available.</p> <p>if Chromium stops working, can use firefox-esr package</p>"},{"location":"Pi/2022-07-09-Rasbian-X11/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Example</li> </ul>"},{"location":"Pi/2022-07-16-Pi-Gen/","title":"Pi-Gen","text":""},{"location":"Pi/2022-07-16-Pi-Gen/#pi-gen","title":"Pi-Gen","text":"<p>Pi-Gen</p>"},{"location":"Pi/2022-07-16-Pi-Gen/#introduction","title":"Introduction","text":"<p>Pi-Gen</p>"},{"location":"Pi/2022-07-16-Pi-Gen/#do-stuff","title":"Do stuff","text":"<pre><code>git clone --depth 1 https://github.com/RPI-Distro/pi-gen.git\ncd pi-gen\n</code></pre> <p>GitHub - RPi-Distro/pi-gen: Tool used to create the official Raspberry Pi OS images Custom image with pi-gen: What (not) to remove, configuring stuff - Raspberry Pi Forums</p> <p>prevent weirdness during install</p> <p>How to Change or Set System Locales in Linux</p> <pre><code>sudo localectl set-locale LANG=en_GB.UTF8\nexport LC_ALL=en_GB.UTF8\n</code></pre>"},{"location":"Pi/2022-07-16-Pi-Gen/#chroot","title":"chroot","text":"<p>What is on_chroot used for? \u00b7 Issue #146 \u00b7 RPi-Distro/pi-gen \u00b7 GitHub How to Use the chroot Command on Linux</p> <pre><code>#!/bin/bash\nchr=~/testroot\n\nfunction getit {\n    cp -v /bin/$1 $chr/bin/$1\n    list=\"$(ldd /bin/$1 | egrep -o '/lib.*\\.[0-9]')\"\n    for i in $list; do cp -v --parents \"$i\" \"${chr}\"; done\nreturn\n}\n\nfunction buildroot {\n    mkdir -p $chr\n    mkdir -p $chr/{bin,lib,lib64}\n    getit bash\n    getit touch\n    getit ls\n    getit rm\nreturn\n}\n\nsudo chroot $chr /bin/bash\n</code></pre> <pre><code>chr=~/testroot\nsudo chroot $chr &lt;&lt; EOF \nls\nEOF\n</code></pre>"},{"location":"Pi/2022-07-16-Pi-Gen/#config","title":"config","text":"<pre><code>cd pi-gen\ncat &gt; config &lt;&lt; \"EOF\"\nIMG_NAME=jack\nUSE_QCOW2=1\nDEPLOY_COMPRESSION=none\nUSE_QEMU=1\nTARGET_HOSTNAME=jackclean\nFIRST_USER_NAME=jack\nDISABLE_FIRST_BOOT_USER_RENAME=1\nWPA_ESSID=C1\nWPA_PASSWORD=uXLUlPdY\nWPA_COUNTRY=GB\nENABLE_SSH=1\nPUBKEY_SSH_FIRST_USER=\"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFfwuj1qjlmAbsw4PjCeZrYxtYlXzH1KZi+dMIsB7QjI7wD3pB56aJebgYBC0HlnEqupKucrK5NkhFD6n5i668I= ecdsa ShellFish@Jack-iPadi\"\nPUBKEY_ONLY_SSH=1\nSTAGE_LIST=\"stage0 stage1\"\nEOF\n</code></pre> <pre><code>echo FIRST_USER_PASS=secret &gt;&gt; config\n</code></pre> <pre><code>apt-get install coreutils quilt parted qemu-user-static debootstrap zerofree zip \\\ndosfstools libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc \\\nqemu-utils kpartx gpg pigz\n</code></pre> <p>start from end of stage 1 - before Lite build</p> <pre><code>touch ./stage2/SKIP ./stage3/SKIP ./stage4/SKIP ./stage5/SKIP              \ntouch ./stage2/SKIP_IMAGES ./stage4/SKIP_IMAGES ./stage5/SKIP_IMAGES                                                \nsudo localectl set-locale LANG=en_GB.UTF8\nexport LC_ALL=en_GB.UTF8\nsudo ./build.sh \n</code></pre> <p>Built the above and now want the image?</p> <pre><code>touch ./stage0/SKIP ./stage1/SKIP\ntouch ./stage1/EXPORT_IMAGE\nsudo ./build.sh \n</code></pre> <p>Put the image on an SD Card</p> <pre><code>sudo dd if=deploy/2022-07-16-jack.img of=/dev/sdb bs=1M\n</code></pre>"},{"location":"Pi/2022-07-16-Pi-Gen/#adding-stuff","title":"adding stuff","text":"<p>What does on_chroot do? - Raspberry Pi Forums</p> <p>Add a directory to stage 2 ('04-pip-installs' in my case) and a run file ('00-run.sh')</p> <pre><code>#!/bin/bash -e\n\non_chroot &lt;&lt; EOF\npip install --upgrade pip\npip install spidev\npip3 install --upgrade pip\npip3 install spidev\nEOF\n</code></pre> <pre><code>    \u00a7sed -E -i 's/(^\\s*)(STAGE_LIST=)(.*$)/\\2\"stage0 stage1 stage2jcc\"/g' config\n</code></pre>"},{"location":"Pi/2022-07-16-Pi-Gen/#pxe-and-network-boot","title":"PXE and Network Boot","text":"<ul> <li>Raspberry Pi PXE Boot - Network booting a Pi 4 without an SD card - Linuxhit</li> <li>How to configure a Raspberry Pi as a PXE boot server - Linux Tutorials - Learn Linux Configuration</li> <li>PXE booting the Raspberry Pi 4 \u2013 Deviousweb</li> <li>Two methods to network boot Raspberry Pi 4</li> </ul>"},{"location":"Pi/2022-07-16-Pi-Gen/#linux-kernel","title":"Linux Kernel","text":"<p>Raspberry Pi Documentation - The Linux kernel</p> <pre><code>sudo apt install git bc bison flex libssl-dev make\ngit clone --depth=1 https://github.com/raspberrypi/linux\n</code></pre> <p>For Raspberry Pi 2, 3, 3+ and Zero 2 W, and Raspberry Pi Compute Modules 3 and 3+ default 32-bit build configuration</p> <pre><code>cd linux\nKERNEL=kernel7\nmake bcm2709_defconfig\n</code></pre> <p>For Raspberry Pi 4 and 400, and Raspberry Pi Compute Module 4 default 32-bit build configuration</p> <pre><code>cd linux\nKERNEL=kernel7l\nmake bcm2711_defconfig\n</code></pre> <p>For Raspberry Pi 3, 3+, 4, 400 and Zero 2 W, and Raspberry Pi Compute Modules 3, 3+ and 4 default 64-bit build configuration</p> <pre><code>cd linux\nKERNEL=kernel8\nmake bcm2711_defconfig\n</code></pre>"},{"location":"Pi/2022-07-16-Pi-Gen/#links","title":"Links","text":"<ul> <li>https://example.com</li> </ul> <ul> <li>Building custom pi servers with pi-gen easily - Raspberry Pi Forums</li> <li>Create a custom Raspbian image with pi-gen: part 1 | Kyle M. Douglass</li> <li>Making KioskPi -- custom Raspberry Pi OS image using pi-gen</li> <li>Using Pi-Gen to Build a Custom Raspbian Lite Image \u2013 GeoffHudik.com</li> <li>GitHub - RPi-Distro/pi-gen: Tool used to create the official Raspberry Pi OS images</li> <li>Custom image with pi-gen: What (not) to remove, configuring stuff - Raspberry Pi Forums</li> <li></li> </ul>"},{"location":"Pi/2022-07-17-Pi-Pico/","title":"Pi-Pico","text":""},{"location":"Pi/2022-07-17-Pi-Pico/#pi-pico","title":"Pi Pico","text":""},{"location":"Pi/2022-07-17-Pi-Pico/#examples","title":"Examples","text":"<ul> <li>RASPBERRY PI PICO AND BMP388 BAROMETRIC PRESSURE SENSOR CIRCUITPYTHON EXAMPLE I copied the adafruit_bmp3xx.mpy library for this device to the lib folder on my Raspberry Pi Pico \u2013 https://circuitpython.org/libraries</li> <li>BlinkM \u2014 ThingM Get the datasheet</li> <li> <p>Adafruit Sponsored Libraries and Drivers on GitHub \u2014 Adafruit CircuitPython Bundle 1.0 documentation</p> </li> <li> <p>Interfacing DS18B20 Sensor with Raspberry Pi Pico</p> </li> </ul>"},{"location":"Pi/2022-07-17-Pi-Pico/#networking","title":"Networking","text":"<ul> <li>binary/ASCII conversions</li> <li>network -- MicroPython</li> <li>WLAN \u2013 control built-in WiFi interfaces</li> <li>4. Network basics</li> <li>Network Configuration -- mPython</li> <li>dhcpserver.c</li> <li>MicroPython and WiFi</li> </ul>"},{"location":"Pi/2022-07-17-Pi-Pico/#data-collection-mqtt","title":"Data Collection, MQTT","text":"<ul> <li>Installing InfluxDB</li> <li>Install Telegraf</li> <li>Telegraf Server Agent</li> <li>Store MQTT Data in SQL Database</li> </ul>"},{"location":"Pi/2022-07-17-Pi-Pico/#links","title":"Links","text":""},{"location":"Pi/2022-07-17-Pi-as-iPad-Development-Machine/","title":"iPad Development","text":""},{"location":"Pi/2022-07-17-Pi-as-iPad-Development-Machine/#-","title":"---","text":""},{"location":"Pi/2022-07-17-Pi-as-iPad-Development-Machine/#pi-as-ipad-development-machine","title":"Pi as iPad Development Machine","text":""},{"location":"Pi/2022-07-17-Pi-as-iPad-Development-Machine/#build","title":"Build","text":"<p>Disk image <pre><code>sudo mount /dev/sda1 /mnt/sda1\nsudo dd if=/mnt/sda1/2022-04-04-raspios-bullseye-armhf-lite.img of=/dev/sdb status=progress bs=8M\nsudo mount /dev/sdb1 /mnt/sdb1\nsudo mount /dev/sdb2 /mnt/sdb2\n</code></pre></p> <p>ssh</p> <pre><code>sudo touch /mnt/sdb1/ssh\ncat &lt;&lt;'EOF' &gt;&gt; .ssh/authorized_keys\necdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFfwuj1qjlmAbsw4PjCeZrYxtYlXzH1KZi+dMIsB7QjI7wD3pB56aJebgYBC0HlnEqupKucrK5NkhFD6n5i668I= ecdsa ShellFish@Jack-iPad\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDrLCnKQYcbioQxzCKVH8PW6QmA1BceErjNXT3wWqC+Z macbook\nEOF\n</code></pre> <p>WiFi \"Wi-Fi is currently blocked by rfkill. Use raspi-config to set the country before use.\"</p> <p><code>sudo raspi-config nonint do_wifi_country GB</code></p> <p>rfkill soft blocked - Raspberry Pi Forums</p> <p>files in /var/lib/systemd/rfkill have a single entry for 0 or 1 on this system: <pre><code>platform-3f300000.mmcnr:wlan\nplatform-fe300000.mmcnr:wlan\nplatform-soc:bluetooth\n</code></pre></p> <p>This is what exists prior to first boot. Contents of both are 1 <pre><code>platform-3f300000.mmcnr:wlan  platform-fe300000.mmcnr:wlan\n</code></pre></p> <p>one of these is set to 1 at some point, possibly on first boot.</p> <p>enable all interfaces <pre><code>echo 0 | sudo tee /var/lib/systemd/rfkill/*\n</code></pre></p> <p>unblock spefici interface on pi 4 <pre><code>echo 0 | sudo tee /var/lib/systemd/rfkill/platform-fe300000.mmcnr\\:wlan\n</code></pre></p> <pre><code>sudo tee /mnt/sdb2/etc/wpa_supplicant/wpa_supplicant.conf &gt; /dev/null &lt;&lt; \"EOF\"\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=GB\n\nnetwork={\n        ssid=\"Jack-iPhone\"\n        psk=d9e0b093b4fcd484e696ec228c4690ee440776ab1c6159502c3059867d730678\n}\nnetwork={\n        ssid=\"C1\"\n        psk=896f3ea944b25e1d0e0ec2cc7062f34617d0401b0f2fa670a3840f123d53390d\n}\nnetwork={\n        ssid=\"C2\"\n        psk=d8e5cf6b27cb04f5c49d9ed76ab0e2ec396d426dd255de38a323e06a119fb4d5\n}\nnetwork={\n        ssid=\"C_J\"\n        psk=28c3058bdeb96e91ba39dc0da4d9ff56bb2e92215a8c194e5cfff99501374583\n}\nnetwork={\n        ssid=\"MicroPython-AP\"\n        psk=1e2f01adb61b584f45cb536a056f1b342aab4b9c68188db4fe395995b739e30a\n}\nnetwork={\n        ssid=\"BT-MNAC3H\"\n        psk=042e3b47d60f94a45975dab132595ebe44bfca60fa61cb1ff5df3705e40000c7\n}\nnetwork={\n        ssid=\"CDNMSTUDENTWIFI\"\n        psk=4c0b9ba1ef7a611be087334df646fcf99edc1953b0c3a6398034545c6f623376\n}\nEOF\n</code></pre> <p>USB network <pre><code>sudo tee -a /mnt/sdb1/config.txt &gt; /dev/null &lt;&lt; \"EOF\"\ndtoverlay=dwc2,dr_mode=peripheral\nEOF\nsudo sed -i -E -e 's/(^.* )(rootwait.*$)/\\1modules-load=dwc2,g_ether \\2/' \\\n    /mnt/sdb1/cmdline.txt\n</code></pre></p> <p>Serial console <pre><code>sudo tee -a /mnt/sdb1/config.txt &gt; /dev/null &lt;&lt; \"EOF\"\nenable_uart=1\nEOF\n</code></pre></p> <p>First user An update to Raspberry Pi OS Bullseye - Raspberry Pi <pre><code>PASS=$(echo 'mypassword' | openssl passwd -6 -stdin)\nUSERNAME=jack\necho \"$USERNAME:$PASS\" | sudo tee /mnt/sdb1/userconf.txt \n</code></pre></p> <p>end <pre><code>sync\nsudo umount /dev/sdb1 /dev/sdb2\n</code></pre></p>"},{"location":"Pi/2022-07-17-Pi-as-iPad-Development-Machine/#alpine-linux-chroot","title":"Alpine Linux - Chroot","text":"<p>see downloads | Alpine Linux</p> <pre><code>cd ~\nALPINEDOWNLOAD='https://dl-cdn.alpinelinux.org/alpine/v3.16/releases/armv7/alpine-minirootfs-3.16.1-armv7.tar.gz'\nDOWNLOADEDALPINE=\"$(echo $ALPINEDOWNLOAD | awk -F/ '{print $NF}')\"\nwget $ALPINEDOWNLOAD\nmkdir ~/alpineRoot\ntar -xvf $DOWNLOADEDALPINE -C alpineRoot/\ncp /etc/resolv.conf ~/alpineRoot/etc/\ncd ~/alpineRoot/\nchroot . /bin/ash\nsudo chroot . /bin/ash\n</code></pre> <p>Alpine Linux Chroot Alpine Linux in a chroot - Alpine Linux GitHub - alpinelinux/alpine-chroot-install: Install Alpine Linux in chroot with a breeze. Build ARM on Travis CI or any other x86_64 CI. W4TCHGUARD - How to make a portable Alpine linux chroot</p> <p>General Chroot How to Use the chroot Command on Linux 7.1. Introduction chroot - ArchWiki</p> <p>Might need virtual, pseudo and temporary filesystems too linux - mount dev, proc, sys in a chroot environment? - Super User 6.2. Mounting Virtual Kernel File Systems</p>"},{"location":"Pi/2022-07-17-Pi-as-iPad-Development-Machine/#usb-gadget-and-raspap-full-setup-of-an-access-point","title":"USB Gadget and RaspAP (full setup of an access point)","text":"<p>Raspberry Pi iPad Pro Setup Simplified - YouTube Raspberry Pi iPad Pro Setup Simplified Pi4 USB-C Gadget \u2013 Ben\u2019s Place Raspberry Pi 4 USB Gadget \u00b7 GitHub RaspAP \u2014 Simple wireless router setup for Debian-based devices Connect your Raspberry Pi 4 to an iPad Pro - Raspberry Pi</p>"},{"location":"Pi/2022-07-17-Pi-as-iPad-Development-Machine/#pi-wifi-setup","title":"Pi WiFi Setup","text":"<p>Need to think about this one. It's like a router setup but not quite.</p> <p>usb0 as the DNS/DHCP/client interface? wlan0 as the WAN, or as a LAN? Is both possible or desirable? Do we need DHCP at all if it's a single machine being worked on? Routing? Probably want nftables do we want to bring up usb0 as the client interface and, if that's not available, wlan0 as an AP (access point)?</p> <p>Or wlan0 as Access Point but manual switching to <code>wpa_supplicant</code>?</p> <pre><code>sudo apt install -y dnsmasq\nsudo apt install -y unbound\nsudo apt install -y nftables\nsudo apt install -y hostapd\n</code></pre> <p>Access point as WiFi router/repeater Raspberry Pi Wireless Access Point Setting up a Raspberry Pi as a WiFi access point Setting up a Raspberry Pi 3 as an Access Point Create wireless access point</p> <p>pi 3 - Switching between AP and Client mode - Raspberry Pi Stack Exchange wifi - Switch between AP and client mode - Raspberry Pi Stack Exchange</p> <p>How to scan for IP addresses on your network with Linux | TechRepublic</p>"},{"location":"Pi/2022-07-17-Pi-as-iPad-Development-Machine/#code-server","title":"Code-Server","text":"<p>VSCode on iPad Pro - Full Setup Guide with Raspberry Pi code-server - debian dependencies</p> <pre><code>sudo apt-get install -y \\\n  build-essential \\\n  pkg-config \\\n  python3\n</code></pre> <p>On a Raspberry Pi install the latest version of nodejs Install Node js and Npm latest Version on Raspberry Pi 4?</p> <p><code>uname -m</code> to check the particular version required and then download it from Download | Node.js using <code>wget</code>, then extract and move it to the correct place. For example:</p> <pre><code>wget https://nodejs.org/dist/v16.16.0/node-v16.16.0-linux-armv7l.tar.xz\ntar xvf node-v16.16.0-linux-armv7l.tar.xz node-v16.16.0-linux-armv7l/\ncd node-v16.16.0-linux-armv7l/\nsudo cp -R * /usr/local/\nnode -v\n</code></pre> <pre><code>npm config set python python3\nsudo npm install --global yarn\n</code></pre> <pre><code>yarn global add code-server\n# Or: npm install -g code-server\ncode-server\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n</code></pre> <pre><code># access from any node on network\nsed -E -i 's/(^\\s*)(bind-addr:\\s)(.*$)/\\20.0.0.0:8080/g' ~/.config/code-server/config.yaml\n# temporaily remove password\nsed -E -i 's/(^\\s*)(auth:\\s)(.*$)/\\2none/g' ~/.config/code-server/config.yaml\n</code></pre> <p>Go to the site (e.g. http://pilite.local:8080) and then add it to the home screen of the iPad using the share key. This adds a nice icon to the desktop</p> <pre><code>#add password back\nsed -E -i 's/(^\\s*)(auth:\\s)(.*$)/\\2password/g' ~/.config/code-server/config.yaml\n</code></pre> <pre><code>sudo tee /etc/systemd/system/code-server.service &gt; /dev/null &lt;&lt; \"EOF\"\n[Unit]\nDescription=code-server\nAfter=network.target\n\n[Service]\nUser=jack\nGroup=jack\n\nWorkingDirectory=/home/jack\nEnvironment=\"PATH=/usr/local/bin\"\nExecStart=/home/jack/.yarn/bin/code-server\n\n[Install]\nWantedBy=multi-user.target\nEOF\n</code></pre> <p>sed Appending a line to a file only if it does not already exist, removing comment if that exists - Stack Overflow</p> <pre><code>sed -i \\\n    -E -e '/^#*\\s*(cert:).*$/{s//\\1 true/;:a;n;ba;q}' \\\n    -e '$acert: true' ~/.config/code-server/config.yaml\nsed -i \\\n    -E -e '/^#*\\s*(cert-host:).*$/{s//\\1 pilite.local/;:a;n;ba;q}' \\\n    -e '$acert-host: pilite.local' ~/.config/code-server/config.yaml\n</code></pre> <p>Visual Studio Code Server</p>"},{"location":"Pi/2022-07-17-Pi-as-iPad-Development-Machine/#links","title":"Links","text":"<ul> <li>VSCode on iPad Pro - Full Setup Guide with Raspberry Pi</li> </ul>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/","title":"Alpine-Image-Build-Raspberry-Pi","text":""},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#alpine-image-build-raspberry-pi","title":"Alpine Image Build Raspberry Pi","text":""},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#introduction","title":"Introduction","text":"<p>What makes Alpine Linux interesting? It is an extremely lightweight and easy to configure system. To really appreaciate just what it offers an administrator look at these system backup instructions. To build a new system, based on an existing one, take a backup (or use a vanilla installation file), edit or write the configuration file - AKA apkvol and add the necessary packages to both the local cache and the <code>/etc/apk/world</code> file. <code>lbu commit</code> and you are done.</p> <p>This guide describes how Alpine Linux boots and there's a detailed version for the Raspberry Pi. Finally, if you're missing a favourite command then <code>akp search [faviourite missing command]</code> is what you need before you <code>apk add [found package name]</code>.</p> <p>For more detailed information see the Alpine User Handbook and the Developer Documentation.</p> <p>This is the Linux that I have been waiting for.</p>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#on-the-build-machine","title":"On the Build machine","text":"<p>This should probably be done in a <code>chroot</code> Alpine Linux in a chroot - Alpine Linux</p> <pre><code>mirror='http://dl-cdn.alpinelinux.org/alpine/'\narch='aarch64'\nversion='2.14.0-r5'\ncurl -LO ${mirror}/latest-stable/main/${arch}/apk-tools-static-${version}.apk\n</code></pre> <p>GitHub - alpinelinux/alpine-chroot-install: Install Alpine Linux in chroot with a breeze. Build ARM on Travis CI or any other x86_64 CI.</p> <p>Install Alpine on a Raspberry Pi</p> <p>We're going to install Alpine in \"diskless\" mode and use overlay files. Prepare an SD card with 500MB DOS bootable partition with the remainder as ext4 Create suitable partitions programmatically</p> <pre><code>apk add e2fsprogs lsblk dosfstools\nsudo su\ncd\nPIDEVICE=/dev/sdX # get the correct device from `cat /proc/partitions` or `df -h`\numount ${PIDEVICE}{1,2} # many linuxes automount\n# clear the old drive\nwipefs -a ${PIDEVICE} #  -a, --all wipe all magic strings (BE CAREFUL!)\n# The `sed` script uses the first string of continuous \n# letters and digits after optional spaces, \n# This, in efffect, strips the comments, allowing for in-line comments.\n# Note that sending nothing (or spaces) will send a newline\n# usually selecting the default value.\nsed -e 's/\\s*\\([\\+0-9a-zA-Z]*\\).*/\\1/' &lt;&lt; EOF | fdisk ${PIDEVICE}\n  o # create a new empty DOS partition table\n  n # new partition\n  p # primary partition\n  1 # partition number 1\n    # default: start at beginning of disk \n  +500M # 500 MB boot parttion\n  t # change a partition type\n  c # change type of partition to 'W95 FAT32 (LBA)'\n  n # add a new partition\n  p # primary partition\n  2 # partition number 2\n    # default: start immediately after preceding partition\n    # default: extend partition to end of disk\n  p # print the partition table\n  w # write table to disk and exit\nEOF\n</code></pre> <p>or use <code>sfdisk</code>.</p> <pre><code>sfdisk ${PIDEVICE} &lt;&lt; eof\n,$((2048*1024)),c\n;\neof\nsfdisk -V ${PIDEVICE}\n</code></pre> <p>downloads | Alpine Linux</p> <p>Select - yq</p> <pre><code>mkfs.fat ${PIDEVICE}1\nmkfs.ext2 ${PIDEVICE}2 # unnecessary\n# https://alpinelinux.org/downloads/\n# armv7 works on every Pi except the first Model A and Model B\ncd ~/Downloads # or /home/username/Downloads\napk add yq\narm7release='https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/armv7/'\nwget \"$arm7release/latest-releases.yaml\" -O latest-releases.yaml \nalpine_file=$(yq '.[] | select(.title == \"*Raspberry*Pi*\")'.file latest-releases.yaml)\nwget \"$arm7release/$alpine_file\" -O $alpine_file\ncheck=$(yq '.[] | select(.title == \"*Raspberry*Pi*\")'.sha256 latest-releases.yaml)\n# Two spaces between https://stackoverflow.com/a/37499133/3617057\necho \"$check  $alpine_file\" | sha256sum -c -\ntdrive=\"$(mktemp -d /tmp/alpine_install.XXXXXX)\"\nmount ${PIDEVICE}1 $tdrive\ntar -xvf $alpine_file -C $tdrive --no-same-owner\nsync\n</code></pre> <p>USB network</p> <pre><code>sudo tee -a $tdrive/usercfg.txt &gt; /dev/null &lt;&lt; \"EOF\"\ndtoverlay=dwc2,dr_mode=peripheral\nEOF\n</code></pre> <pre><code>setup-sshd\nmodprobe dwc2\nmodprobe g_ether\nip link set usb0 up\nip addr add 192.168.101.101/16 dev usb0\nping 192.168.101.102 # iPad\napk add openssh\necho \"root:secret\" | chpasswd\ncat /etc/apk/world\ncat /etc/apk/cache\n\nmount /media/mmcblk0p1 -o rw,remount\n</code></pre> <p>Not confirmed</p> <pre><code>sudo tee -a /mnt/sdb1/config.txt &gt; /dev/null &lt;&lt; \"EOF\"\ndtoverlay=dwc2,dr_mode=peripheral\nEOF\nsudo sed -i -E -e 's/(^.* )(rootwait.*$)/\\1modules-load=dwc2,g_ether \\2/' \\\n    /mnt/sdb1/cmdline.txt\n</code></pre> <p>temporary bits for testing</p> <pre><code>sync # make sure all the files are written to the SD card\numount $tdrive\nrmdir $tdrive\n</code></pre> <p>To find out the correct options, run <code>setup-alpine -c answerfile.txt</code> on a newly booted Alpine system. This script doesn't always work as it should</p> <p>Things to change</p> <ul> <li>alpine-scratch-pi # hostname</li> <li>chidley.home #local domain name</li> </ul> <pre><code>cat &gt; $tdrive/answerfile.txt &lt;&lt; \"EOF\"\n# Use GB layout with GB variant\nKEYMAPOPTS=\"gb gb\"\n\n# Set hostname to alpine-scratch-pi\nHOSTNAMEOPTS=\"-n alpine-scratch-pi\"\n\n# Contents of /etc/network/interfaces\nINTERFACESOPTS=\"auto lo\niface lo inet loopback\n\n# Internal Ethernet - WAN\nauto eth0\niface eth0 inet dhcp\n    hostname alpine-scratch-pi\n\"\n\n# `home` is the local domain name and 8.8.8.8 Google public nameserver\n# or ip address of the local name server\n# This will be replaced with custom DNS setup\nDNSOPTS=\"-d chidley.home -n 8.8.8.8\"\n\n# Set timezone to UTC\nTIMEZONEOPTS=\"-z UTC\"\n\n# set http/ftp proxy\nPROXYOPTS=\"none\"\n\n# Use the first mirror, usually CDN (Content Delivery Network)\nAPKREPOSOPTS=\"-1\"\n\n# Install Dropboar\nSSHDOPTS=\"-c dropbear\"\n\n# Use chronyd\nNTPOPTS=\"-c chrony\"\n\n# Setup in /media/mmcblk0p1\nLBUOPTS=\"/media/mmcblk0p1\"\nAPKCACHEOPTS=\"/media/mmcblk0p1/cache\"\nEOF\n\nsync # make sure all the files are written to the SD card\numount $tdrive\nrmdir $tdrive\n</code></pre> <p>boot</p> <pre><code>setup-alpine -f answerfile.txt\n# --- check ---\nls /media/mmcblk0p1/cache/ # should have dropbear in it\ncat /etc/apk/repositories # should be adjusted from default with, at least:\n# /media/mmcblk0p1/apks\n# http://uk.alpinelinux.org/alpine/v3.14/main\n</code></pre>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#hardware-random-number-generator","title":"hardware random number generator","text":"<p>The HWRNG on the BCM2838 is compatible to iproc-rng200 Arch Linux Arm: Raspberry Pi</p> <p><code>haveged</code> competes with the broadcom provided random number generator, now <code>iproc-rng200</code> (previously <code>bcm2835_rng</code> and <code>bcm2708-rng</code>) and so it needs to be disabled</p> <pre><code>cat /proc/sys/kernel/random/entropy_avail\n# typically less than 1000\napk add rng-tools\nRNGD_OPTS=\"-x1 -o /dev/random -r /dev/hwrng\"\nrc-service rngd start\nrc-update add rngd\ncat /proc/sys/kernel/random/entropy_avail\n# should be more than 3000\nrngd -l\n# The \"Hardware RNG Device (hwrng)\" should be an \"Available and enabled entropy source\"\n</code></pre>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#finalise","title":"Finalise","text":"<pre><code>apk -U upgrade\napk add mkinitfs # update to initial ramfs\napk -vv info|sort # list of installed packages, look for dropbear\napk cache -v sync # download and clean out cache\nlbu ci -d\n# upgrade instructions here https://wiki.alpinelinux.org/wiki/Upgrading_Alpine\n</code></pre>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#links","title":"Links","text":"<ul> <li>Enable Community Repository</li> <li>virtualization - How to zero fill a virtual disk's free space on windows for better compression? - Server Fault</li> </ul>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#make-your-own-alpine-image","title":"Make your own Alpine Image","text":"<p>How to make a custom ISO image with mkimage - note that the architecture has to be the same as the host. Broadcom WiFi and Wireguard, information about ISO customisationUSB Linux - Alpine ISO build How to run an unattended install of Alpine Linux Kloster - Live CD image</p> <p>An image build is really three things:</p> <ol> <li>Bake an image with everything included for offline use</li> <li>make an apkovl (overlay file) that includes all the required configuration</li> <li>make a script to run on first boot to complete setup (say doing the <code>apk add</code> commands)</li> </ol>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#setup-for-image-build","title":"Setup for Image Build","text":"<pre><code>apk add alpine-sdk build-base apk-tools alpine-conf busybox fakeroot xorriso squashfs-tools sudo # removed syslinux\napk add tmux # for ssh from iPad\napk add mkinitfs\necho \"%abuild ALL=(ALL) NOPASSWD: ALL\" &gt; /etc/sudoers.d/abuild\nsu - build\nabuild-keygen -i -a\ngit clone --depth=1 https://gitlab.alpinelinux.org/alpine/aports.git\n</code></pre> <pre><code>cat &gt; pibuild &lt;&lt;\\EOF\nsh aports/scripts/mkimage.sh --tag edge \\\n--repository http://dl-cdn.alpinelinux.org/alpine/edge/main \\\n--arch armv7 \\\n--outdir ~/iso \\\n--profile $1 \\\n$2\n#pibuild rpi --simulate\nEOF\nchmod +x pibuild\n</code></pre>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#image-build","title":"Image build","text":"<pre><code># mv aports/scripts/mkimg.arm.sh aports/scripts/bak.mkimg.arm.sh\ncp aports/scripts/bak.mkimg.arm.sh aports/scripts/mkimg.arm.sh\n# get rid of uboot stuff\nsed -i '/build_uboot/,$ d' aports/scripts/mkimg.arm.sh\n</code></pre> <pre><code>~/pibuild rpi\n# test for config and cmdline as these things disappear\ntar tf iso/alpine-rpi-edge-armv7.tar.gz | sed -n -e '/config.txt/ p' -e '/cmdline.txt/ p'\n</code></pre> <p>remove the various architecture options</p> <pre><code>sed -i -r '/kernel_flavors=\"rpi\"/,/easc/ {\ns/(kernel_flavors=\"rpi)(\")/\\12\\\"/\n/case \"\\$ARCH\"/,/esac/ d\n}' aports/scripts/mkimg.arm.sh\n</code></pre> <p>combinged with above, limit the build to just rpi2</p> <pre><code>sed -i -r 's/(kernel_flavors=\"rpi)(\")/\\12/' aports/scripts/mkimg.arm.sh\n</code></pre> <p>add the broadcom firmware, for WiFi</p> <pre><code>sed -i '/kernel_flavors=\"rpi2\"/ a\\\n\\tapks=\"\\$apks linux-firmware-brcm\"' \\\naports/scripts/mkimg.arm.sh\n</code></pre> <p>add apkvol</p> <pre><code>sed -i '/kernel_flavors=\"rpi2\"/ a\\\n\\tapkovl=\"genapkovl-dhcp.sh\"' \\\naports/scripts/mkimg.arm.sh\n</code></pre> <p>keep only the top, generic rpi, stuff. This also remove the uboot stuff</p> <pre><code>cp aports/scripts/bak.mkimg.arm.sh aports/scripts/mkimg.arm.sh\nsed -i '/profile_rpi()/,$ d' aports/scripts/mkimg.arm.sh\n</code></pre> <p>Full replacement. genapkovl-chidley.sh needs to match path/filename for the apkovl overlay file, below</p> <pre><code>tee -a aports/scripts/mkimg.arm.sh &lt;&lt;\\EOF \nprofile_rpi() {\n        profile_base\n        title=\"Raspberry Pi\"\n        desc=\"Includes Raspberry Pi kernel\"\n        image_ext=\"tar.gz\"\n        arch=\"aarch64 armhf armv7\"\n        kernel_flavors=\"rpi2\"\n        apkovl=\"genapkovl-chidley.sh\"\n        apks=\"$apks linux-firmware-brcm\"\n        kernel_cmdline=\"console=tty1 console=serial0,115200\"\n        initfs_features=\"base squashfs mmc usb kms dhcp https\"\n        hostname=\"rpi\"\n        grub_mod=\n}\nEOF\n</code></pre> <pre><code>~/pibuild rpi --simulate\n</code></pre> <p>example output</p> <pre><code>OK: 0 MiB in 0 packages\nfetch http://dl-cdn.alpinelinux.org/alpine/edge/main/armv7/APKINDEX.tar.gz\nv20220809-216-g7a8e9f1179 [http://dl-cdn.alpinelinux.org/alpine/edge/main]\nOK: 4945 distinct packages available\n&gt;&gt;&gt; mkimage-armv7: Building rpi\n&gt;&gt;&gt; mkimage-armv7: --&gt; rpi_config 0d85770dcadb24993fb3ca99e72d2c5984f11e54\n&gt;&gt;&gt; mkimage-armv7: --&gt; rpi_blobs \n&gt;&gt;&gt; mkimage-armv7: --&gt; kernel armv7 rpi2 f69b20ece0912a894f1af72f607f213090d3ffd4 linux-rpi2 linux-firmware wireless-regdb\n&gt;&gt;&gt; mkimage-armv7: --&gt; apks armv7 76f3a1bd1f8a9fbfde581a87139bb0262dc16806\n&gt;&gt;&gt; mkimage-armv7: --&gt; apkovl rpi 45c666005250fdd2ba8fa97e79a9d8fc40f2cb55\n&gt;&gt;&gt; mkimage-armv7: Creating alpine-rpi-edge-armv7.tar.gz\nImages generated in /home/build/iso\n</code></pre>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#make-an-apkovl-overaly-file","title":"Make an apkovl Overaly File","text":"<pre><code>cat &gt; genapkovl-chidley.sh &lt;&lt;\\EOFgenapkovl\n#!/bin/sh -e\n\nHOSTNAME=\"$1\"\nif [ -z \"$HOSTNAME\" ]; then\n    echo \"usage: $0 hostname\"\n    exit 1\nfi\n\ncleanup() {\n    rm -rf \"$tmp\"\n}\n\nmakefile() {\n    OWNER=\"$1\"\n    PERMS=\"$2\"\n    FILENAME=\"$3\"\n    cat &gt; \"$FILENAME\"\n    chown \"$OWNER\" \"$FILENAME\"\n    chmod \"$PERMS\" \"$FILENAME\"\n}\n\nrc_add() {\n    mkdir -p \"$tmp\"/etc/runlevels/\"$2\"\n    ln -sf /etc/init.d/\"$1\" \"$tmp\"/etc/runlevels/\"$2\"/\"$1\"\n}\n\ntmp=\"$(mktemp -d)\"\ntrap cleanup EXIT\n\nmkdir -p \"$tmp\"/etc\nmakefile root:root 0644 \"$tmp\"/etc/hostname &lt;&lt;EOF\n$HOSTNAME\nEOF\n\nmkdir -p \"$tmp\"/etc/network\nmakefile root:root 0644 \"$tmp\"/etc/network/interfaces &lt;&lt;EOF\nauto lo\niface lo inet loopback\n\nauto wlan0\niface wlan0 inet dhcp\nEOF\n\nmkdir -p \"$tmp\"/etc/apk\nmakefile root:root 0644 \"$tmp\"/etc/apk/world &lt;&lt;EOF\nalpine-base\nlinux-firmware-brcm\nwpa_supplicant\nEOF\n\nmkdir -p \"$tmp\"/etc/wpa_supplicant\nmakefile root:root 0644 \"$tmp\"/etc/wpa_supplicant/wpa_supplicant.conf &lt;&lt; \"EOF\"                                                   \nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev                                                                     \nupdate_config=1                                                                                                             \ncountry=GB                                                                                                                  \nnetwork={                                                                                                                   \n        ssid=\"Jack-iPhone\"                                                                                                  \n        psk=d9e0b093b4fcd484e696ec228c4690ee440776ab1c6159502c3059867d730678                                                \n}                                                                                                                           \nnetwork={                                                                                                                   \n        ssid=\"C1\"\n        psk=896f3ea944b25e1d0e0ec2cc7062f34617d0401b0f2fa670a3840f123d53390d\n}\nnetwork={\n        ssid=\"C2\"\n        psk=d8e5cf6b27cb04f5c49d9ed76ab0e2ec396d426dd255de38a323e06a119fb4d5\n}\nnetwork={\n        ssid=\"C_J\"\n        psk=28c3058bdeb96e91ba39dc0da4d9ff56bb2e92215a8c194e5cfff99501374583\n}\nnetwork={\n        ssid=\"MicroPython-AP\"\n        psk=1e2f01adb61b584f45cb536a056f1b342aab4b9c68188db4fe395995b739e30a\n}\nnetwork={\n        ssid=\"BT-MNAC3H\"\n        psk=042e3b47d60f94a45975dab132595ebe44bfca60fa61cb1ff5df3705e40000c7\n}\nEOF\n\nrc_add devfs sysinit\nrc_add dmesg sysinit\nrc_add mdev sysinit\nrc_add hwdrivers sysinit\nrc_add modloop sysinit\n\nrc_add hwclock boot\nrc_add modules boot\nrc_add sysctl boot\nrc_add hostname boot\nrc_add bootmisc boot\nrc_add syslog boot\n\nrc_add networking boot\nrc_add wpa_supplicant boot\n\nrc_add mount-ro shutdown\nrc_add killprocs shutdown\nrc_add savecache shutdown\n\ntar -c -C \"$tmp\" etc | gzip -9n &gt; $HOSTNAME.apkovl.tar.gz\nEOFgenapkovl\n</code></pre>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#first-script","title":"First Script","text":""},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#copy-image-to-sdcard","title":"Copy image to sdcard","text":"<pre><code>sudo su\nPIDEVICE=/dev/sdX\nmkfs.fat ${PIDEVICE}1\ntdrive=\"$(mktemp -d /tmp/alpine_install.XXXXXX)\"\nmount ${PIDEVICE}1 $tdrive\nalpine_file=/alpine/home/build/iso/alpine-rpi-edge-armv7.tar.gz\n#alpine_file=/alpine/home/build/iso/alpine-jackpi-edge-armv7.tar.gz\ntar -xvf $alpine_file -C $tdrive --no-same-owner\n# ====== brcm wifi firmware not automatically downloaded\n# https://gitlab.alpinelinux.org/alpine/aports/-/issues/13302#note_255137\ncd ~\nwget https://dl-cdn.alpinelinux.org/alpine/latest-stable/main/armv7/linux-firmware-brcm-20220509-r1.apk \nmkdir -p $tdrive/firmware\n# --strip-components=1 removes the top level directory in the archive\ntar -xvf ~/linux-firmware-brcm-20220509-r1.apk -C $tdrive --strip-components=1\n# ======\ntee -a $tdrive/usercfg.txt &gt; /dev/null &lt;&lt; \"EOF\"\nenable_uart=1\nEOF\nsync\numount $tdrive\nexit\n</code></pre> <pre><code># from a running Pi\nminicom --device /dev/serial0 --baudrate 115200\n</code></pre>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#mac-related","title":"mac related","text":"<p>Pro Terminal Commands: Using diskutil</p> <pre><code>diskutil listFilesystems\ndiskutil list\ndiskutil eraseDisk MS-DOS ALPINE disk\ndiskutil partitionDisk disk\u00a7 2 MBR MS-DOS ALPINE 512MB MS-DOS DATA R\n</code></pre> <p>Create a bootable SDHC from a Mac</p> <p>Remount media as writeable</p> <pre><code>mount /media/mmcblk0p1 -o rw,remount\n</code></pre>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#installation","title":"Installation","text":"<p>Once you know the source for packages, it should be relatively easy to build a customised image with an overlay file (apkvol). That can contain a startup script (<code>/etc/local.d/00_first_script.start</code>) and <code>/etc/apk/world</code> for packages to install at boot.</p> <p>Given a working Alpine image, build a suitable apkvol, downloading required files and customising it apkovl-builder</p> <p>Notes about apk cache Alpine local backup Local APK cache Headless Alpine Linux deployment scripts</p> <p>Some hints and tips from various scripts Pi-Factory General installation stuff How to Install Alpine Linux on Raspberry Pi Back Up a Flash Memory Installation Manually editing a existing apkovl Setting up a SSH server Alpine Linux in a chroot - Alpine Linux</p>"},{"location":"Pi/2022-08-07-Alpine-Image-Build-Raspberry-Pi/#general-alpine-linux-stuff","title":"General Alpine Linux stuff","text":"<p>paulgorman.org/technical Alpine Linux on Raspberry Pi: Diskless Mode with persistent storage GUI on a Pi Tutorial: 64-bit Alpine Linux Desktop on the Raspberry Pi 4 Writing Init Scripts - Alpine Linux</p> <p><code>/etc/modules</code> not used to load modules (#11545) \u00b7 Issues \u00b7 alpine / aports \u00b7 GitLab</p> <p>Alpine Source Map by boot sequence</p> <p>Raspberry Pi Pithy Raspberry Pi installation instructions - including overlay files</p> <p>Semi-Automatic Installation Alpine Linux Install Directly booting an ISO file QEMU 10 Alpine Linux apk Command Examples</p> <p>Alpine boot process on the Raspberry Pi - pi3g.com Debugging the Alpine boot process on a Raspberry Pi</p>"},{"location":"Python/","title":"Python","text":""},{"location":"Python/#python","title":"Python","text":""},{"location":"Python/#introduction","title":"Introduction","text":"<p>This section covers Python programming language topics, particularly focusing on testing methodologies and useful resources. Topics include generating fake data for testing and a curated collection of Python libraries and tools.</p>"},{"location":"Python/#contents","title":"Contents","text":"<ul> <li>Python Fake Data and Testing - Techniques for generating fake data for Python testing scenarios.</li> <li>Python Links - Comprehensive collection of useful Python libraries, tools, and resources.</li> </ul>"},{"location":"Python/#topics-covered","title":"Topics Covered","text":"<ul> <li>Test data generation</li> <li>Python testing frameworks and methodologies</li> <li>Data analysis and visualization</li> <li>Web frameworks and APIs</li> <li>Python libraries and tools</li> <li>Best practices for Python development</li> </ul>"},{"location":"Python/2023-03-16-Python-Fake-Data-and-Testing/","title":"Python-Fake-Data-and-Testing","text":"","tags":["python","testing","fake-data","development"]},{"location":"Python/2023-03-16-Python-Fake-Data-and-Testing/#python-fake-data-and-testing","title":"Python Fake Data and Testing","text":"","tags":["python","testing","fake-data","development"]},{"location":"Python/2023-03-16-Python-Fake-Data-and-Testing/#introduction","title":"Introduction","text":"<p>This document focuses specifically on Python testing frameworks and fake data generation. For a broader collection of Python resources including data visualization, web frameworks, and scientific computing, see Python General Resources.</p>","tags":["python","testing","fake-data","development"]},{"location":"Python/2023-03-16-Python-Fake-Data-and-Testing/#testing","title":"Testing","text":"<ul> <li>Hypothesis</li> <li>Full pytest documentation</li> <li>behave</li> </ul>","tags":["python","testing","fake-data","development"]},{"location":"Python/2023-03-16-Python-Fake-Data-and-Testing/#fake-data","title":"Fake Data","text":"<ul> <li>Faker</li> <li>Generate Huge Datasets With Fake Data Easily and Quickly using Python and Faker</li> <li>How to Generate Test Data Using Python</li> <li>Generating Fake Data with Python</li> <li>A Quick Guide to Generating Fake Data with Pandas</li> <li>Generating random dates within a given range in pandas</li> <li>add random dates in 400K pandas dataframe</li> </ul> <ul> <li>https://example.com</li> </ul>","tags":["python","testing","fake-data","development"]},{"location":"rust/","title":"Rust Programming","text":""},{"location":"rust/#rust-programming","title":"Rust Programming","text":""},{"location":"rust/#introduction","title":"Introduction","text":"<p>This section focuses on the Rust programming language, a systems programming language known for its safety and performance. Topics include getting started with Rust, learning resources, and practical applications.</p>"},{"location":"rust/#contents","title":"Contents","text":"<ul> <li>Rust Beginnings - Introduction to Rust, including installation instructions, learning resources, and initial concepts.</li> </ul>"},{"location":"rust/#related-content","title":"Related Content","text":"<p>Additional Rust-related content can be found in the main documentation directory:</p> <ul> <li>How I Learned Rust - Personal journey of learning Rust.</li> <li>Rust General - General Rust programming concepts and practices.</li> <li>Rust Data - Working with data in Rust.</li> <li>Rust Embedded - Using Rust for embedded systems development.</li> </ul>"},{"location":"rust/#topics-covered","title":"Topics Covered","text":"<ul> <li>Rust installation and setup</li> <li>Core Rust concepts (ownership, borrowing, lifetimes)</li> <li>Development tools and workflows</li> <li>Rust for systems programming</li> <li>Embedded Rust development</li> <li>Data handling in Rust</li> </ul>"},{"location":"rust/2023-03-16-Rust-Beginnings/","title":"Rust-Beginnings","text":"","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#rust-beginnings","title":"Rust Beginnings","text":"","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#introduction","title":"Introduction","text":"","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#easy","title":"Easy","text":"<ul> <li>Learn Rust</li> <li>rustlings</li> <li>Rust by Example</li> <li>easy rust</li> <li>Rust Programming Tutorial</li> <li>The Rust Edition Guide is great to read as many books and examples now use older editions.</li> <li>The Rust Reference</li> <li>Rust Design Patterns</li> </ul>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#more-involved","title":"More involved","text":"<p>Rust exercises on Exercism C2Rust Citrus: Convert C to Rust</p> <p>Brown University's version of the Rust Book is best left as a revision work because it tries really, really hard to make sure that you've understood everything. I thought that this would be a perfect way to get started but, as I discovered, I became dishartened because I didn't understand everything perfectly and it is labourious to work through. Rust is quite a hard language to get to grips with because it forces you, the programmer, to write correct code. Writing correct code is hard.</p> <ul> <li>Cargo B(inary)Install to install binary files using Cargo. Normally Cargo downloads the source files and complies them first.</li> <li>This Week in Rust</li> <li>currently</li> <li>Rewritten in Rust: Modern Alternatives of Command-Line Tools is slightly out of date (e.g. <code>btm</code> replaces <code>ytop</code>) but still great to see what is possible.</li> <li>A half-hour to learn Rust - this reminds me of F#'s tutorial that, if I remember correctly, was included by default with Visual Studio or the .net example project for F#.</li> <li>The Dark Arts of Unsafe Rust The Rustonomicon</li> <li>The Rust FFI Omnibus is a collection of examples of using code written in Rust from other languages.</li> </ul>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#dead-tree-live-bits","title":"Dead Tree, Live Bits","text":"<ul> <li>\"Zero To Production In Rust is the ideal starting point for your journey as a Rust backend developer. You will learn by doing: you will build a fully functional email newsletter API, starting from scratch.\"</li> <li>Rust for Rustaceans</li> <li>Rust in Action - Systems programming concepts and techniques also has an accociated audiobook from Audible. Interesting to look at source code / companion pdf and listen to it. Requires more work to understand which is a good thing.</li> <li>Packt Publishing, Manning and the big dog O\u2019Reilly, and probably others, have libraries of both books and video courses.</li> <li>Rust in Motion is a little outdated but still relevant, one of the presenters wrote the rust book.</li> <li>Roguelike Tutorial - In Rust</li> </ul>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#install-for-windows","title":"Install for Windows","text":"<p>Build Tools for Visual Studio 2022 - look down the page Downloads, then install these two bits of software:</p> <ul> <li>MSVC v143 - VS 2022 C++ x64/x86 build tools (Latest)</li> <li>Windows 11 SDK (10.0.22621.0)</li> </ul> <p>Run <code>rustup-init.exe</code> from Install Rust</p>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#rustup","title":"rustup","text":"<ul> <li>The rustup book</li> </ul> <pre><code>rustup docs --book\n</code></pre> <pre><code>rustup target list # cross-compile options\n# cargo build --target=arm-linux-androideabi # for example\nrustup completions powershell &gt;&gt; $PROFILE.CurrentUserCurrentHost # The included using statements belong at the top of $PROFILE \n</code></pre>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#speedup","title":"Speedup","text":"<p>use the LLD linker to speed it up.</p>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#rust-analyzer","title":"Rust-Analyzer","text":"<p>If you have installed rust-analyzer via rustup do not update it standalone, nor the other way around.</p>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#from-source","title":"From Source","text":"<p>Initial Instllation:</p> <pre><code>git clone https://github.com/rust-lang/rust-analyzer.git\ncd rust-analyzer\ngit checkout release # master is also an option\ncargo xtask install --server # standalone client\n</code></pre> <p>Update:</p> <pre><code>cd rust-analyzer\ngit pull\ncargo xtask install --server # standalone client\n</code></pre>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#from-releases","title":"From Releases","text":"<p>Install:</p> <ul> <li>Download a suitable Windows specific release e.g. <code>rust-analyzer-x86_64-pc-windows-msvc.zip</code></li> <li>Extract the files</li> <li>Copy the <code>rust-analyzer.exe</code> file to a suitable directory (e.g. <code>C:\\tools</code>)</li> <li>Add that directory to the user's path environmental variable</li> <li>Open a new <code>Command Prompt</code> or <code>PowerShell</code> to use <code>rust-analyzer</code> </li> </ul> <p>Update:</p> <pre><code>(get-command rust-analyzer).Source # c:\\tools # for example\ncurl -L -O https://github.com/rust-lang/rust-analyzer/releases/download/2024-02-12/rust-analyzer-x86_64-pc-windows-msvc.zip # check current version\ncopy .\\rust-analyzer.exe (get-command rust-analyzer).Source\n</code></pre>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#string-str-u8","title":"String, str, u8","text":"<p>See Unicode, Strings, str, char, u8</p> <p>Rust uses ut8 encoding for strings, etc, chars are u32 which is the size of Unicode Scalar Value but characters are just a number known as a Code point: Any value in the Unicode codespace.. For some langauges characters can be made up of several code points. Unicode\u00ae Standard Annex #29 </p>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#types","title":"Types","text":"<p>[Sometimes you just want to the type see Boiethios's Stackoverflow answer or fasterthanli.me's use of type_name</p> <pre><code>use std::any::type_name;\n\nfn main() {\n    let x = &amp;false;\n    print_type_name_of(&amp;x);\n\n    let ref x = &amp;false;\n    print_type_name_of(&amp;x);\n\n    let x = 1.0;\n    print_type_name_of(&amp;x);\n}\n\nfn print_type_name_of&lt;T&gt;(_: &amp;T) {\n    println!(\"{}\", std::any::type_name::&lt;T&gt;());\n}\n</code></pre> <p>To find out what your type, defined in your libraries not <code>main.rs</code>, implements:</p> <p><code>cargo doc --open # --document-private-items # for private types too</code></p>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#documenting","title":"Documenting","text":"<ul> <li>The rustdoc book</li> <li>mdBook is a command line tool to create books with Markdown</li> </ul>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#learning-by-programming","title":"Learning by Programming","text":"","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#exercises-in-programming-style","title":"Exercises in Programming Style","text":"<p>Exercises in Programming Style by Crista, who wrote a book of the same name, which I own on Kindle.</p> <p>F# port of the examples in \"Exercises in Programming Style\", starting with Exercises in Programming Style\u2013Style 1, Exercises in Programming Style\u2013Go Forth for more try this search</p>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#games","title":"Games","text":"<ul> <li>convert this Learn To Code Space Invaders \u2013 learn lua by programming from lua to Rust and WebAssembly using this WASM-4 fantasy game console</li> </ul> <p>Bevy - lots of coding Bevy - 3rd from scratch series - Farming Robot Bevy (half exposition and half coding) - Asteroids? Rust Bevy - Space Invaders</p>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#programming-language","title":"Programming Language","text":"<p>See <code>mal - make a lisp</code>, <code>(An ((Even Better) Lisp) Interpreter (in Python))</code> and <code>chibicc</code> in these links:</p> <p>see Parsing-Compilers and Writing a Programming Language</p> <p>Rust specific links:</p> <ul> <li>based on <code>Risp</code> Building a Lisp-like Language from Scratch in Rust</li> <li>Risp (in (Rust) (Lisp))</li> <li>Rust Your Own Lisp with source code</li> <li>rust specific mal mal-rust</li> <li>another mal-rust</li> <li>embedded lisp in rust Steel - An embeddable and extensible scheme dialect built in Rust.</li> <li>embeddable lisp rust_lisp</li> </ul>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#background","title":"Background","text":"<ul> <li>(How to Write a (Lisp) Interpreter (in Python))</li> <li>(An ((Even Better) Lisp) Interpreter (in Python))</li> <li>Learning with Peter Norvig's lis.py interpreter</li> </ul>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#toml","title":"TOML","text":"<ul> <li>vim for Rust</li> <li>Rust Load a TOML File</li> </ul>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#helix","title":"Helix","text":"<p>helix-editor</p> <pre><code>rustup component add rust-analyzer // for this to work\n</code></pre>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#ide","title":"IDE","text":"<p>pylint replacement with Ruff</p> <p>in <code>.pylintrc</code> file (or <code>pylintrc</code>, or...)</p> <pre><code>pylint --extension-pkg-allow-list=your_c_extension\n</code></pre> <p>turn on mypy linting and then build a suitable <code>*.pyi</code> file to contain the definitions. To do that search for <code>mypy linting</code> in the VS Code settings (user and workspace).</p> <ul> <li>Neovide - doesn't work that well on my Mac Book m1</li> </ul>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#with-python","title":"With Python","text":"<ul> <li>PyO3 user guide</li> <li> <p>Maturin User Guide</p> </li> <li> <p>Using Pylint with PyModule generated using PyO3 and maturin</p> </li> <li> <p>Type Stubs</p> </li> <li>Creating Stubs For Python Modules</li> </ul> <pre><code>def sum_as_string(a: int, b: int) -&gt; str: ...\n</code></pre>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#links","title":"Links","text":"<ul> <li>https://docs.rs/toml/latest/toml/</li> </ul> <ul> <li>The Rust Programming Language</li> <li>Rust Cookbook</li> </ul>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#rust","title":"Rust","text":"<ul> <li>Rust Programming Language</li> <li>A half-hour to learn Rust</li> <li>Frustrated? It's not you, it's Rust</li> <li>How to Mix Rust and Python in Your Project</li> <li>GitHub - PyO3/pyo3: Rust bindings for the Python interpreter</li> <li>Introduction - PyO3 user guide</li> </ul>","tags":["rust","programming","installation","resources"]},{"location":"rust/2023-03-16-Rust-Beginnings/#rust-and-neovim","title":"Rust and Neovim","text":"<ul> <li>rust - NeoVim shows diagnostic for <code>std</code> and other crates outside my current workspace - Stack Overflow</li> <li>Rust and Neovim - A Thorough Guide and Walkthrough | the trait</li> <li>Neovim and Rust \u00b7 sharksforarms</li> <li> <p>GitHub - Integralist/nvim: Neovim configuration</p> </li> <li> <p>lua - Rust</p> </li> <li>GitHub - amethyst/rlua: High level Lua bindings to Rust</li> </ul>","tags":["rust","programming","installation","resources"]}]}